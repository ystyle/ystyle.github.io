<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>东方星痕</title>
  
  <subtitle>请你给我力量，给我方向， 用风一样的翅膀，更用力的飞翔.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ystyle.top/"/>
  <updated>2023-10-13T07:08:26.000Z</updated>
  <id>http://ystyle.top/</id>
  
  <author>
    <name>YSTYLE</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hypyland实现alt + tab切换到任意工作区的窗口</title>
    <link href="http://ystyle.top/2023/10/13/hyprland-alt-tab-switch-to-any-widnow/"/>
    <id>http://ystyle.top/2023/10/13/hyprland-alt-tab-switch-to-any-widnow/</id>
    <published>2023-10-13T02:46:26.000Z</published>
    <updated>2023-10-13T07:08:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>hypyland使用过程中，遇到开了很多工作区和很多窗口时，找指定的窗口会比较麻烦</p></blockquote><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><blockquote><p>一键安装 <code>yay -S jq rofi-lbonn-wayland-git</code></p></blockquote><ul><li>jq</li><li>rofi</li></ul><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>把以下脚本存放到<code>~/.config/hypr/scripts/switch_windows</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/usr/bin/env bash</span><br><span class="line">NAME=`hyprctl clients -j | jq -r '.[] | select(.title != "") | .title' | rofi -dmenu`</span><br><span class="line">WINDOW=`hyprctl clients -j | jq -r ".[] | select(.title == \"$&#123;NAME&#125;\") | .address"`</span><br><span class="line">hyprctl dispatch focuswindow address:$&#123;WINDOW&#125;</span><br></pre></td></tr></table></figure></p><p>添加快捷键<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind = ALT, Tab, exec, $&#123;HOME&#125;/.config/hypr/scripts/switch_windows</span><br></pre></td></tr></table></figure></p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><blockquote><p>按<code>alt + tab</code>后，在弹出的窗口选择对应窗口的标题， 可以自动跳转到对应的窗口</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/ystyle/ystyle.github.io/assets/4478635/bf28c244-a9ad-4463-92a6-d06b5329c749" alt="截图_2023-10-13_160749" title="">                </div>                <div class="image-caption">截图_2023-10-13_160749</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;hypyland使用过程中，遇到开了很多工作区和很多窗口时，找指定的窗口会比较麻烦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;依赖&quot;&gt;&lt;a href=&quot;#依赖&quot; class=&quot;headerlink&quot; title=&quot;依赖&quot;&gt;&lt;/a&gt;依赖&lt;/
      
    
    </summary>
    
      <category term="系统" scheme="http://ystyle.top/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="hyprland" scheme="http://ystyle.top/tags/hyprland/"/>
    
      <category term="wayland" scheme="http://ystyle.top/tags/wayland/"/>
    
  </entry>
  
  <entry>
    <title>使用泛型设计gorm扩展字段</title>
    <link href="http://ystyle.top/2023/09/25/design_gorm_extension_fields_using_generics/"/>
    <id>http://ystyle.top/2023/09/25/design_gorm_extension_fields_using_generics/</id>
    <published>2023-09-25T09:37:26.000Z</published>
    <updated>2023-09-25T09:37:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>大型项目经常需要在标准的用户表或员工表加些扩展字段，如果你有一套标准的用户管理系统的话，要么每个项目复制过来改一遍或者添加十几个固定的自定义字段Def1~Def10， 现在可以用在gorm定义模型时使用泛型来解决这个问题</p></blockquote><h3 id="gorm-embeded嵌入字段"><a href="#gorm-embeded嵌入字段" class="headerlink" title="gorm embeded嵌入字段"></a>gorm embeded嵌入字段</h3><p>使用<code>gorm:&quot;embedded&quot;</code>定义嵌入字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">gorm.Model</span><br><span class="line">Username <span class="keyword">string</span></span><br><span class="line">Password <span class="keyword">string</span></span><br><span class="line">Extend   UserExtendField <span class="string">`gorm:"embedded"`</span> <span class="comment">// 添加embed tag</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserExtendField <span class="keyword">struct</span> &#123;</span><br><span class="line">OpenID <span class="keyword">string</span></span><br><span class="line">UnionID <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的model等价于这个, 两个生成的表结构是一致的<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">gorm.Model</span><br><span class="line">Username <span class="keyword">string</span></span><br><span class="line">Password <span class="keyword">string</span></span><br><span class="line">OpenID <span class="keyword">string</span></span><br><span class="line">UnionID <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面两个模型都会生成同样的ddl sql, 如下<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">users</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span>         <span class="built_in">bigint</span> <span class="keyword">unsigned</span> auto_increment</span><br><span class="line">        primary <span class="keyword">key</span>,</span><br><span class="line">    created_at datetime(<span class="number">3</span>) <span class="literal">null</span>,</span><br><span class="line">    updated_at datetime(<span class="number">3</span>) <span class="literal">null</span>,</span><br><span class="line">    deleted_at datetime(<span class="number">3</span>) <span class="literal">null</span>,</span><br><span class="line">  username   longtext    <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">password</span>   longtext    <span class="literal">null</span>,</span><br><span class="line">    org_id     longtext    <span class="literal">null</span>,</span><br><span class="line">    open_id    longtext    <span class="literal">null</span>,</span><br><span class="line">    union_id   longtext    <span class="literal">null</span>   </span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h3 id="使用泛型定义可扩展的模型"><a href="#使用泛型定义可扩展的模型" class="headerlink" title="使用泛型定义可扩展的模型"></a>使用泛型定义可扩展的模型</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User[ExtendField any] <span class="keyword">struct</span> &#123;</span><br><span class="line">gorm.Model</span><br><span class="line">Username <span class="keyword">string</span></span><br><span class="line">Password <span class="keyword">string</span></span><br><span class="line">Extend   ExtendField <span class="string">`gorm:"embedded"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要自定义表名，否则gorm识别到的泛型的表名是不符合数据库标准的，建表会错误</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(User[Extend, Item])</span> <span class="title">TableName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"ma_users"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义扩展字段结构</span></span><br><span class="line"><span class="keyword">type</span> ExtendUserField <span class="keyword">struct</span> &#123;</span><br><span class="line">OrgID   <span class="keyword">string</span></span><br><span class="line">OpenID  <span class="keyword">string</span></span><br><span class="line">UnionID <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成数据库表结构</span></span><br><span class="line">db.AutoMigrate(User[ExtendUserField])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="keyword">var</span> list []User[ExtendUserField]</span><br><span class="line">db.model(&amp;User[ExtendUserField]).Find(&amp;list)</span><br></pre></td></tr></table></figure></p><h3 id="可扩展的子表"><a href="#可扩展的子表" class="headerlink" title="可扩展的子表"></a>可扩展的子表</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User[ExtendField any,Item any] <span class="keyword">struct</span> &#123;</span><br><span class="line">gorm.Model</span><br><span class="line">Username <span class="keyword">string</span></span><br><span class="line">Password <span class="keyword">string</span></span><br><span class="line">Extend   ExtendField <span class="string">`gorm:"embedded"`</span></span><br><span class="line">Items    Item <span class="string">`gorm:"foreignKey:user_id"`</span> <span class="comment">// 这里需要写外键</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 需要自定义表名，否则gorm识别到的泛型的表名是不符合数据库标准的，建表会错误</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(User[Extend, Item])</span> <span class="title">TableName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"ma_users"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserItem <span class="keyword">struct</span> &#123;</span><br><span class="line">gorm.Model</span><br><span class="line">UserID  <span class="keyword">uint</span></span><br><span class="line">Product <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义扩展字段结构</span></span><br><span class="line"><span class="keyword">type</span> ExtendUserField <span class="keyword">struct</span> &#123;</span><br><span class="line">OrgID   <span class="keyword">string</span></span><br><span class="line">OpenID  <span class="keyword">string</span></span><br><span class="line">UnionID <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="keyword">var</span> list []User[ExtendUserField, UserItem]</span><br><span class="line">db.model(&amp;User[ExtendUserField, UserItem]).Find(&amp;list)</span><br></pre></td></tr></table></figure></p><h3 id="使用类型别名简化泛型类型"><a href="#使用类型别名简化泛型类型" class="headerlink" title="使用类型别名简化泛型类型"></a>使用类型别名简化泛型类型</h3><blockquote><p>使用类型别名， 可以把上面的泛型代码简化<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyUser = User[ExUserField, UserItem]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list []MyUser</span><br><span class="line">db.model(&amp;MyUser).Find(&amp;list)</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;大型项目经常需要在标准的用户表或员工表加些扩展字段，如果你有一套标准的用户管理系统的话，要么每个项目复制过来改一遍或者添加十几个固定的自定义字段Def1~Def10， 现在可以用在gorm定义模型时使用泛型来解决这个问题&lt;/p&gt;
&lt;/blockqu
      
    
    </summary>
    
      <category term="软件" scheme="http://ystyle.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="go" scheme="http://ystyle.top/tags/go/"/>
    
      <category term="gorm" scheme="http://ystyle.top/tags/gorm/"/>
    
      <category term="泛型" scheme="http://ystyle.top/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>使用qemu8.0安装龙芯loongarch64版本archlinux</title>
    <link href="http://ystyle.top/2023/07/20/install-loongarch64-archlinux-qemu/"/>
    <id>http://ystyle.top/2023/07/20/install-loongarch64-archlinux-qemu/</id>
    <published>2023-07-20T02:46:26.000Z</published>
    <updated>2023-07-20T02:46:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li><a href="https://loongarchlinux.org/pages/download/" target="_blank" rel="noopener">Loong Arch Linux官网</a></li><li><a href="https://mirrors.pku.edu.cn/loongarch/archlinux/images/" target="_blank" rel="noopener">qemu镜像下载</a><ul><li><code>QEMU_EFI_8.0.fd</code>: 固件</li><li><code>archlinux-xfce4-2023.05.10-loong64.qcow2.zst</code>: 系统镜像, 下载后需要解压出qcow2文件</li></ul></li></ul><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><blockquote><p>建议安装<code>qemu-full</code>包, 我以前安装的不是这个, 导致gpu加载不了</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S qemu-full</span><br></pre></td></tr></table></figure><h3 id="启动系统"><a href="#启动系统" class="headerlink" title="启动系统"></a>启动系统</h3><blockquote><p>注意固件版本和系统镜像版本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-loongarch64 \</span><br><span class="line">    -m 4G \</span><br><span class="line">    -cpu la464-loongarch-cpu \</span><br><span class="line">    -machine virt \</span><br><span class="line">    -smp 4 \</span><br><span class="line">    -bios ./QEMU_EFI_8.0.fd \</span><br><span class="line">    -serial stdio \</span><br><span class="line">    -device virtio-gpu-pci \</span><br><span class="line">    -net nic -net user \</span><br><span class="line">    -device nec-usb-xhci,id=xhci,addr=0x1b \</span><br><span class="line">    -device usb-tablet,id=tablet,bus=xhci.0,port=1 \</span><br><span class="line">    -device usb-kbd,id=keyboard,bus=xhci.0,port=2 \</span><br><span class="line">    -hda archlinux-xfce4-2023.05.10-loong64.qcow2</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/ystyle/ystyle.github.io/assets/4478635/6ccb868a-2fa2-4b8c-8a92-5ca84f4a1e03" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/ystyle/ystyle.github.io/assets/4478635/a71528eb-e84c-44b9-b5b9-4f2343e4699f" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://loongarchlinux.org/pages/download/&quot; target=&quot;_bl
      
    
    </summary>
    
      <category term="系统" scheme="http://ystyle.top/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="loongarch" scheme="http://ystyle.top/tags/loongarch/"/>
    
      <category term="archlinux" scheme="http://ystyle.top/tags/archlinux/"/>
    
      <category term="qemu" scheme="http://ystyle.top/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>在archlinux aur上提交龙芯loongarch的软件包</title>
    <link href="http://ystyle.top/2023/07/19/push-loongarch64-app-to-archlinux-aur/"/>
    <id>http://ystyle.top/2023/07/19/push-loongarch64-app-to-archlinux-aur/</id>
    <published>2023-07-19T06:46:26.000Z</published>
    <updated>2023-07-19T06:46:26.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/ystyle/ystyle.github.io/assets/4478635/1813826c-da90-426f-9d19-e9a459f3f262" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><blockquote><p>发现安装好龙芯后, laur软件仓库就自带了yay和paru, 可以直接使用pacman安装. 我有一个软件kaf-cli是go写的可以直接编译到龙芯上.本文记录一下PKGBUILD的写法</p></blockquote><h3 id="PKGBUILD脚本"><a href="#PKGBUILD脚本" class="headerlink" title="PKGBUILD脚本"></a>PKGBUILD脚本</h3><p>脚本基本上和x86上的没什么区别, 只需要</p><ul><li>在<code>arch</code>字段上添加<code>loong64</code>构架</li><li>添加<code>source_loong64</code>软件安装包的源</li><li>添加<code>sha512sums_loong64</code>校验值, 还可以是<code>md5sum_loong64</code>, <code>sha1sums_loong64</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Maintainer: YSTYLE &lt;lxy5266@live.com&gt;</span><br><span class="line"></span><br><span class="line">pkgname=kaf-cli</span><br><span class="line">pkgver=v1.3.5</span><br><span class="line">pkgrel=2</span><br><span class="line">epoch=</span><br><span class="line">pkgdesc=&quot;把txt文本转成epub与mobi电子书的命令行工具&quot;</span><br><span class="line">arch=(&apos;x86_64&apos; &apos;aarch64&apos; &apos;loong64&apos;)</span><br><span class="line">url=&quot;https://github.com/ystyle/kaf-cli&quot;</span><br><span class="line">license=(&apos;MulanPSL&apos;)</span><br><span class="line">optdepends=(&apos;kindlegen: 在x86_64上用于生成标准的mobi格式&apos;)</span><br><span class="line">source_x86_64=(&quot;https://github.com/ystyle/TmdTextEpub/releases/download/$pkgver/kaf-cli_$&#123;pkgver&#125;_linux_amd64.zip&quot;)</span><br><span class="line">source_aarch64=(&quot;https://github.com/ystyle/TmdTextEpub/releases/download/$pkgver/kaf-cli_$&#123;pkgver&#125;_linux_arm64.zip&quot;)</span><br><span class="line">source_loong64=(&quot;https://github.com/ystyle/TmdTextEpub/releases/download/$pkgver/kaf-cli_$&#123;pkgver&#125;_linux_loong64.zip&quot;)</span><br><span class="line">sha512sums_x86_64=(&apos;29d3f3e0138f2348024d8a3e2a7a19dfe00b0098e9247c2ea364f3e4ab992575fc68bbbf56258be341c335b94e989ecbe37c0c32419b61ee2d45034f5c5e00de&apos;)</span><br><span class="line">sha512sums_aarch64=(&apos;72d2519dec242be92869d0d2eb7022d836147624ff79ba797ff287eb0444eb3dd33e910c01422e1448d486955dbbea0fbc2166e942213e1be03038993945e28f&apos;)</span><br><span class="line">sha512sums_loong64=(&apos;c6af9aeb904f934c0fbee06dda83fed02a22c0ec41cccd1b685cbe5e232b5dd66ad5888a91ab2aadeef7007870c94a063a4537a3e32f150d4ea12453cb3f1b54&apos;)</span><br><span class="line"></span><br><span class="line">package() &#123;</span><br><span class="line">    install -Dm755 kaf-cli &quot;$pkgdir/usr/bin/kaf-cli&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>然后生成安装包清单信息<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">makepkg --printsrcinfo &gt; .SRCINFO</span><br></pre></td></tr></table></figure></p><p>测试生成安装包<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">makepkg -f</span><br></pre></td></tr></table></figure></p><p>直接安装软件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">makepkg -si</span><br></pre></td></tr></table></figure></p><p>没问题直接用git推送到aur上就可以了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
      <category term="系统" scheme="http://ystyle.top/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="loongarch" scheme="http://ystyle.top/tags/loongarch/"/>
    
      <category term="archlinux" scheme="http://ystyle.top/tags/archlinux/"/>
    
      <category term="龙芯" scheme="http://ystyle.top/tags/%E9%BE%99%E8%8A%AF/"/>
    
  </entry>
  
  <entry>
    <title>k3s云上master+内网agent的部署方式</title>
    <link href="http://ystyle.top/2023/03/11/k3s-master-in-cloud-agent-in-local-intranet/"/>
    <id>http://ystyle.top/2023/03/11/k3s-master-in-cloud-agent-in-local-intranet/</id>
    <published>2023-03-11T13:02:26.000Z</published>
    <updated>2023-03-11T13:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>公网master和内网agent使用<code>wireguard-native</code>通信， 只要在所有节点上安装了<code>wireguard</code>模块，k3s会自动处理所有通信流量</p></blockquote><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>在云端master开放<ul><li><code>tcp</code> <code>6443</code> 端口，</li><li><code>udp</code> <code>51820</code> 端口</li></ul></li><li>先在所有机器上安装<code>wireguard-native</code>， <a href="https://www.wireguard.com/install/" target="_blank" rel="noopener">点击查看安装命令</a></li><li>如果内网有防火墙，需要开放master公网ip的<code>6443</code>和<code>51820</code>端口</li></ul><h3 id="在云上安装master"><a href="#在云上安装master" class="headerlink" title="在云上安装master"></a>在云上安装master</h3><blockquote><p>需要替换下面的master_public_ip为master公网ip, 能正常起来一般就没问题了</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export INSTALL_KAS_EXEC="--node-external-ip=master_public_ip --flannel-backend=wireguard-native --flannel-external-ip"</span><br><span class="line">curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -</span><br></pre></td></tr></table></figure><blockquote><p>INSTALL_KAS_EXEC的参数是最少的开启<code>wireguard-native</code>功能的参数</p></blockquote><blockquote><p>在msater上执行<code>cat /var/lib/rancher/k3s/server/node-token</code>获取token, 等下子节点需要用</p></blockquote><h3 id="在内网安装agent"><a href="#在内网安装agent" class="headerlink" title="在内网安装agent"></a>在内网安装agent</h3><blockquote><p>我是在树苺派上安装的。<br>下面的token需要换成上一步获取的， 然后把x.x.x.x换成上面的<code>master_public_ip</code>的master公网ip</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export TOKEN=K1004a306bd3e78de0bfb4e9a485659e847dd16be3192b5b16407f53f991dc7d7f7::server:58dcf4e6e4fd7c6023976c331d1xxxxxx</span><br><span class="line">curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn K3S_URL=https://x.x.x.x:6443 K3S_TOKEN=$&#123;TOKEN&#125; sh -s - --docker --node-external-ip=x.x.x.x</span><br></pre></td></tr></table></figure><blockquote><p>只需要添加<code>--node-external-ip</code>参数就能启用<code>wireguard-native</code>功能了 。 如果没加这参数，是普通的节点，公网master和内网agent就不能正常通信</p></blockquote><h3 id="验证方法"><a href="#验证方法" class="headerlink" title="验证方法"></a>验证方法</h3><ol><li><p>先查看节点是否正常，不需要重启master或agent的服务，如果重启后才看到的话，可能没安装成功</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> $ kubelct get node</span><br><span class="line">NAME                      STATUS   ROLES                  AGE    VERSION</span><br><span class="line">ubuntu-20.04   Ready    control-plane,master   14d    v1.25.6+k3s1</span><br><span class="line">archlinux-rpi             Ready    &lt;none&gt;                 156m   v1.25.6+k3s1</span><br></pre></td></tr></table></figure></li><li><p>用nodeSelector分别在master和内网机器上部署nginx的deploy， 再分别创建对应的service</p></li><li>再在其中一个deploy的pod里执行curl 另一个deploy的service名称，如果能请求到nginx默认界面，说明是通的</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;公网master和内网agent使用&lt;code&gt;wireguard-native&lt;/code&gt;通信， 只要在所有节点上安装了&lt;code&gt;wireguard&lt;/code&gt;模块，k3s会自动处理所有通信流量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 
      
    
    </summary>
    
      <category term="运维" scheme="http://ystyle.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="k3s" scheme="http://ystyle.top/tags/k3s/"/>
    
      <category term="kubernetes" scheme="http://ystyle.top/tags/kubernetes/"/>
    
      <category term="wireguard-native" scheme="http://ystyle.top/tags/wireguard-native/"/>
    
      <category term="wireguard" scheme="http://ystyle.top/tags/wireguard/"/>
    
  </entry>
  
  <entry>
    <title>阿里云网盘映射本地硬盘</title>
    <link href="http://ystyle.top/2022/01/01/aliyundrive-webdav/"/>
    <id>http://ystyle.top/2022/01/01/aliyundrive-webdav/</id>
    <published>2022-01-01T14:46:26.000Z</published>
    <updated>2022-01-01T14:46:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载aliyundrive-webdav"><a href="#下载aliyundrive-webdav" class="headerlink" title="下载aliyundrive-webdav"></a>下载aliyundrive-webdav</h3><ul><li>下载地址: <a href="https://github.com/messense/aliyundrive-webdav/releases/latest" target="_blank" rel="noopener">https://github.com/messense/aliyundrive-webdav/releases/latest</a></li><li>解压并放在一个目录里<br><img src="https://dll.ystyle.top/images/2022-01/explorer_2022-01-01_23-16-55.png" alt=""></li></ul><h3 id="准备脚本"><a href="#准备脚本" class="headerlink" title="准备脚本"></a>准备脚本</h3><blockquote><p>把以下内容存为run.ps1</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:REFRESH_TOKEN</span>=<span class="string">"484b469b3ef74dcaba5cf21aeadae2ca"</span></span><br><span class="line"><span class="variable">$env:WEBDAV_AUTH_USER</span>=<span class="string">"admin"</span></span><br><span class="line"><span class="variable">$env:WEBDAV_AUTH_PASSWORD</span>=<span class="string">"123456"</span></span><br><span class="line"><span class="built_in">Start-Process</span> -FilePath aliyundrive-webdav.exe -ArgumentList (<span class="string">"--port=8080"</span>) -Wait -WindowStyle Hidden</span><br></pre></td></tr></table></figure><p>脚本配置说明:</p><ul><li><code>$env:REFRESH_TOKEN</code>: 为阿里云网盘登陆后的token, 必需改为自己的<ul><li><a href="https://github.com/messense/aliyundrive-webdav#%E8%8E%B7%E5%8F%96-refresh_token" target="_blank" rel="noopener">获取阿里云网盘REFRESH_TOKEN的方法</a></li></ul></li><li><code>$env:WEBDAV_AUTH_USER</code>： webdav用户名</li><li><code>$env:WEBDAV_AUTH_PASSWORD</code>: webdav密码</li><li><p><code>--port=8080</code> 为webdav的访问端口，被占用时可以换成其它的</p><p><img src="https://dll.ystyle.top/images/2022-01/kate_2022-01-01_23-18-47.png" alt=""></p></li></ul><h3 id="设计开机启动"><a href="#设计开机启动" class="headerlink" title="设计开机启动"></a>设计开机启动</h3><ul><li><code>win + s</code>搜索<code>任务计划程序</code>打开</li><li>在打开界面选择<code>任务计划程序库</code></li><li><p>在右边点创建基本任务，输入名字: <code>aliyundrive-webdav</code> (名字可以随意写)<br><img src="https://dll.ystyle.top/images/2022-01/mmc_2022-01-01_23-12-57.png" alt=""></p></li><li><p>下一步选择: 计算机启动时<br><img src="https://dll.ystyle.top/images/2022-01/mmc_2022-01-01_23-13-35.png" alt=""></p></li><li><p>下一步选择: 启动程序</p><ul><li>下一步： 在【程序或者脚本】写: <code>powershell.exe</code></li><li>在【添加参数】填写: <code>-WindowStyle Hidden -file run.ps1</code></li><li>在【起始于】填写：存放<code>run.ps1</code>和 <code>aliyundrive-webdav</code>的目录<br><img src="https://dll.ystyle.top/images/2022-01/mmc_2022-01-01_23-13-52.png" alt=""></li></ul><p><img src="https://dll.ystyle.top/images/2022-01/chrome_2022-01-01_23-15-31.png" alt=""></p></li><li><p>下一步点击：完成<br><img src="https://dll.ystyle.top/images/2022-01/mmc_2022-01-01_23-16-10.png" alt=""></p></li><li>启动服务: 在服务列表选择<code>aliyundrive-webdav</code>并在右边选项里选择启动<br><img src="https://dll.ystyle.top/images/2022-01/mmc_2022-01-01_23-20-07.png" alt=""></li></ul><h3 id="映射本地硬盘"><a href="#映射本地硬盘" class="headerlink" title="映射本地硬盘"></a>映射本地硬盘</h3><ul><li>修改注册表，以支持webdav的http协议<br><img src="https://user-images.githubusercontent.com/4478635/166304882-bd9852a9-081d-4420-9818-e6ba864bac27.png" alt="image"></li><li>打开文件管理器，在此电脑右键-选择映射网络驱动器<br><img src="https://dll.ystyle.top/images/2022-01/explorer_2022-01-01_23-22-35.png" alt=""></li><li><p>在弹窗选择一个盘符，并在文件夹填写: <code>http://127.0.0.1:8080</code>, 点完成，在弹窗输入用户名和密码<br><img src="https://dll.ystyle.top/images/2022-01/explorer_2022-01-01_23-23-39.png" alt=""></p><p><img src="https://dll.ystyle.top/images/2022-01/chrome_2022-01-01_23-25-44.png" alt=""></p><p><img src="https://dll.ystyle.top/images/2022-01/explorer_2022-01-01_23-25-13.png" alt=""></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;下载aliyundrive-webdav&quot;&gt;&lt;a href=&quot;#下载aliyundrive-webdav&quot; class=&quot;headerlink&quot; title=&quot;下载aliyundrive-webdav&quot;&gt;&lt;/a&gt;下载aliyundrive-webdav&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="软件" scheme="http://ystyle.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="阿里云网盘" scheme="http://ystyle.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91%E7%BD%91%E7%9B%98/"/>
    
      <category term="webdav" scheme="http://ystyle.top/tags/webdav/"/>
    
  </entry>
  
  <entry>
    <title>go mod 拉取 gogs 私有仓库</title>
    <link href="http://ystyle.top/2021/06/22/go-mod-gogs-private/"/>
    <id>http://ystyle.top/2021/06/22/go-mod-gogs-private/</id>
    <published>2021-06-22T02:46:26.000Z</published>
    <updated>2021-06-22T02:46:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h3><ol><li>添加环境变量或设置go env<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GOPRIVATE=git.hofo.co</span><br><span class="line"># 或者</span><br><span class="line">go env -w GOPRIVATE=git.hofo.co</span><br></pre></td></tr></table></figure></li></ol><h3 id="git设置"><a href="#git设置" class="headerlink" title="git设置"></a>git设置</h3><ol><li><p>在git设置http.extraheader</p><ul><li><code>PRIVATE-TOKEN</code>生成方式:  在点击gogs右上头像-用户设置-授权应用-生成新的token<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.extraheader "PRIVATE-TOKEN: 5737d215af7f9a41a2abe98631d312e9e9311d29d"</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在git添加url配置, <code>ystyle:5737d215af7f9a41a2abe98631d312e9e939d29d11</code>是用户名和上一步生成的token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global url."https://ystyle:5737d215af7f9a41a2abe98631d312e9e939d29d11@git.hofo.co".insteadOf "https://git.hofo.co"</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;环境变量设置&quot;&gt;&lt;a href=&quot;#环境变量设置&quot; class=&quot;headerlink&quot; title=&quot;环境变量设置&quot;&gt;&lt;/a&gt;环境变量设置&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;添加环境变量或设置go env&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="软件" scheme="http://ystyle.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="go" scheme="http://ystyle.top/tags/go/"/>
    
      <category term="git" scheme="http://ystyle.top/tags/git/"/>
    
      <category term="gogs" scheme="http://ystyle.top/tags/gogs/"/>
    
  </entry>
  
  <entry>
    <title>开源鸿蒙网络和hdc连接方法</title>
    <link href="http://ystyle.top/2021/06/06/openharmonyos-hdc-and-network/"/>
    <id>http://ystyle.top/2021/06/06/openharmonyos-hdc-and-network/</id>
    <published>2021-06-06T10:10:13.000Z</published>
    <updated>2023-10-16T08:04:08.520Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hdc下载"><a href="#hdc下载" class="headerlink" title="hdc下载"></a>hdc下载</h3><ul><li>如果下载了源码，可以在源码目录找到: developtools/hdc_standard/prebuilt/windows/hdc_std.exe</li><li>远程仓库地址： <a href="https://gitee.com/openharmony/developtools_hdc_standard" target="_blank" rel="noopener">https://gitee.com/openharmony/developtools_hdc_standard</a></li><li>hdc使用手册: <a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/device-dev/subsystems/hdc_std-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AF%BC.md" target="_blank" rel="noopener">https://gitee.com/openharmony/docs/blob/master/zh-cn/device-dev/subsystems/hdc_std-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AF%BC.md</a></li></ul><h3 id="通过usb连接鸿蒙"><a href="#通过usb连接鸿蒙" class="headerlink" title="通过usb连接鸿蒙"></a>通过usb连接鸿蒙</h3><ul><li>通过hi3516背面的type-c口连接电脑, 目前只有这口能传数据， 底下的口不行<ul><li>如果成功，可以在电脑 <code>设备管理-用串行总线设备</code>下面看到<code>HDC Device</code></li></ul></li><li>打开终端， 输入<code>hdc list targets</code>列出设备</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2021-06/mmc_2021-06-07_19-52-37.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2021-06/WindowsTerminal_2021-06-07_19-53-25.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="鸿蒙连接本地有线网络"><a href="#鸿蒙连接本地有线网络" class="headerlink" title="鸿蒙连接本地有线网络"></a>鸿蒙连接本地有线网络</h3><ul><li>插入有线网线</li><li>在hitool串口中连接上hi3516后执行<ul><li><code>/system/xbin/su</code> 获取root权限</li><li><code>ifconfig eth0 192.168.3.197 netmask 255.255.255.0</code> 网络IP要换成自己的网段</li></ul></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2021-06/HiTool_2021-06-06_18-29-05.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="用hdc通过tcp连接鸿蒙"><a href="#用hdc通过tcp连接鸿蒙" class="headerlink" title="用hdc通过tcp连接鸿蒙"></a>用hdc通过tcp连接鸿蒙</h3><ul><li>在连接hitool串口后执行<code>hdcd -t</code></li><li>在自己电脑主机上打开终端执行 <code>hdc tconn 192.168.3.197:10178</code> 显示 <code>Connect OK</code> 就表示连接上了<ul><li>执行<code>hdc list targets -v</code> 显示设备</li><li>执行<code>hdc -t 192.168.3.197:10178 shell</code> 连接鸿蒙系统的shell， 注： tcp连接时要用-t指定连接的ip:端口</li><li>执行<code>hdc -t 192.168.3.197:10178 file send localfile remotefile</code> 发送文件</li><li>其实命令请查看使用手册</li></ul></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2021-06/HiTool_2021-06-06_18-19-47.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2021-06/WindowsTerminal_2021-06-06_18-30-29.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;hdc下载&quot;&gt;&lt;a href=&quot;#hdc下载&quot; class=&quot;headerlink&quot; title=&quot;hdc下载&quot;&gt;&lt;/a&gt;hdc下载&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果下载了源码，可以在源码目录找到: developtools/hdc_standard/prebuil
      
    
    </summary>
    
      <category term="系统" scheme="http://ystyle.top/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="鸿蒙" scheme="http://ystyle.top/tags/%E9%B8%BF%E8%92%99/"/>
    
  </entry>
  
  <entry>
    <title>鸿蒙开发板HI3516用命令行连接wifi</title>
    <link href="http://ystyle.top/2020/12/18/hi3516-connect-wifi/"/>
    <id>http://ystyle.top/2020/12/18/hi3516-connect-wifi/</id>
    <published>2020-12-18T12:11:48.000Z</published>
    <updated>2020-12-18T12:11:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>鸿蒙的HI3516编译里已经有wpa_supplicant相关工程了，但编译时没有包进去, 所以只要修改配置文件后就能编译出来了</p></blockquote><p>主要修改文件: <a href="https://gitee.com/openharmony/applications_sample_camera/blob/master/communication/BUILD.gn#L17-18" target="_blank" rel="noopener">communication/BUILD.gn#L17-18</a> 行之间添加， 以下第2行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">features = [</span><br><span class="line">   &quot;wpa_supplicant:wpa_sample&quot;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -ti -e HARDWARE=ipcamera_hi3516dv300 -v $&#123;PWD&#125;/out:/OpenHarmony/out ystyle/open-harmony bash</span><br><span class="line">sed -i '17a\ \ \ \ \ \ "wpa_supplicant:wpa_sample",' applications/sample/camera/communication/BUILD.gn</span><br><span class="line">python build.py $&#123;HARDWARE&#125; -b debug</span><br></pre></td></tr></table></figure><blockquote><p>然后wpa_supplicant在编译目录<code>/out/ipcamera_hi3516dv300/bin/</code>， 把wpa_supplicant复制出来就可以直接使用</p></blockquote><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>先创建配置文件，wpa_supplicant.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">country=GB</span><br><span class="line">ctrl_interface=udp</span><br><span class="line">network=&#123;</span><br><span class="line">    #要连接的SSID</span><br><span class="line">    ssid=&quot;example&quot;</span><br><span class="line">    #如果不需要加密就写key_mgmt=NONE</span><br><span class="line">    #key_mgmt=NONE</span><br><span class="line">    #如果需要加密就写这行密码</span><br><span class="line">    psk=&quot;AA123456&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把wpa_supplicant和配置文件复制到hi3516， 执行以下命令连接wifi<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /nfs/wifi</span><br><span class="line">./wpa_supplicant -i wlan0 -c ./wpa_supplicant.conf</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;鸿蒙的HI3516编译里已经有wpa_supplicant相关工程了，但编译时没有包进去, 所以只要修改配置文件后就能编译出来了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主要修改文件: &lt;a href=&quot;https://gitee.com/ope
      
    
    </summary>
    
      <category term="系统" scheme="http://ystyle.top/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="鸿蒙" scheme="http://ystyle.top/tags/%E9%B8%BF%E8%92%99/"/>
    
      <category term="wifi" scheme="http://ystyle.top/tags/wifi/"/>
    
  </entry>
  
  <entry>
    <title>Quest2 使用Netch激活与无线串流的设置</title>
    <link href="http://ystyle.top/2020/12/05/quest2/"/>
    <id>http://ystyle.top/2020/12/05/quest2/</id>
    <published>2020-12-05T17:30:26.000Z</published>
    <updated>2021-11-05T11:30:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Quest2-激活与无线串流的设置"><a href="#Quest2-激活与无线串流的设置" class="headerlink" title="Quest2 激活与无线串流的设置"></a>Quest2 激活与无线串流的设置</h1><h3 id="更新后自带Airlink串流，不需要买virtual-desktop了"><a href="#更新后自带Airlink串流，不需要买virtual-desktop了" class="headerlink" title="更新后自带Airlink串流，不需要买virtual desktop了"></a>更新后自带Airlink串流，不需要买virtual desktop了</h3><h3 id="连网激活"><a href="#连网激活" class="headerlink" title="连网激活"></a>连网激活</h3><blockquote><p>需要可上网，与tcp、udp转发， 激活更新系统时需要udp转发才能正常更新系统, 本方法完美支持，只需要有支持wifi网卡的电脑</p></blockquote><ul><li><a href="https://github.com/NetchX/Netch" target="_blank" rel="noopener">Netch</a>： socket5、ss、vmess(v2ray) 转wifi<ul><li>安装<a href="https://aka.ms/dotnet/5.0/windowsdesktop-runtime-win-x64.exe" target="_blank" rel="noopener"><code>.NET Desktop runtime 5.0 x64</code></a>和<code>Visual C++ 运行库</code></li></ul></li><li>打开Netch, 添你的代理，然后选择<code>ByPass LAN and China</code>， 启动</li><li>在win10开启wifi移动热点</li><li>在网络适配器管理界面，把带tap的网卡，右键属性-切换到分享， 把第一个勾上，下拉选择wifi热点的网卡</li><li>在quest2连接热点，等一会后，联网界面下的确定按钮亮了之后，会进入系统更新</li><li>更新系统后，可以切回wifi+http代理方式玩(wifi连接输入密码，下边点高级，可以填入http代理)<br><img src="https://dll.ystyle.top/images/2020-12/Netch_2020-12-06_16-44-00.png" alt=""><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-12/explorer_2020-12-06_16-35-08.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-12/chrome_2020-12-06_20-40-12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul><h3 id="Airlink串流"><a href="#Airlink串流" class="headerlink" title="Airlink串流"></a>Airlink串流</h3><ul><li>电脑上安装或升级oculus home到最新版</li><li>登陆帐号后到<code>设置-公测版</code>打开<code>Airlink</code>设置</li><li>更新quest2系统到最新版</li><li>在实验室打开Airlink</li><li>之后在设置-快捷操作-Airlink搜索电脑，连接上后点启动， 就进入电脑版的操作台了。</li></ul><h3 id="开发者模式"><a href="#开发者模式" class="headerlink" title="开发者模式"></a>开发者模式</h3><ul><li><a href="https://dashboard.oculus.com" target="_blank" rel="noopener">注册开发者帐号</a>或进入别人的开发者团队</li><li><a href="https://developer.oculus.com/downloads/package/oculus-adb-drivers" target="_blank" rel="noopener">下载adb驱动</a>, 解压后右键【androidwinusb.inf】选择安装即可。</li><li>安装手机<a href="https://rawapk.com/oculus-apk-download/" target="_blank" rel="noopener">oculus app</a></li><li>用数据线连接quest2和电脑</li><li>在手机oculus app上连接quest2, 并在设置开启开发者模板</li><li>在电脑上安装sidequest， 可以下载一些第三方游戏。<br><img src="https://dll.ystyle.top/images/2020-12/BE9BEC5F78EDD4C97982C8353CFE1D13.jpg" alt=""><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-12/27EDA36DBCB42C960E77A19FB20F1557.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul><details><br><summary>展开查看 virtual desktop 串流</summary><br><br>### virtual desktop<br>  - 在quest2上购买<code>virtual desktop</code><br>    - <code>virtual desktop</code>必需买，sidequest上的只是个串流用的插件<br>  - 在电脑上安装<code>virtual desktop streamer</code>串流软件， <a href="https://www.vrdesktop.net/" target="_blank" rel="noopener">官方网站</a>直接免费下载<br>  - 用数据线连接电脑<br>  - 安装<a href="https://sidequestvr.com/setup-howto" target="_blank" rel="noopener">sidequest</a>, 用它给quest2安装串流插件<code>virtual desktop vr patch</code><br>  <img src="https://dll.ystyle.top/images/2020-12/SideQuest_2020-12-06_16-41-36.png" alt=""><br><br>### 购买virtual desktop<br>  - 注册paypal<br>  - 绑定支持银联的银行卡(我用的是邮政的储蓄卡，只有银联，没其它标识)<br>  - 在<code>oculus home</code>、<code>oculus网站</code>、或<code>手机oculus app</code>绑定paypal<br>  - 在上述软件中搜索<code>virtual desktop</code>点购买，如果出现执行查询出现错误就<code>更换代理节点</code>(我用美国节点的会出现这个)<br>    - 按汇率，卡里需要<code>137RMB</code><br>    - steam 里的<code>virtual desktop</code>不支持quest2<br><br>### 串流设置<br>  - 连接到与电脑同wifi（激活时用的热点也可以用的）<br>  - 打开电脑上的<code>virtual desktop streamer</code>，并在username填写自己的oculus帐户名<br>  - 在quest2上打开<code>virtual desktop</code>软件<br>  - 这时会显示一个巨大的电脑屏幕， 打开支持<code>steam vr</code>或<code>oculus home</code>的游戏，会自动串流到quest2里<br>    - 这时可以愉快的玩耍了<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-12/VirtualDesktop.Streamer_2020-12-06_16-38-19.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br></details><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://blog.csdn.net/kasaiki/article/details/109145902" target="_blank" rel="noopener">Oculus Quest / Quest2 如何设置 VirtualDesktop 实现无线串流【详细教程】_kasaiki的博客-CSDN博客</a></li><li><a href="http://vr42.com/t/187" target="_blank" rel="noopener">Oculus Quest 国内玩家无障碍使用指南 - VR42</a><ul><li>本文的Netch是此文中方案4的Sstap替代品，sstap已经多年不更新了</li></ul></li><li><a href="https://b23.tv/9rEP0A" target="_blank" rel="noopener">【干货】Oculus quest 2电脑连接串流教程｜有线+无线_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Quest2-激活与无线串流的设置&quot;&gt;&lt;a href=&quot;#Quest2-激活与无线串流的设置&quot; class=&quot;headerlink&quot; title=&quot;Quest2 激活与无线串流的设置&quot;&gt;&lt;/a&gt;Quest2 激活与无线串流的设置&lt;/h1&gt;&lt;h3 id=&quot;更新后自带
      
    
    </summary>
    
      <category term="软件" scheme="http://ystyle.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="quest2" scheme="http://ystyle.top/tags/quest2/"/>
    
      <category term="工具" scheme="http://ystyle.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>移植lua到鸿蒙 - 首个移植成功的编程语言</title>
    <link href="http://ystyle.top/2020/11/07/porting-Lua-to-openharmony/"/>
    <id>http://ystyle.top/2020/11/07/porting-Lua-to-openharmony/</id>
    <published>2020-11-07T15:52:26.000Z</published>
    <updated>2020-11-07T15:52:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="惯例先放hello-world"><a href="#惯例先放hello-world" class="headerlink" title="惯例先放hello world"></a>惯例先放hello world</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-11/WindowsTerminal_2020-11-07_23-28-08.png" alt="hello world" title="">                </div>                <div class="image-caption">hello world</div>            </figure><ul><li>本项目地址: <a href="https://gitee.com/ystyle/lua" target="_blank" rel="noopener">https://gitee.com/ystyle/lua</a></li><li><a href="https://gitee.com/ystyle/lua/releases/v5.4.2" target="_blank" rel="noopener">下载二进制文件</a></li></ul><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><ul><li>安装 docker</li><li>docker pull ystyle/open-harmony</li></ul><p>ps: 本文使用与鸿蒙系统一同编译的方法。 如果自己有本地环境，可以把lua项目放鸿蒙代码目录里(或者使用软接连)</p><h3 id="下载lua官方代码"><a href="#下载lua官方代码" class="headerlink" title="下载lua官方代码"></a>下载lua官方代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/code/ohos/</span><br><span class="line">cd ~/code/ohos/</span><br><span class="line">git clone https://github.com/lua/lua.git</span><br></pre></td></tr></table></figure><h3 id="编写BUILD-gn文件"><a href="#编写BUILD-gn文件" class="headerlink" title="编写BUILD.gn文件"></a>编写BUILD.gn文件</h3><blockquote><p>因为要与系统一起编译， 为了方便，直接用替换掉示例的方法，这样就只需要写一个BUILD.gn就好了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"># Copyright (c) 2020 YSTYLE(lxy5266@live.com)</span><br><span class="line"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line"># you may not use this file except in compliance with the License.</span><br><span class="line"># You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"># Unless required by applicable law or agreed to in writing, software</span><br><span class="line"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"># See the License for the specific language governing permissions and</span><br><span class="line"># limitations under the License.</span><br><span class="line"></span><br><span class="line">import(&quot;//build/lite/config/component/lite_component.gni&quot;)</span><br><span class="line">import(&quot;//build/lite/ndk/ndk.gni&quot;)</span><br><span class="line"></span><br><span class="line">static_library(&quot;hello_world&quot;) &#123;</span><br><span class="line">    sources = [</span><br><span class="line">        &quot;lapi.c&quot;,</span><br><span class="line">        &quot;lauxlib.c&quot;,</span><br><span class="line">        &quot;lbaselib.c&quot;,</span><br><span class="line">        &quot;lcode.c&quot;,</span><br><span class="line">        &quot;lcorolib.c&quot;,</span><br><span class="line">        &quot;lctype.c&quot;,</span><br><span class="line">        &quot;ldblib.c&quot;,</span><br><span class="line">        &quot;ldebug.c&quot;,</span><br><span class="line">        &quot;ldo.c&quot;,</span><br><span class="line">        &quot;ldump.c&quot;,</span><br><span class="line">        &quot;lfunc.c&quot;,</span><br><span class="line">        &quot;lgc.c&quot;,</span><br><span class="line">        &quot;linit.c&quot;,</span><br><span class="line">        &quot;liolib.c&quot;,</span><br><span class="line">        &quot;llex.c&quot;,</span><br><span class="line">        &quot;lmathlib.c&quot;,</span><br><span class="line">        &quot;lmem.c&quot;,</span><br><span class="line">        &quot;loadlib.c&quot;,</span><br><span class="line">        &quot;lobject.c&quot;,</span><br><span class="line">        &quot;lopcodes.c&quot;,</span><br><span class="line">        &quot;loslib.c&quot;,</span><br><span class="line">        &quot;lparser.c&quot;,</span><br><span class="line">        &quot;lstate.c&quot;,</span><br><span class="line">        &quot;lstring.c&quot;,</span><br><span class="line">        &quot;lstrlib.c&quot;,</span><br><span class="line">        &quot;ltable.c&quot;,</span><br><span class="line">        &quot;ltablib.c&quot;,</span><br><span class="line">        &quot;ltests.c&quot;,</span><br><span class="line">        &quot;ltm.c&quot;,</span><br><span class="line">        &quot;lua.c&quot;,</span><br><span class="line">        &quot;lundump.c&quot;,</span><br><span class="line">        &quot;lutf8lib.c&quot;,</span><br><span class="line">        &quot;lvm.c&quot;,</span><br><span class="line">        &quot;lzio.c&quot;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    include_dirs = [</span><br><span class="line">        &quot;include&quot;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lite_component(&quot;camera_app&quot;) &#123;</span><br><span class="line">    target_type = &quot;executable&quot;</span><br><span class="line"></span><br><span class="line">    features = [</span><br><span class="line">        &quot;:hello_world&quot;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ndk_lib(&quot;app_sample&quot;) &#123;</span><br><span class="line">    deps = [</span><br><span class="line">        &quot;:hello_world&quot;</span><br><span class="line">    ]</span><br><span class="line">    head_files = [</span><br><span class="line">        &quot;include&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>static_library里的source参照lua/makefile</p></blockquote><h3 id="编译脚本"><a href="#编译脚本" class="headerlink" title="编译脚本"></a>编译脚本</h3><p>创建编译脚本<code>build-ohos.sh</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/code/ohos/lua</span><br><span class="line">touch build-ohos.sh</span><br><span class="line">chmod +x build-ohos.sh</span><br></pre></td></tr></table></figure><p>文件内容如下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">set -e</span><br><span class="line">rm -rf ./out ./bin</span><br><span class="line">docker run --rm -ti \</span><br><span class="line">  -e HARDWARE=ipcamera_hi3516dv300 \</span><br><span class="line">  -v $&#123;PWD&#125;/out:/OpenHarmony/out \</span><br><span class="line">  -v $&#123;PWD&#125;:/OpenHarmony/applications/sample/camera/app \</span><br><span class="line">  ystyle/open-harmony</span><br><span class="line">mkdir -p ./bin</span><br><span class="line">cp ./out/ipcamera_hi3516dv300/bin/camera_app ./bin/lua</span><br><span class="line">tar -zcf lua-5.4.2-ohos.tar.gz ./bin</span><br><span class="line">echo 'build success!'</span><br></pre></td></tr></table></figure></p><p>与鸿蒙一起编译，这里使用我之前的<a href="https://ystyle.top/2020/09/10/compile-openharmony-indokcer/">docker镜像</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/code/ohos/lua</span><br><span class="line">./build-ohos.sh</span><br><span class="line"><span class="meta">#</span> 看到 ohos ipcamera_hi3516dv300 build success! build success! 就编译成功了。</span><br></pre></td></tr></table></figure></p><blockquote><p>编译后软件在鸿蒙的 ./out/ipcamera_hi3516dv300/bin/camera_app<br>脚本会把lua单独打包出来<br>单独的lua可执行文件在bin目录 </p></blockquote><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-11/WindowsTerminal_2020-11-07_23-46-45.png" alt="io操作" title="">                </div>                <div class="image-caption">io操作</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-11/WindowsTerminal_2020-11-07_23-48-58.png" alt="官方测试用例1" title="">                </div>                <div class="image-caption">官方测试用例1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-11/WindowsTerminal_2020-11-07_23-50-10.png" alt="官方测试用例2" title="">                </div>                <div class="image-caption">官方测试用例2</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-11/WindowsTerminal_2020-11-07_23-51-01.png" alt="官方测试用例3" title="">                </div>                <div class="image-caption">官方测试用例3</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;惯例先放hello-world&quot;&gt;&lt;a href=&quot;#惯例先放hello-world&quot; class=&quot;headerlink&quot; title=&quot;惯例先放hello world&quot;&gt;&lt;/a&gt;惯例先放hello world&lt;/h3&gt;&lt;figure class=&quot;image-
      
    
    </summary>
    
      <category term="软件" scheme="http://ystyle.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="鸿蒙" scheme="http://ystyle.top/tags/%E9%B8%BF%E8%92%99/"/>
    
      <category term="编程语言" scheme="http://ystyle.top/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="lua" scheme="http://ystyle.top/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>harl-鸿蒙应用开发实机热更新工具</title>
    <link href="http://ystyle.top/2020/10/24/harl/"/>
    <id>http://ystyle.top/2020/10/24/harl/</id>
    <published>2020-10-24T17:30:26.000Z</published>
    <updated>2020-10-24T17:30:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://gitee.com/ystyle/harl/" target="_blank" rel="noopener">鸿蒙应用开发实机热更新工具</a></p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ul><li>debug 版本的hi3516镜像(release版本不支持shell)</li><li>nfs v3<ul><li><a href="https://openharmony.gitee.com/openharmony/docs/blob/master/kernel/NFS.md" target="_blank" rel="noopener">配置过程</a></li><li><a href="https://openharmony.gitee.com/openharmony/docs/issues/I1YIBO" target="_blank" rel="noopener">配置过程可能遇到的问题</a></li></ul></li><li>serial(串口)</li><li>dev tools (可以从鸿蒙编译目录<code>/out/ipcamera_hi3516dv300/dev_tools/bin</code>复制到nfs挂载目录)<ul><li>aa (管理APP启动，关闭)</li><li>bm (安装卸载APP)</li></ul></li></ul><h3 id="USAGE"><a href="#USAGE" class="headerlink" title="USAGE"></a>USAGE</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">➜ harl.exe</span><br><span class="line">NAME:</span><br><span class="line">   harl - Open Harmony OS Dev tools</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   harl.exe [global options] command [command options] [arguments...]</span><br><span class="line"></span><br><span class="line">VERSION:</span><br><span class="line">   v0.1.2</span><br><span class="line"></span><br><span class="line">COMMANDS:</span><br><span class="line">   init, i    init .harm.yml</span><br><span class="line">   watch, w   watch and reload app</span><br><span class="line">   install    install hap</span><br><span class="line">   uninstall  uninstall hap</span><br><span class="line">   shell      open a shell</span><br><span class="line">   reboot     reboot</span><br><span class="line">   help, h    Shows a list of commands or help for one command</span><br><span class="line"></span><br><span class="line">GLOBAL OPTIONS:</span><br><span class="line">   --help, -h     show help (default: false)</span><br><span class="line">   --version, -v  print the version (default: false)</span><br></pre></td></tr></table></figure><ul><li><a href="https://gitee.com/ystyle/harl/releases" target="_blank" rel="noopener">下载应用</a></li><li><code>cd /your-project-dir</code> 切换到项目目录</li><li><code>harl init</code> 初始化配置文件</li><li><code>harl w</code> 监听项目文件修改<ul><li>监听时支持输入命令, 若看不到提示符请在调试日志暂停打印时按回车</li><li>可以用<code>^run [command name]</code>的方式执行command里定义的脚本<ul><li>如执行示例配置文件的setup脚本， <code>^run setup</code></li></ul></li></ul></li><li>目前命令只支持在项目目录执行</li></ul><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><blockquote><p>.harl.yaml<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch:</span> <span class="comment"># 监听文件修改并自动编译、安装的参数</span></span><br><span class="line"><span class="attr">  excludes:</span> <span class="comment"># 排除的文件</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">.gradle</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">.idea</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">gradle</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">entry/build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">entry/node_modules</span></span><br><span class="line"><span class="attr">  includes:</span> <span class="comment"># 监听的文件类型</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">.css</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">.hml</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">.js</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">.hap</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">.json</span></span><br><span class="line"><span class="attr">  delay:</span> <span class="number">100</span> <span class="comment"># 监听频率，单位ms</span></span><br><span class="line"><span class="attr">nfs:</span> <span class="comment"># nfs 配置</span></span><br><span class="line"><span class="attr">  ldir:</span> <span class="attr">H:/bin</span> <span class="comment"># 本地nfs挂载目录 </span></span><br><span class="line"><span class="attr">  rdir:</span> <span class="string">/nfs</span> <span class="comment"># 远程nfs(开发板)挂载目录</span></span><br><span class="line"><span class="attr">shell:</span> <span class="comment"># 开发板连接参数</span></span><br><span class="line"><span class="attr">  com:</span> <span class="string">COM5</span> <span class="comment"># 串口号</span></span><br><span class="line"><span class="attr">command:</span> <span class="comment"># 定义常用命令, 在shell或watch里可执行</span></span><br><span class="line"><span class="attr">  setup:</span> <span class="comment"># 命令执行方式: ^run setup</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">dhclient</span> <span class="string">eth0</span> <span class="comment"># 命令一行一个, 顺序执行错误不会中断</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">mkdir</span> <span class="string">/nfs</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">mount</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.12</span><span class="string">:/nfsshare</span> <span class="string">/nfs</span> <span class="string">nfs</span></span><br><span class="line"><span class="attr">  kill:</span> <span class="comment"># 关闭应用</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cd</span> <span class="string">/nfs</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">./aa</span> <span class="string">terminate</span> <span class="bullet">-p</span> <span class="string">top.ystyle.ohos.js.testapp</span></span><br><span class="line"><span class="attr">  start:</span> <span class="comment"># 启动应用</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cd</span> <span class="string">/nfs</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">./aa</span> <span class="string">start</span> <span class="bullet">-p</span> <span class="string">top.ystyle.ohos.js.testapp</span> <span class="bullet">-n</span> <span class="string">default</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="支持情况"><a href="#支持情况" class="headerlink" title="支持情况"></a>支持情况</h3><ul><li>只支持windows</li><li>只测试过liteWearable项目改的smartVision</li><li>只在hi3516d上测试过</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://gitee.com/ystyle/harl/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;鸿蒙应用开发实机热更新工具&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;依赖&quot;&gt;&lt;a href=&quot;#依赖&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="软件" scheme="http://ystyle.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="工具" scheme="http://ystyle.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="鸿蒙" scheme="http://ystyle.top/tags/%E9%B8%BF%E8%92%99/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker快速上手鸿蒙</title>
    <link href="http://ystyle.top/2020/09/10/compile-openharmony-indokcer/"/>
    <id>http://ystyle.top/2020/09/10/compile-openharmony-indokcer/</id>
    <published>2020-09-10T17:00:26.000Z</published>
    <updated>2020-12-25T08:40:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>在机器上安装好Docker</li></ul><h3 id="编译鸿蒙系统镜像"><a href="#编译鸿蒙系统镜像" class="headerlink" title="编译鸿蒙系统镜像"></a>编译鸿蒙系统镜像</h3><ul><li>打开终端执行以下命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/OpenHarmony</span><br><span class="line">cd ~/OpenHarmony</span><br><span class="line">docker run --rm -ti -v $&#123;PWD&#125;/out:/OpenHarmony/out ystyle/open-harmony</span><br></pre></td></tr></table></figure><ul><li>编译成功后各镜像在out目录下面, 默认编译的是<code>Hi3861</code>开发板的系统镜像, 可自行烧录到固定测试</li><li>如果要编译其它板子可以设置dokcer镜像的环境变量<code>HARDWARE</code> 目前支持: <code>wifiiot</code>、<code>ipcamera_hi3516dv300</code>、<code>ipcamera_hi3518ev300</code></li></ul><h3 id="更新代码并编译"><a href="#更新代码并编译" class="headerlink" title="更新代码并编译"></a>更新代码并编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/OpenHarmony</span><br><span class="line">cd ~/OpenHarmony</span><br><span class="line">docker run --rm -ti -e HARDWARE=ipcamera_hi3516dv300 -v $&#123;PWD&#125;/out:/OpenHarmony/out ystyle/open-harmony bash</span><br><span class="line">repo sync -c</span><br><span class="line">python build.py $&#123;HARDWARE&#125; -b debug</span><br></pre></td></tr></table></figure><h3 id="编写应用程序"><a href="#编写应用程序" class="headerlink" title="编写应用程序"></a>编写应用程序</h3><ul><li>示例在这<a href="https://openharmony.gitee.com/openharmony/docs/blob/master/quick-start/Hi3861%E5%BC%80%E5%8F%91%E6%9D%BF%E7%AC%AC%E4%BA%8C%E4%B8%AA%E7%A4%BA%E4%BE%8B%E7%A8%8B%E5%BA%8F.md" target="_blank" rel="noopener">Hi3861开发板第二个示例程序</a></li><li>创建一个代码目录: <code>my_first_app</code></li><li><p>新建文件<code>hello_world.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ohos_init.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ohos_types.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HelloWorld</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[DEMO] Hello world.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">SYS_RUN(HelloWorld);</span><br></pre></td></tr></table></figure></li><li><p>新建文件<code>BUILD.gn</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static_library(<span class="string">"myapp"</span>) &#123;</span><br><span class="line">  sources = [</span><br><span class="line">      <span class="string">"hello_world.c"</span></span><br><span class="line">  ]</span><br><span class="line">  include_dirs = [</span><br><span class="line">      <span class="string">"//utils/native/liteos/include"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建文件<code>APP_BUILD.gn</code></p></li><li><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">"//build/lite/config/component/lite_component.gni"</span>)</span><br><span class="line"></span><br><span class="line">lite_component(<span class="string">"app"</span>) &#123;</span><br><span class="line">    features = [</span><br><span class="line">        <span class="string">"my_first_app:myapp"</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>现在的目录结构为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── APP_BUILD.gn</span><br><span class="line">├── BUILD.gn</span><br><span class="line">└── hello_world.c</span><br></pre></td></tr></table></figure></li></ul><h3 id="编译代码"><a href="#编译代码" class="headerlink" title="编译代码"></a>编译代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">  -e HARDWARE=wifiiot \</span><br><span class="line">  -v $&#123;PWD&#125;/out:/OpenHarmony/out \</span><br><span class="line">  -v $&#123;PWD&#125;/APP_BUILD.gn:/OpenHarmony/applications/sample/wifi-iot/app/APP_BUILD.gn \</span><br><span class="line">  -v $&#123;PWD&#125;:/OpenHarmony/applications/sample/wifi-iot/app/my_first_app \</span><br><span class="line">  ystyle/open-harmony</span><br></pre></td></tr></table></figure><blockquote><p>编译后的文件在out目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── APP_BUILD.gn</span><br><span class="line">├── BUILD.gn</span><br><span class="line">├── hello_world.c</span><br><span class="line">└── out</span><br><span class="line">    └── wifiiot</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="其它问题"><a href="#其它问题" class="headerlink" title="其它问题"></a>其它问题</h3><ul><li>如果实际开发，建议直接替换掉 整个<code>/OpenHarmony/applications/sample/wifi-iot/app/</code> 目录, 目录里边的都是示例代码.</li><li>如果要修改启动编译的命令的话，可以写好shell 脚本， run时指定cmd命令<ul><li>构建命令为: <code>python build.py ${HARDWARE} -b debug</code></li><li><code>docker run --rm -v ${PWD}/mybuild.sh:/OpenHarmony/mybuild.sh ystyle/open-harmony /OpenHarmony/mybuild.sh</code></li></ul></li><li>更新鸿蒙代码: 用修改镜像启动命令的方法，在<code>/OpenHarmony</code>目录执行<code>repo sync -c</code> 命令</li><li>其它驱动开发或系统组件开发也可以用挂载的方式把工程目录映射到容器，开发并编译</li></ul><h3 id="本文所使用Docker镜像的dockerfile文件"><a href="#本文所使用Docker镜像的dockerfile文件" class="headerlink" title="本文所使用Docker镜像的dockerfile文件"></a>本文所使用Docker镜像的dockerfile文件</h3><blockquote><p>参考<code>@keithyau</code><a href="https://openharmony.gitee.com/keithyau/build_lite/blob/master/Dockerfile20.04" target="_blank" rel="noopener">所写的Dockerfile</a>修改而来</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">20.04</span> AS build-<span class="keyword">env</span></span><br><span class="line"><span class="keyword">LABEL</span> version=2020-10-15</span><br><span class="line"></span><br><span class="line"># Set your hardware</span><br><span class="line">ENV HARDWARE=wifiiot</span><br><span class="line"># Prevent interactive</span><br><span class="line">ENV DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line"># Setting up the build environment</span><br><span class="line">RUN sed -i 's/archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    sed -i 's/security.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get clean -y &amp;&amp; \</span><br><span class="line">    apt-get -y update &amp;&amp; \</span><br><span class="line">    apt-get remove python* -y &amp;&amp; \</span><br><span class="line">    apt-get install git curl build-essential libdbus-glib-1-dev libgirepository1.0-dev -y &amp;&amp; \</span><br><span class="line">    apt-get install zip libncurses5-dev pkg-config -y &amp;&amp; \</span><br><span class="line">    apt-get install python3-pip -y &amp;&amp; \</span><br><span class="line">    apt-get install scons dosfstools mtools mtd-utils default-jdk default-jre -y &amp;&amp; \</span><br><span class="line">    rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line"># Setup python</span><br><span class="line"># Make sure python install on the right python version path</span><br><span class="line">RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1 &amp;&amp; \</span><br><span class="line">    pip3 install --upgrade pip -i https://mirrors.aliyun.com/pypi/simple &amp;&amp; \</span><br><span class="line">    pip3 install ninja kconfiglib pycryptodome ecdsa -i https://mirrors.aliyun.com/pypi/simple &amp;&amp; \</span><br><span class="line">    pip3 install six --upgrade --ignore-installed six -i https://pypi.tuna.tsinghua.edu.cn/simple &amp;&amp; \</span><br><span class="line">    rm -rf /var/cache/apt/archives</span><br><span class="line"></span><br><span class="line">#Fix Dash</span><br><span class="line">RUN rm -rf /bin/sh &amp;&amp; \</span><br><span class="line">    ln -s /bin/bash /bin/sh</span><br><span class="line"></span><br><span class="line">#Setup gn</span><br><span class="line">ENV PATH /tools/gn:$PATH</span><br><span class="line">RUN mkdir /tools &amp;&amp; \</span><br><span class="line">    cd /tools &amp;&amp; \</span><br><span class="line">    curl -LO https://repo.huaweicloud.com/harmonyos/compiler/gn/1523/linux/gn.1523.tar &amp;&amp; \</span><br><span class="line">    tar xvf /tools/gn.1523.tar &amp;&amp; \</span><br><span class="line">    rm -rf /tools/gn.1523.tar</span><br><span class="line"></span><br><span class="line">#Setup LLVM</span><br><span class="line">#ADD ./llvm-linux-9.0.0-34042.tar /tools</span><br><span class="line">ENV PATH /tools/llvm/bin:$PATH</span><br><span class="line">RUN cd /tools &amp;&amp; \</span><br><span class="line">    curl -LO https://repo.huaweicloud.com/harmonyos/compiler/clang/9.0.0-34042/linux/llvm-linux-9.0.0-34042.tar &amp;&amp; \</span><br><span class="line">    tar xvf /tools/llvm-linux-9.0.0-34042.tar &amp;&amp; \</span><br><span class="line">    rm -rf /tools/llvm-linux-9.0.0-34042.tar</span><br><span class="line"></span><br><span class="line">#Setup hc-gen</span><br><span class="line">ENV PATH /tools/hc-gen:$PATH</span><br><span class="line">RUN cd /tools &amp;&amp; \</span><br><span class="line">    curl -LO https://repo.huaweicloud.com/harmonyos/compiler/hc-gen/0.65/linux/hc-gen-0.65-linux.tar &amp;&amp; \</span><br><span class="line">    tar xvf /tools/hc-gen-0.65-linux.tar &amp;&amp; \</span><br><span class="line">    rm -rf /tools/hc-gen-0.65-linux.tar</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">#Setup hmos_app_packing_tool and hapsigntool // 必需是这目录，编译脚本写死了</span><br><span class="line">ENV PATH /root/developtools/:$PATH</span><br><span class="line">RUN mkdir /root/developtools/ &amp;&amp; cd /root/developtools/ &amp;&amp; \</span><br><span class="line">    curl -LO https://repo.huaweicloud.com/harmonyos/develop_tools/hmos_app_packing_tool.jar &amp;&amp; \</span><br><span class="line">    curl -LO https://repo.huaweicloud.com/harmonyos/develop_tools/hapsigntoolv2.jar</span><br><span class="line"></span><br><span class="line">#Setup gcc_riscv32</span><br><span class="line">ENV PATH /tools/gcc_riscv32/bin:$PATH</span><br><span class="line">RUN cd /tools &amp;&amp; \</span><br><span class="line">    curl -LO http://tools.harmonyos.com/mirrors/gcc_riscv32/7.3.0/linux/gcc_riscv32-linux-7.3.0.tar.gz &amp;&amp; \</span><br><span class="line">    tar xvf /tools/gcc_riscv32-linux-7.3.0.tar.gz &amp;&amp; \</span><br><span class="line">    rm -rf /tools/gcc_riscv32-linux-7.3.0.tar.gz</span><br><span class="line"></span><br><span class="line">#Create work dir</span><br><span class="line">RUN mkdir /OpenHarmony</span><br><span class="line">WORKDIR /OpenHarmony</span><br><span class="line"></span><br><span class="line"># Gitee Repo tool and download</span><br><span class="line"># Make sure requests install at the right location</span><br><span class="line">RUN curl https://gitee.com/oschina/repo/raw/fork_flow/repo-py3 &gt; /usr/bin/repo &amp;&amp; \</span><br><span class="line">    chmod a+x /usr/bin/repo &amp;&amp; \</span><br><span class="line">    pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple requests</span><br><span class="line"></span><br><span class="line">#Download source, update to your info</span><br><span class="line">RUN git config --global user.email "lxy5266@live.com" &amp;&amp; \</span><br><span class="line">    git config --global user.name "ystyle" &amp;&amp; \</span><br><span class="line">    git config --global color.ui false &amp;&amp; \</span><br><span class="line">    git config --global credential.helper store &amp;&amp; \</span><br><span class="line">    repo init -u https://gitee.com/openharmony/manifest.git -b master --repo-branch=stable --no-repo-verify &amp;&amp; \</span><br><span class="line">    repo sync -c</span><br><span class="line"></span><br><span class="line"># compile</span><br><span class="line">ENV LANGUAGE en</span><br><span class="line">ENV LANG en_US.utf-8</span><br><span class="line">RUN export|grep LANG</span><br><span class="line">CMD ["/bin/bash", "-c", "python build.py $&#123;HARDWARE&#125; -b debug"]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在机器上安装好Docker&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;编译鸿蒙系统镜像&quot;&gt;&lt;a href=&quot;#编译鸿蒙系统镜像&quot; c
      
    
    </summary>
    
      <category term="系统" scheme="http://ystyle.top/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="docker" scheme="http://ystyle.top/tags/docker/"/>
    
      <category term="鸿蒙" scheme="http://ystyle.top/tags/%E9%B8%BF%E8%92%99/"/>
    
  </entry>
  
  <entry>
    <title>转换在线漫画为mobi格式</title>
    <link href="http://ystyle.top/2020/09/04/comic-cli/"/>
    <id>http://ystyle.top/2020/09/04/comic-cli/</id>
    <published>2020-09-04T04:46:26.000Z</published>
    <updated>2020-09-04T04:46:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转换在线漫画为mobi格式的工具</p></blockquote><h3 id="支持的网站"><a href="#支持的网站" class="headerlink" title="支持的网站"></a>支持的网站</h3><ul><li>动漫之家</li><li>喵同人</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul><li>必需安装<code>谷歌浏览器chrome</code></li><li>下载<a href="https://pan.baidu.com/s/1EPkLJ7WIJYdYtRHBEMqw0w" target="_blank" rel="noopener">comic-cli: https://pan.baidu.com/s/1EPkLJ7WIJYdYtRHBEMqw0w</a>, 提取码:h4np</li><li><p>新建一个文件文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 注释:  以#号或//开头的行会被忽略，空行也会被忽略</span><br><span class="line">// 本文件会生成三个漫画文件</span><br><span class="line"></span><br><span class="line">// 下载整个动漫，直接写列表地址</span><br><span class="line">https://www.dmzj.com/info/wodenvpengyouyoudianqiguaidanshihenkeai.html</span><br><span class="line"></span><br><span class="line">// 也可以载指定的章节，填写需要下载的章节地址，同一漫画的章节会合并成同一个文件</span><br><span class="line">https://www.dmzj.com/view/benghuai3rd/102129.html#@page=1</span><br><span class="line">https://www.dmzj.com/view/benghuai3rd/101570.html</span><br><span class="line">// 这行地址的章节会被忽略</span><br><span class="line"># https://www.dmzj.com/view/benghuai3rd/101013.html</span><br><span class="line"></span><br><span class="line">// 喵同人网站的写列表地址就好了</span><br><span class="line">https://zh.nyahentai.site/g/326699/</span><br></pre></td></tr></table></figure></li><li><p>然后把文件拖到comic-cli里边就会自动把漫画转为mobi格式</p></li><li>如果没有生成则把<code>kindlegen.exe</code>放到<code>c:/windows</code>里再试试</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-09/WindowsTerminal_2020-09-05_12-04-06.png" alt="图文教程" title="">                </div>                <div class="image-caption">图文教程</div>            </figure><h3 id="目前存在的问题"><a href="#目前存在的问题" class="headerlink" title="目前存在的问题"></a>目前存在的问题</h3><ul><li>转换工程文件到mobi格式时，可能失败，kindlegen没输出原因和错误内容，目前无法解决， 只能多次重试了。</li></ul><h3 id="其它工具"><a href="#其它工具" class="headerlink" title="其它工具"></a>其它工具</h3><ul><li><a href="https://ystyle.top/2019/12/31/txt-converto-epub-and-mobi/">txt文件转epub和mobi的工具TmdTextEpub和kaf</a></li><li>喵同人在线转换为mobi格式<a href="https://hcc.ystyle.top/" target="_blank" rel="noopener">hcc</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转换在线漫画为mobi格式的工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;支持的网站&quot;&gt;&lt;a href=&quot;#支持的网站&quot; class=&quot;headerlink&quot; title=&quot;支持的网站&quot;&gt;&lt;/a&gt;支持的网站&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;动
      
    
    </summary>
    
      <category term="软件" scheme="http://ystyle.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="kindle" scheme="http://ystyle.top/tags/kindle/"/>
    
      <category term="mobi" scheme="http://ystyle.top/tags/mobi/"/>
    
      <category term="漫画" scheme="http://ystyle.top/tags/%E6%BC%AB%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Linux kde文件管理器连接华为Share</title>
    <link href="http://ystyle.top/2020/09/03/kde-dolphin-smb/"/>
    <id>http://ystyle.top/2020/09/03/kde-dolphin-smb/</id>
    <published>2020-09-03T02:46:26.000Z</published>
    <updated>2020-09-03T02:46:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="华为手机设置"><a href="#华为手机设置" class="headerlink" title="华为手机设置"></a>华为手机设置</h3><ul><li>打开华为Share</li><li>长按华为Share图标进入华为分享</li><li>打开共享至电脑选项</li></ul><h3 id="Linux-设置"><a href="#Linux-设置" class="headerlink" title="Linux 设置"></a>Linux 设置</h3><ul><li><p>检查文件夹没有就创建一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.smb</span><br><span class="line">vim ~/.smb/smb.conf</span><br></pre></td></tr></table></figure></li><li><p>然后在文件填写</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line">client min protocol = NT1</span><br></pre></td></tr></table></figure></li><li><p>打开Dolphin</p></li><li>选择网络在文件管理地址栏填写手机ip: <code>smb://192.168.3.129</code>  回车</li><li>在弹窗填写用户名和密码</li><li>右键添加到标签(下次直接在标签点击就能访问了)</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-09/2020-09-03_14-33.png" alt="访问华为Share" title="">                </div>                <div class="image-caption">访问华为Share</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-09/2020-09-03_14-31.png" alt="修改标签名称" title="">                </div>                <div class="image-caption">修改标签名称</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;华为手机设置&quot;&gt;&lt;a href=&quot;#华为手机设置&quot; class=&quot;headerlink&quot; title=&quot;华为手机设置&quot;&gt;&lt;/a&gt;华为手机设置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;打开华为Share&lt;/li&gt;
&lt;li&gt;长按华为Share图标进入华为分享&lt;/li&gt;
&lt;li&gt;打开
      
    
    </summary>
    
      <category term="软件" scheme="http://ystyle.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="linux" scheme="http://ystyle.top/tags/linux/"/>
    
      <category term="kde" scheme="http://ystyle.top/tags/kde/"/>
    
      <category term="华为Share" scheme="http://ystyle.top/tags/%E5%8D%8E%E4%B8%BAShare/"/>
    
      <category term="Samba" scheme="http://ystyle.top/tags/Samba/"/>
    
  </entry>
  
  <entry>
    <title>Dokcer编译方舟引擎（MapleEngine）</title>
    <link href="http://ystyle.top/2020/07/21/dokcer-compile-maple-engine/"/>
    <id>http://ystyle.top/2020/07/21/dokcer-compile-maple-engine/</id>
    <published>2020-07-21T02:46:26.000Z</published>
    <updated>2020-08-06T07:08:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><ul><li><a href="https://gitee.com/harmonyos/OpenArkCompiler/issues/I1OHE5" target="_blank" rel="noopener">方舟引擎发布公告</a></li><li><a href="https://gitee.com/openarkcompiler-incubator/maple_engine" target="_blank" rel="noopener">官方文档 - 方舟引擎编译说明</a></li><li><a href="https://gitee.com/openarkcompiler-incubator/maple_engine/blob/master/maple_build/doc/build_OpenJDK8.md" target="_blank" rel="noopener">官方文档 - 构建Java 核心库</a></li></ul><h3 id="Docker-文件"><a href="#Docker-文件" class="headerlink" title="Docker 文件"></a>Docker 文件</h3><blockquote><p>复制到方舟引擎代码根目录, 文件名为Dockerfile</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> https://www.openarkcompiler.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setting up the build environment</span></span><br><span class="line"><span class="keyword">RUN</span> sed -i 's/archive.ubuntu.com/mirrors.163.com/g' /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get -y update &amp;&amp; \</span><br><span class="line">    apt install --no-install-recommends -y build-essential git wget clang cmake libffi-dev libelf-dev libunwind-dev \</span><br><span class="line">        libssl-dev openjdk-8-jdk-headless unzip python-minimal python3 curl &amp;&amp; \</span><br><span class="line">    rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line"># 在国内请反注释下行, 因为容器也是个单独的系统，所以别用127.0.0.1</span><br><span class="line">#ENV http_proxy=http://192.168.3.81:1081 \ </span><br><span class="line">#    https_proxy=http://192.168.3.81:1081</span><br><span class="line"></span><br><span class="line"># copy source</span><br><span class="line">COPY . /maple_engine</span><br><span class="line">WORKDIR /maple_engine</span><br><span class="line"></span><br><span class="line"># custom java/lang/Object.java</span><br><span class="line">RUN cd /maple_engine/maple_build/jar/ &amp;&amp; \</span><br><span class="line">    bash -c "cp /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/&#123;rt.jar,jce.jar,jsse.jar,charsets.jar&#125; . " &amp;&amp; \</span><br><span class="line">    mkdir -p java/lang/ &amp;&amp; \</span><br><span class="line">    curl -L http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/raw-file/jdk8u265-b01/src/share/classes/java/lang/Object.java &gt; java/lang/Object.java &amp;&amp; \</span><br><span class="line">    sed -i '/public class Object &#123;/a\long reserved_1; int reserved_2;' java/lang/Object.java &amp;&amp; \</span><br><span class="line">    javac -target 1.8 -g java/lang/Object.java &amp;&amp; \</span><br><span class="line">    jar uf rt.jar java/lang/Object.class &amp;&amp; \</span><br><span class="line">    rm -rf java</span><br><span class="line"></span><br><span class="line"># compile</span><br><span class="line">RUN bash -c "source ./envsetup.sh &amp;&amp; ./maple_build/tools/build-maple.sh &amp;&amp; ./maple_build/tools/build-libcore.sh &amp;&amp; rm -rf /maple_engine/maple_build/out/*"</span><br></pre></td></tr></table></figure><h3 id="编译方舟引擎"><a href="#编译方舟引擎" class="headerlink" title="编译方舟引擎"></a>编译方舟引擎</h3><blockquote><p>方舟编译器，也会一起编译，注意： 编译libjava时会占用25G左右的内存，不足25G建议添加swap分区</p></blockquote><blockquote><p>本人机器是16G内存，20G的SSD swap分区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t ystyle/maple-engine .</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-07/44F09FD9B6FF040264D4D5D02EBD079E.jpg" alt="编译占用" title="">                </div>                <div class="image-caption">编译占用</div>            </figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><blockquote><p><a href="https://hub.docker.com/r/ystyle/maple-engine" target="_blank" rel="noopener">镜像</a>已经推送到<a href="https://hub.docker.com/r/ystyle/maple-engine" target="_blank" rel="noopener">docker hub</a>, 可以直接使用下面的镜像编译hello world或其它软件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -ti ystyle/maple-engine bash</span><br><span class="line"># 设置基础环境</span><br><span class="line">source ./envsetup.sh</span><br><span class="line"># 编译java hello world</span><br><span class="line">cd ./maple_build/examples/HelloWorld</span><br><span class="line">$MAPLE_BUILD_TOOLS/java2asm.sh HelloWorld.java</span><br><span class="line"># 生成把.s文件编译为.so</span><br><span class="line">$MAPLE_BUILD_TOOLS/asm2so.sh HelloWorld.s</span><br><span class="line"># 运行软件</span><br><span class="line">$MAPLE_BUILD_TOOLS/run-app.sh -classpath ./HelloWorld.so HelloWorld</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-07/2020-07-22_10-35.png" alt="编译执行结果" title="">                </div>                <div class="image-caption">编译执行结果</div>            </figure><h3 id="调试应用程序"><a href="#调试应用程序" class="headerlink" title="调试应用程序"></a>调试应用程序</h3><ul><li><a href="https://gitee.com/openarkcompiler-incubator/maple_engine/wikis/%E6%96%B9%E8%88%9F%E5%A4%9A%E8%AF%AD%E8%A8%80%E8%B0%83%E8%AF%95%E5%99%A8?sort_id=2711073" target="_blank" rel="noopener">方舟多语言调试器介绍</a></li><li><a href="https://gitee.com/openarkcompiler-incubator/maple_engine/tree/master/maple_debugger" target="_blank" rel="noopener">方舟多语言调试器项目说明</a></li><li><a href="https://gitee.com/openarkcompiler-incubator/maple_engine/blob/master/maple_debugger/UserReference.md" target="_blank" rel="noopener">方舟多语言调试器用户手册</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -ti ystyle/maple-engine:gdb bash</span><br><span class="line"># 设置jdk源码路径 $JDK_SRC 为本地的openjdk源码</span><br><span class="line"># docker run --rm -ti -v $&#123;JDK_SRC&#125;:/root/my_openjdk8/jdk/src/ ystyle/maple-engine:gdb bash</span><br><span class="line"># 设置基础环境</span><br><span class="line">source ./envsetup.sh</span><br><span class="line"># 编译java hello world</span><br><span class="line">cd ./maple_build/examples/HelloWorld</span><br><span class="line">$MAPLE_BUILD_TOOLS/java2asm.sh HelloWorld.java</span><br><span class="line"># 生成把.s文件编译为.so</span><br><span class="line">$MAPLE_BUILD_TOOLS/asm2so.sh HelloWorld.s</span><br><span class="line"># 调试应用程序</span><br><span class="line">&quot;$MAPLE_BUILD_TOOLS&quot;/run-app.sh -gdb -classpath ./HelloWorld.so HelloWorld</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;文档&quot;&gt;&lt;a href=&quot;#文档&quot; class=&quot;headerlink&quot; title=&quot;文档&quot;&gt;&lt;/a&gt;文档&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gitee.com/harmonyos/OpenArkCompiler/issues/I1OH
      
    
    </summary>
    
      <category term="软件" scheme="http://ystyle.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="编译器" scheme="http://ystyle.top/tags/%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
      <category term="方舟" scheme="http://ystyle.top/tags/%E6%96%B9%E8%88%9F/"/>
    
      <category term="方舟多语言调试器" scheme="http://ystyle.top/tags/%E6%96%B9%E8%88%9F%E5%A4%9A%E8%AF%AD%E8%A8%80%E8%B0%83%E8%AF%95%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Windows右键菜单添以Window Terminal命令行打开文件</title>
    <link href="http://ystyle.top/2020/05/31/open-file-with-windows-terminal-command/"/>
    <id>http://ystyle.top/2020/05/31/open-file-with-windows-terminal-command/</id>
    <published>2020-05-31T14:11:48.000Z</published>
    <updated>2020-05-31T14:11:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>应用场景: 在文件右键打开windows terminal， 并在执行的命令中以选择的文件为参数运行。 </p></blockquote><blockquote><p>本示例为在windows terminal使用micro编辑器打开选中文件</p></blockquote><h3 id="先创建一个右键菜单项"><a href="#先创建一个右键菜单项" class="headerlink" title="先创建一个右键菜单项"></a>先创建一个右键菜单项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\Open with Micro]</span><br><span class="line">&quot;Icon&quot;=&quot;E:\\Code\\Go\\bin\\micro-logo-mark.ico&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\Open with Micro\command]</span><br><span class="line">@=&quot;C:\\Users\\Administrator\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe new-tab -p \&quot;Windows PowerShell\&quot;  micro.exe \&quot;%1\&quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="键的说明"><a href="#键的说明" class="headerlink" title="键的说明"></a>键的说明</h4><ul><li><code>[HKEY_CLASSES_ROOT\*\shell\Open with Micro]</code> 中的 <code>Open with Micro</code>为右键菜单名</li><li>Icon 是右键菜单项的图标</li><li>command 里的是菜单项点击后要执行的命令</li><li><code>wt.exe new-tab -p \&quot;Windows PowerShell\&quot;  micro.exe &#39;%1&#39;</code> <ul><li>wt 必需要写全路径，不写会弹出【选择打开文件需要的应用】那个窗口</li><li><code>new-tab</code> 是打开一个新的windows terminal 页签(不过在我电脑会打开新的一个应用实例)</li><li><code>-p \&quot;Windows PowerShell\&quot;</code> 是新页签需要用的的shell，可以是windows terminal的配置中的 name或guid</li><li><code>micro.exe \&quot;%1\&quot;</code> 是需要执行的命令， <code>\&quot;%1\&quot;</code>是当前右键的文件占位符</li></ul></li></ul><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-05/qimgv_2020-05-30_22-44-29.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-05/WindowsTerminal_2020-05-30_22-52-28.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;应用场景: 在文件右键打开windows terminal， 并在执行的命令中以选择的文件为参数运行。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本示例为在windows terminal使用micro编辑器打开选中文件
      
    
    </summary>
    
      <category term="系统" scheme="http://ystyle.top/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="windows" scheme="http://ystyle.top/tags/windows/"/>
    
      <category term="Window Terminal" scheme="http://ystyle.top/tags/Window-Terminal/"/>
    
  </entry>
  
  <entry>
    <title>uTorrent BT软件入门</title>
    <link href="http://ystyle.top/2020/04/25/getting-start-utorrent/"/>
    <id>http://ystyle.top/2020/04/25/getting-start-utorrent/</id>
    <published>2020-04-25T14:36:26.000Z</published>
    <updated>2020-04-25T14:36:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>软件设置并不能解决百分百的问题，BT是有死链的概念的，这种怎么设置都无法下载，还有些冷门内容速度慢是无法解决的，但大家可以尽量少用讯雷下载。 讯雷p2p只上传给自己的服务器，别的下载工具得不到p2p加速，并且还免费给讯雷做下载点</p></blockquote><blockquote><p>如果遇到喜欢的资源，想让更多的人知道、下载就多给种子挂【做种】吧，下载完后默认就开了的，建议分享率大于1时再关，有条件的可以一直挂着</p></blockquote><h3 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h3><ul><li><p>连接设置</p><ul><li>监听端口部分照着设置就行</li><li>代理服务器: 代理ip和端口看你用的代理工具，要勾上使用代理进行主机名查询<br><img src="https://dll.ystyle.top/images/2020-04/uTorrent_2020-04-25_21-59-01.png" alt=""></li></ul></li><li><p>任务设置</p><ul><li>DHT和UDP tracker一定要勾上</li><li>传出连接选择强制, 去掉[允许传入旧式中接]</li><li>建议按我的设置<br><img src="https://dll.ystyle.top/images/2020-04/uTorrent_2020-04-25_22-07-54.png" alt=""></li></ul></li><li><p>去广告</p><ul><li>把以下设置为false<ul><li>offers.sponsored_torrent_offer_enabled</li><li>offers.left_rail_offer_enabled</li><li>gui.show_plus_upsell<br><img src="https://dll.ystyle.top/images/2020-04/uTorrent_2020-04-25_22-11-06.png" alt=""></li></ul></li></ul></li></ul><h3 id="下载任务设置"><a href="#下载任务设置" class="headerlink" title="下载任务设置"></a>下载任务设置</h3><blockquote><p>主要是开DHT,和设置tracker, DHT开在连接上面的任务里说过了</p></blockquote><ul><li><p>Tracker是什么</p><blockquote><p>一般下载文件是用http/ftp/smb协议的域名或ip来明确指向文件存放在哪个IP的服务器上， 但BT是用识别码来标识文件，而没有明确的文件地址。 所以为了找到文件就需要有一个机制来确定目标文件在哪些机器上能下载到。 DHT和Tracker服务器都能做到文件寻址。</p></blockquote><ul><li>DHT: 是内嵌在BT软件里边的，会和电脑能识别并能连接上的BT网络进行数据交换和查询，从而找到文件需要到哪个IP去下载。</li><li>Tracker: 是运行在别人搭建好的服务器上，你只需要在下载时填写别人提供的Tracker连接就好了，BT软件会连接服务器进行文件查询并取到下载文件的IP地址</li></ul></li></ul><ul><li>设置Tracker<ul><li>在任务上右键-属性</li><li>打开<a href="https://github.com/ngosang/trackerslist" target="_blank" rel="noopener"><code>https://github.com/ngosang/trackerslist</code></a><ul><li>把 <code>trackers_best_ip.txt</code> 或 <code>trackers_all.txt</code> 的内容复制到tracker里</li><li>trackers_best_ip 如果部分tracker被墙了域名，可以用这个试试</li><li>trackers_all 一般是域名的，如果墙了域名的可能连接不上，破解方法在上面 【全局设置 - 连接设置 - 设置代理】</li><li>终极方法是启用全局代理，但梯子月费比较贵，流量也少，所以以上都用不了时才开来下载</li></ul></li><li>一般是勾上了DHT的，没有勾的，自行勾上<br><img src="https://dll.ystyle.top/images/2020-04/uTorrent_2020-04-25_22-12-56.png" alt=""></li></ul></li></ul><h3 id="制作种子或磁力链接"><a href="#制作种子或磁力链接" class="headerlink" title="制作种子或磁力链接"></a>制作种子或磁力链接</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-04/uTorrent_2020-04-25_22-26-24.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-04/uTorrent_2020-04-25_22-29-50.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>点击<code>文件-制作新的torrent</code> 或 工具栏 箭头那个图标</li><li>在选择源添加文件或目录</li><li>有必要时在Tracker里添加新的链接</li><li>勾选【开始做种】， 默认已经选上</li><li>点创建，选择种子保存位置， 这种子可以发给别人</li><li>生成磁力链接: 在【做种中】界面 右键任务 - 【复制Magnet链接】</li></ul><h3 id="边下边播功能"><a href="#边下边播功能" class="headerlink" title="边下边播功能"></a>边下边播功能</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-04/qimgv_2020-04-25_23-45-43.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>选择正在下载的任务</li><li>在下面板选择文件</li><li>在下载中的文件右键复制串流地址</li><li>打开其它支持播放url的播放器 打开这网址，就能实现边下边播放的功能了</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;软件设置并不能解决百分百的问题，BT是有死链的概念的，这种怎么设置都无法下载，还有些冷门内容速度慢是无法解决的，但大家可以尽量少用讯雷下载。 讯雷p2p只上传给自己的服务器，别的下载工具得不到p2p加速，并且还免费给讯雷做下载点&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
      <category term="软件" scheme="http://ystyle.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="uTorrent" scheme="http://ystyle.top/tags/uTorrent/"/>
    
      <category term="BT" scheme="http://ystyle.top/tags/BT/"/>
    
  </entry>
  
  <entry>
    <title>Windows Terminal 添加SSH到Tabs里</title>
    <link href="http://ystyle.top/2020/03/15/add-ssh-command-to-windows-terminal-tab/"/>
    <id>http://ystyle.top/2020/03/15/add-ssh-command-to-windows-terminal-tab/</id>
    <published>2020-03-15T06:46:26.000Z</published>
    <updated>2020-03-15T06:46:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注意替换路径</p></blockquote><h3 id="用git-bash带的SSH"><a href="#用git-bash带的SSH" class="headerlink" title="用git-bash带的SSH"></a>用git-bash带的SSH</h3><blockquote><p>命令一定要用转义的双引号包起来, key的路径用git bash的路径方式，没key的话，删掉-i后面的就好，但每次都要输入密码. key登陆百度搜索SSH免密登陆</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"guid"</span>: <span class="string">"&#123;43d5c880-802b-42c7-aeaf-21b112a3569b&#125;"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"腾讯云"</span>,</span><br><span class="line">    <span class="attr">"icon"</span>:<span class="string">"E:\\Images\\tx.ico"</span>,</span><br><span class="line">    <span class="attr">"commandline"</span>: <span class="string">"E:\\Application\\Git\\bin\\bash.exe -c \"ssh ubuntu@140.143.205.68 -i /e/Code/Docker/tx.key\""</span>,</span><br><span class="line">    <span class="attr">"useAcrylic"</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"acrylicOpacity"</span>: <span class="number">0.75</span>,</span><br><span class="line">    <span class="attr">"backgroundImage"</span> : <span class="string">"E:\\Images\\壁纸\\03.jpg"</span>,</span><br><span class="line">    <span class="attr">"backgroundImageOpacity"</span> : <span class="number">0.5</span>,</span><br><span class="line">    <span class="attr">"startingDirectory"</span>: <span class="string">"./"</span>,</span><br><span class="line">    <span class="attr">"scrollbarState"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"hidden"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用Power-Shell自带的SSH"><a href="#用Power-Shell自带的SSH" class="headerlink" title="用Power Shell自带的SSH"></a>用Power Shell自带的SSH</h3><blockquote><p>基本是一样的，但key的目录必需在当前用户的主目录下，路径是windwos的标准格式</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   // Make changes here to the powershell.exe profile</span><br><span class="line">   "guid": "&#123;61c54bbd-c2c6-5271-96e7-009a87ff44ba&#125;",</span><br><span class="line">   "name": "腾讯云",</span><br><span class="line">   "icon":"E:\\Images\\tx.ico",</span><br><span class="line">   "commandline": "powershell.exe -c \"ssh ubuntu@140.143.205.68 -i C:/Users/Administrator/tx.key\"",</span><br><span class="line">   "useAcrylic":true,</span><br><span class="line">   "acrylicOpacity": 0.75,</span><br><span class="line">   "backgroundImage" : "E:\\Images\\壁纸\\03.jpg",</span><br><span class="line">   "backgroundImageOpacity" : 0.5,</span><br><span class="line">   "startingDirectory": "./",</span><br><span class="line">   "scrollbarState": false,</span><br><span class="line">   "background": "#0000FF",</span><br><span class="line">   "hidden": false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加右键菜单-在任意地方打开Window-Terminal"><a href="#添加右键菜单-在任意地方打开Window-Terminal" class="headerlink" title="添加右键菜单-在任意地方打开Window Terminal"></a>添加右键菜单-在任意地方打开Window Terminal</h3><blockquote><p><a href="https://raw.githubusercontent.com/microsoft/terminal/master/res/terminal.ico" target="_blank" rel="noopener">图标下载</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt]</span><br><span class="line">@=&quot;Windows Terminal here&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;\&quot;E:\\Images\\terminal.ico\&quot;&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command]</span><br><span class="line">@=&quot;C:\\Users\\Administrator\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe&quot;</span><br></pre></td></tr></table></figure><h3 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dll.ystyle.top/images/2020-03/WindowsTerminal_2020-03-15_16-55-40.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;注意替换路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;用git-bash带的SSH&quot;&gt;&lt;a href=&quot;#用git-bash带的SSH&quot; class=&quot;headerlink&quot; title=&quot;用git-bash带的SSH&quot;&gt;&lt;/a&gt;用gi
      
    
    </summary>
    
      <category term="软件" scheme="http://ystyle.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="SSH" scheme="http://ystyle.top/tags/SSH/"/>
    
      <category term="terminal" scheme="http://ystyle.top/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>KDE添加右键菜单</title>
    <link href="http://ystyle.top/2020/02/21/add-custom-context-menu-to-kde-dolphin/"/>
    <id>http://ystyle.top/2020/02/21/add-custom-context-menu-to-kde-dolphin/</id>
    <published>2020-02-21T07:11:48.000Z</published>
    <updated>2020-02-21T07:11:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文件存放位置"><a href="#文件存放位置" class="headerlink" title="文件存放位置"></a>文件存放位置</h3><ul><li>位置<ul><li><code>$HOME/.local/share/kservices5/</code></li><li><code>/usr/share/kservices5/</code></li></ul></li><li>文件后缀: <code>.desktop</code></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Actions=OptimisePNG;</span><br><span class="line">MimeType=image/png;</span><br><span class="line">Type=Service</span><br><span class="line">X-KDE-ServiceTypes=KonqPopupMenu/Plugin</span><br><span class="line">Icon=tools-wizard.png</span><br><span class="line"></span><br><span class="line">[Desktop Action OptimisePNG]</span><br><span class="line">Name=Optimise PNG Image</span><br><span class="line">Icon=tools-wizard.png</span><br><span class="line">Exec=optipng -o7 %f</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>[Desktop Entry]<ul><li><code>Actions</code>: 在该菜单中的菜单项，多个用英文分号隔开</li><li><code>MimeType</code>: 在指定的文件类型中启动该菜单<ul><li><code>inode/directory</code> 在目录中启用</li><li><code>image/png</code> 只在png图片启用</li><li><code>all/allfiles</code>在所有文件中启用（不包括文件夹）</li><li><code>image/allfiles</code> 在所有图片启用</li></ul></li><li>Type=Service: 表示服务，不会在开始菜单中显示， 改为Application表示应用，会显示在开始菜单</li><li><code>X-KDE-ServiceTypes=KonqPopupMenu/Plugin</code>: 只在kde中支持，  表示显示在<code>右键-动作</code>下边</li><li><code>X-KDE-Priority=TopLevel</code> 表示显示在顶级菜单中，右键直接显示</li><li><code>Icon</code> Type=Service 时图标不会显示</li></ul></li><li>[Desktop Action OptimisePNG]<ul><li><code>OptimisePNG</code>为自定义的动作，填写在上边的<code>Actions</code>里</li><li><code>Name</code>菜单项名称</li><li><code>Icon</code>菜单显示图标</li><li><code>Exec</code>点击菜单时执行的命令<ul><li>%f 文件列表。用于可一次打开多个本地文件的应用程序。每个文件都作为单独的参数传递给可执行程序。</li><li>%F 即使选择了多个文件，也只有一个文件名（包括路径）。读取桌面条目的系统应认识到所讨论的程序无法处理多个文件参数，并且如果该程序无法处理其他文件参数，则应该为每个选定文件生成并执行该程序的多个副本。如果文件不在本地文件系统上（即，在HTTP或FTP位置），则文件将被复制到本地文件系统，%f并将展开以指向临时文件。用于不了解URL语法的程序。</li></ul></li><li><code>[Desktop Action XXXX]</code> 的条目在一个文件中可以有多个</li></ul></li><li>如果新建无误后显示不出来的话， 执行一下<code>kbuildsycoca5</code>如果有错误会有提示`</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;文件存放位置&quot;&gt;&lt;a href=&quot;#文件存放位置&quot; class=&quot;headerlink&quot; title=&quot;文件存放位置&quot;&gt;&lt;/a&gt;文件存放位置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;位置&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$HOME/.local/share/kservices5/&lt;
      
    
    </summary>
    
      <category term="系统" scheme="http://ystyle.top/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="linux" scheme="http://ystyle.top/tags/linux/"/>
    
      <category term="kde" scheme="http://ystyle.top/tags/kde/"/>
    
  </entry>
  
</feed>
