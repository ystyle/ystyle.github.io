{"meta":{"title":"东方星痕","subtitle":"请你给我力量，给我方向， 用风一样的翅膀，更用力的飞翔.","description":"请你给我力量，给我方向， 用风一样的翅膀，更用力的飞翔.","author":"YSTYLE","url":"http://ystyle.top"},"pages":[{"title":"404","date":"2017-03-25T12:18:51.000Z","updated":"2023-10-16T08:04:08.516Z","comments":false,"path":"404.html","permalink":"http://ystyle.top/404.html","excerpt":"","text":"*{margin:0;padding:0;outline:none;font-family:\\5FAE\\8F6F\\96C5\\9ED1,宋体;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-khtml-user-select:none;user-select:none;cursor:default;font-weight:lighter;} .center{margin:0 auto;} .whole{width:100%;height:100%;line-height:100%;position:fixed;bottom:0;left:0;z-index:-1000;overflow:hidden;} .whole img{width:100%;height:100%;} .mask{width:100%;height:100%;position:absolute;top:0;left:0;background:#000;opacity:0.6;filter:alpha(opacity=60);} .b{width:100%;text-align:center;height:400px;position:absolute;top:50%;margin-top:-230px}.a{width:150px;height:50px;margin-top:30px}.a a{display:block;float:left;width:150px;height:50px;background:#fff;text-align:center;line-height:50px;font-size:18px;border-radius:25px;color:#333}.a a:hover{color:#000;box-shadow:#fff 0 0 20px} p{color:#fff;margin-top:40px;font-size:24px;} #num{margin:0 5px;font-weight:bold;} 暂时未能找到您查找的页面 可能输入的网址错误或此页面不存在 秒后自动跳转到主页 var num=4; function redirect(){ num--; document.getElementById(\"num\").innerHTML=num; if(num"},{"title":"分类","date":"2017-03-25T12:19:02.000Z","updated":"2023-10-16T08:04:08.520Z","comments":false,"path":"categories/index.html","permalink":"http://ystyle.top/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2017-03-25T12:24:04.000Z","updated":"2023-10-16T08:04:08.520Z","comments":false,"path":"friends/index.html","permalink":"http://ystyle.top/friends/index.html","excerpt":"","text":"熊猫大仙技术博客 Nicol的博客铭 FindSpace 遥遥工作室 life 深夜猿 深山野老 .post-content a{font-size: 1.5rem;}"},{"title":"标签","date":"2017-03-25T12:18:51.000Z","updated":"2023-10-16T08:04:08.572Z","comments":false,"path":"tags/index.html","permalink":"http://ystyle.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"hypyland实现alt + tab切换到任意工作区的窗口","slug":"hyprland-alt-tab-switch-to-any-widnow","date":"2023-10-13T02:46:26.000Z","updated":"2023-10-13T07:08:26.000Z","comments":true,"path":"2023/10/13/hyprland-alt-tab-switch-to-any-widnow/","link":"","permalink":"http://ystyle.top/2023/10/13/hyprland-alt-tab-switch-to-any-widnow/","excerpt":"","text":"hypyland使用过程中，遇到开了很多工作区和很多窗口时，找指定的窗口会比较麻烦 依赖 一键安装 yay -S jq rofi-lbonn-wayland-git jq rofi 脚本把以下脚本存放到~/.config/hypr/scripts/switch_windows1234#!/usr/bin/env bashNAME=`hyprctl clients -j | jq -r '.[] | select(.title != \"\") | .title' | rofi -dmenu`WINDOW=`hyprctl clients -j | jq -r \".[] | select(.title == \\\"$&#123;NAME&#125;\\\") | .address\"`hyprctl dispatch focuswindow address:$&#123;WINDOW&#125; 添加快捷键1bind = ALT, Tab, exec, $&#123;HOME&#125;/.config/hypr/scripts/switch_windows 效果 按alt + tab后，在弹出的窗口选择对应窗口的标题， 可以自动跳转到对应的窗口 截图_2023-10-13_160749","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"hyprland","slug":"hyprland","permalink":"http://ystyle.top/tags/hyprland/"},{"name":"wayland","slug":"wayland","permalink":"http://ystyle.top/tags/wayland/"}]},{"title":"使用泛型设计gorm扩展字段","slug":"design_gorm_extension_fields_using_generics","date":"2023-09-25T09:37:26.000Z","updated":"2023-09-25T09:37:26.000Z","comments":true,"path":"2023/09/25/design_gorm_extension_fields_using_generics/","link":"","permalink":"http://ystyle.top/2023/09/25/design_gorm_extension_fields_using_generics/","excerpt":"","text":"大型项目经常需要在标准的用户表或员工表加些扩展字段，如果你有一套标准的用户管理系统的话，要么每个项目复制过来改一遍或者添加十几个固定的自定义字段Def1~Def10， 现在可以用在gorm定义模型时使用泛型来解决这个问题 gorm embeded嵌入字段使用gorm:&quot;embedded&quot;定义嵌入字段 1234567891011type User struct &#123; gorm.Model Username string Password string Extend UserExtendField `gorm:\"embedded\"` // 添加embed tag&#125;type UserExtendField struct &#123; OpenID string UnionID string&#125; 上面的model等价于这个, 两个生成的表结构是一致的1234567type User struct &#123; gorm.Model Username string Password string OpenID string UnionID string&#125; 上面两个模型都会生成同样的ddl sql, 如下12345678910111213create table if not users( id bigint unsigned auto_increment primary key, created_at datetime(3) null, updated_at datetime(3) null, deleted_at datetime(3) null, username longtext null, password longtext null, org_id longtext null, open_id longtext null, union_id longtext null ) 使用泛型定义可扩展的模型123456789101112131415161718type User[ExtendField any] struct &#123; gorm.Model Username string Password string Extend ExtendField `gorm:\"embedded\"`&#125;// 需要自定义表名，否则gorm识别到的泛型的表名是不符合数据库标准的，建表会错误func (User[Extend, Item]) TableName() string &#123; return \"ma_users\"&#125;// 定义扩展字段结构type ExtendUserField struct &#123; OrgID string OpenID string UnionID string&#125; 使用方法123456// 生成数据库表结构db.AutoMigrate(User[ExtendUserField])// 查找var list []User[ExtendUserField]db.model(&amp;User[ExtendUserField]).Find(&amp;list) 可扩展的子表123456789101112131415161718192021222324type User[ExtendField any,Item any] struct &#123; gorm.Model Username string Password string Extend ExtendField `gorm:\"embedded\"` Items Item `gorm:\"foreignKey:user_id\"` // 这里需要写外键&#125;// 需要自定义表名，否则gorm识别到的泛型的表名是不符合数据库标准的，建表会错误func (User[Extend, Item]) TableName() string &#123; return \"ma_users\"&#125;type UserItem struct &#123; gorm.Model UserID uint Product string&#125;// 定义扩展字段结构type ExtendUserField struct &#123; OrgID string OpenID string UnionID string&#125; 使用方法123// 查找var list []User[ExtendUserField, UserItem]db.model(&amp;User[ExtendUserField, UserItem]).Find(&amp;list) 使用类型别名简化泛型类型 使用类型别名， 可以把上面的泛型代码简化1234type MyUser = User[ExUserField, UserItem]var list []MyUserdb.model(&amp;MyUser).Find(&amp;list)","categories":[{"name":"软件","slug":"软件","permalink":"http://ystyle.top/categories/软件/"}],"tags":[{"name":"go","slug":"go","permalink":"http://ystyle.top/tags/go/"},{"name":"gorm","slug":"gorm","permalink":"http://ystyle.top/tags/gorm/"},{"name":"泛型","slug":"泛型","permalink":"http://ystyle.top/tags/泛型/"}]},{"title":"使用qemu8.0安装龙芯loongarch64版本archlinux","slug":"install-loongarch64-archlinux-qemu","date":"2023-07-20T02:46:26.000Z","updated":"2023-07-20T02:46:26.000Z","comments":true,"path":"2023/07/20/install-loongarch64-archlinux-qemu/","link":"","permalink":"http://ystyle.top/2023/07/20/install-loongarch64-archlinux-qemu/","excerpt":"","text":"准备 Loong Arch Linux官网 qemu镜像下载 QEMU_EFI_8.0.fd: 固件 archlinux-xfce4-2023.05.10-loong64.qcow2.zst: 系统镜像, 下载后需要解压出qcow2文件 安装依赖 建议安装qemu-full包, 我以前安装的不是这个, 导致gpu加载不了 1sudo pacman -S qemu-full 启动系统 注意固件版本和系统镜像版本 12345678910111213qemu-system-loongarch64 \\ -m 4G \\ -cpu la464-loongarch-cpu \\ -machine virt \\ -smp 4 \\ -bios ./QEMU_EFI_8.0.fd \\ -serial stdio \\ -device virtio-gpu-pci \\ -net nic -net user \\ -device nec-usb-xhci,id=xhci,addr=0x1b \\ -device usb-tablet,id=tablet,bus=xhci.0,port=1 \\ -device usb-kbd,id=keyboard,bus=xhci.0,port=2 \\ -hda archlinux-xfce4-2023.05.10-loong64.qcow2 image image","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"loongarch","slug":"loongarch","permalink":"http://ystyle.top/tags/loongarch/"},{"name":"archlinux","slug":"archlinux","permalink":"http://ystyle.top/tags/archlinux/"},{"name":"qemu","slug":"qemu","permalink":"http://ystyle.top/tags/qemu/"}]},{"title":"在archlinux aur上提交龙芯loongarch的软件包","slug":"push-loongarch64-app-to-archlinux-aur","date":"2023-07-19T06:46:26.000Z","updated":"2023-07-19T06:46:26.000Z","comments":true,"path":"2023/07/19/push-loongarch64-app-to-archlinux-aur/","link":"","permalink":"http://ystyle.top/2023/07/19/push-loongarch64-app-to-archlinux-aur/","excerpt":"","text":"image 发现安装好龙芯后, laur软件仓库就自带了yay和paru, 可以直接使用pacman安装. 我有一个软件kaf-cli是go写的可以直接编译到龙芯上.本文记录一下PKGBUILD的写法 PKGBUILD脚本脚本基本上和x86上的没什么区别, 只需要 在arch字段上添加loong64构架 添加source_loong64软件安装包的源 添加sha512sums_loong64校验值, 还可以是md5sum_loong64, sha1sums_loong64123456789101112131415161718192021# Maintainer: YSTYLE &lt;lxy5266@live.com&gt;pkgname=kaf-clipkgver=v1.3.5pkgrel=2epoch=pkgdesc=&quot;把txt文本转成epub与mobi电子书的命令行工具&quot;arch=(&apos;x86_64&apos; &apos;aarch64&apos; &apos;loong64&apos;)url=&quot;https://github.com/ystyle/kaf-cli&quot;license=(&apos;MulanPSL&apos;)optdepends=(&apos;kindlegen: 在x86_64上用于生成标准的mobi格式&apos;)source_x86_64=(&quot;https://github.com/ystyle/TmdTextEpub/releases/download/$pkgver/kaf-cli_$&#123;pkgver&#125;_linux_amd64.zip&quot;)source_aarch64=(&quot;https://github.com/ystyle/TmdTextEpub/releases/download/$pkgver/kaf-cli_$&#123;pkgver&#125;_linux_arm64.zip&quot;)source_loong64=(&quot;https://github.com/ystyle/TmdTextEpub/releases/download/$pkgver/kaf-cli_$&#123;pkgver&#125;_linux_loong64.zip&quot;)sha512sums_x86_64=(&apos;29d3f3e0138f2348024d8a3e2a7a19dfe00b0098e9247c2ea364f3e4ab992575fc68bbbf56258be341c335b94e989ecbe37c0c32419b61ee2d45034f5c5e00de&apos;)sha512sums_aarch64=(&apos;72d2519dec242be92869d0d2eb7022d836147624ff79ba797ff287eb0444eb3dd33e910c01422e1448d486955dbbea0fbc2166e942213e1be03038993945e28f&apos;)sha512sums_loong64=(&apos;c6af9aeb904f934c0fbee06dda83fed02a22c0ec41cccd1b685cbe5e232b5dd66ad5888a91ab2aadeef7007870c94a063a4537a3e32f150d4ea12453cb3f1b54&apos;)package() &#123; install -Dm755 kaf-cli &quot;$pkgdir/usr/bin/kaf-cli&quot;&#125; 然后生成安装包清单信息1makepkg --printsrcinfo &gt; .SRCINFO 测试生成安装包1makepkg -f 直接安装软件1makepkg -si 没问题直接用git推送到aur上就可以了","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"loongarch","slug":"loongarch","permalink":"http://ystyle.top/tags/loongarch/"},{"name":"archlinux","slug":"archlinux","permalink":"http://ystyle.top/tags/archlinux/"},{"name":"龙芯","slug":"龙芯","permalink":"http://ystyle.top/tags/龙芯/"}]},{"title":"k3s云上master+内网agent的部署方式","slug":"k3s-master-in-cloud-agent-in-local-intranet","date":"2023-03-11T13:02:26.000Z","updated":"2023-03-11T13:02:26.000Z","comments":true,"path":"2023/03/11/k3s-master-in-cloud-agent-in-local-intranet/","link":"","permalink":"http://ystyle.top/2023/03/11/k3s-master-in-cloud-agent-in-local-intranet/","excerpt":"","text":"公网master和内网agent使用wireguard-native通信， 只要在所有节点上安装了wireguard模块，k3s会自动处理所有通信流量 准备 在云端master开放 tcp 6443 端口， udp 51820 端口 先在所有机器上安装wireguard-native， 点击查看安装命令 如果内网有防火墙，需要开放master公网ip的6443和51820端口 在云上安装master 需要替换下面的master_public_ip为master公网ip, 能正常起来一般就没问题了 12export INSTALL_KAS_EXEC=\"--node-external-ip=master_public_ip --flannel-backend=wireguard-native --flannel-external-ip\"curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh - INSTALL_KAS_EXEC的参数是最少的开启wireguard-native功能的参数 在msater上执行cat /var/lib/rancher/k3s/server/node-token获取token, 等下子节点需要用 在内网安装agent 我是在树苺派上安装的。下面的token需要换成上一步获取的， 然后把x.x.x.x换成上面的master_public_ip的master公网ip 12export TOKEN=K1004a306bd3e78de0bfb4e9a485659e847dd16be3192b5b16407f53f991dc7d7f7::server:58dcf4e6e4fd7c6023976c331d1xxxxxxcurl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn K3S_URL=https://x.x.x.x:6443 K3S_TOKEN=$&#123;TOKEN&#125; sh -s - --docker --node-external-ip=x.x.x.x 只需要添加--node-external-ip参数就能启用wireguard-native功能了 。 如果没加这参数，是普通的节点，公网master和内网agent就不能正常通信 验证方法 先查看节点是否正常，不需要重启master或agent的服务，如果重启后才看到的话，可能没安装成功 1234 $ kubelct get nodeNAME STATUS ROLES AGE VERSIONubuntu-20.04 Ready control-plane,master 14d v1.25.6+k3s1archlinux-rpi Ready &lt;none&gt; 156m v1.25.6+k3s1 用nodeSelector分别在master和内网机器上部署nginx的deploy， 再分别创建对应的service 再在其中一个deploy的pod里执行curl 另一个deploy的service名称，如果能请求到nginx默认界面，说明是通的","categories":[{"name":"运维","slug":"运维","permalink":"http://ystyle.top/categories/运维/"}],"tags":[{"name":"k3s","slug":"k3s","permalink":"http://ystyle.top/tags/k3s/"},{"name":"kubernetes","slug":"kubernetes","permalink":"http://ystyle.top/tags/kubernetes/"},{"name":"wireguard-native","slug":"wireguard-native","permalink":"http://ystyle.top/tags/wireguard-native/"},{"name":"wireguard","slug":"wireguard","permalink":"http://ystyle.top/tags/wireguard/"}]},{"title":"阿里云网盘映射本地硬盘","slug":"aliyundrive-webdav","date":"2022-01-01T14:46:26.000Z","updated":"2022-01-01T14:46:26.000Z","comments":true,"path":"2022/01/01/aliyundrive-webdav/","link":"","permalink":"http://ystyle.top/2022/01/01/aliyundrive-webdav/","excerpt":"","text":"下载aliyundrive-webdav 下载地址: https://github.com/messense/aliyundrive-webdav/releases/latest 解压并放在一个目录里 准备脚本 把以下内容存为run.ps1 1234$env:REFRESH_TOKEN=\"484b469b3ef74dcaba5cf21aeadae2ca\"$env:WEBDAV_AUTH_USER=\"admin\"$env:WEBDAV_AUTH_PASSWORD=\"123456\"Start-Process -FilePath aliyundrive-webdav.exe -ArgumentList (\"--port=8080\") -Wait -WindowStyle Hidden 脚本配置说明: $env:REFRESH_TOKEN: 为阿里云网盘登陆后的token, 必需改为自己的 获取阿里云网盘REFRESH_TOKEN的方法 $env:WEBDAV_AUTH_USER： webdav用户名 $env:WEBDAV_AUTH_PASSWORD: webdav密码 --port=8080 为webdav的访问端口，被占用时可以换成其它的 设计开机启动 win + s搜索任务计划程序打开 在打开界面选择任务计划程序库 在右边点创建基本任务，输入名字: aliyundrive-webdav (名字可以随意写) 下一步选择: 计算机启动时 下一步选择: 启动程序 下一步： 在【程序或者脚本】写: powershell.exe 在【添加参数】填写: -WindowStyle Hidden -file run.ps1 在【起始于】填写：存放run.ps1和 aliyundrive-webdav的目录 下一步点击：完成 启动服务: 在服务列表选择aliyundrive-webdav并在右边选项里选择启动 映射本地硬盘 修改注册表，以支持webdav的http协议 打开文件管理器，在此电脑右键-选择映射网络驱动器 在弹窗选择一个盘符，并在文件夹填写: http://127.0.0.1:8080, 点完成，在弹窗输入用户名和密码","categories":[{"name":"软件","slug":"软件","permalink":"http://ystyle.top/categories/软件/"}],"tags":[{"name":"阿里云网盘","slug":"阿里云网盘","permalink":"http://ystyle.top/tags/阿里云网盘/"},{"name":"webdav","slug":"webdav","permalink":"http://ystyle.top/tags/webdav/"}]},{"title":"go mod 拉取 gogs 私有仓库","slug":"go-mod-gogs-private","date":"2021-06-22T02:46:26.000Z","updated":"2021-06-22T02:46:26.000Z","comments":true,"path":"2021/06/22/go-mod-gogs-private/","link":"","permalink":"http://ystyle.top/2021/06/22/go-mod-gogs-private/","excerpt":"","text":"环境变量设置 添加环境变量或设置go env123export GOPRIVATE=git.hofo.co# 或者go env -w GOPRIVATE=git.hofo.co git设置 在git设置http.extraheader PRIVATE-TOKEN生成方式: 在点击gogs右上头像-用户设置-授权应用-生成新的token1git config --global http.extraheader \"PRIVATE-TOKEN: 5737d215af7f9a41a2abe98631d312e9e9311d29d\" 在git添加url配置, ystyle:5737d215af7f9a41a2abe98631d312e9e939d29d11是用户名和上一步生成的token 1git config --global url.\"https://ystyle:5737d215af7f9a41a2abe98631d312e9e939d29d11@git.hofo.co\".insteadOf \"https://git.hofo.co\"","categories":[{"name":"软件","slug":"软件","permalink":"http://ystyle.top/categories/软件/"}],"tags":[{"name":"go","slug":"go","permalink":"http://ystyle.top/tags/go/"},{"name":"git","slug":"git","permalink":"http://ystyle.top/tags/git/"},{"name":"gogs","slug":"gogs","permalink":"http://ystyle.top/tags/gogs/"}]},{"title":"开源鸿蒙网络和hdc连接方法","slug":"openharmonyos-hdc-and-network","date":"2021-06-06T10:10:13.000Z","updated":"2023-10-16T08:04:08.520Z","comments":true,"path":"2021/06/06/openharmonyos-hdc-and-network/","link":"","permalink":"http://ystyle.top/2021/06/06/openharmonyos-hdc-and-network/","excerpt":"","text":"hdc下载 如果下载了源码，可以在源码目录找到: developtools/hdc_standard/prebuilt/windows/hdc_std.exe 远程仓库地址： https://gitee.com/openharmony/developtools_hdc_standard hdc使用手册: https://gitee.com/openharmony/docs/blob/master/zh-cn/device-dev/subsystems/hdc_std-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AF%BC.md 通过usb连接鸿蒙 通过hi3516背面的type-c口连接电脑, 目前只有这口能传数据， 底下的口不行 如果成功，可以在电脑 设备管理-用串行总线设备下面看到HDC Device 打开终端， 输入hdc list targets列出设备 鸿蒙连接本地有线网络 插入有线网线 在hitool串口中连接上hi3516后执行 /system/xbin/su 获取root权限 ifconfig eth0 192.168.3.197 netmask 255.255.255.0 网络IP要换成自己的网段 用hdc通过tcp连接鸿蒙 在连接hitool串口后执行hdcd -t 在自己电脑主机上打开终端执行 hdc tconn 192.168.3.197:10178 显示 Connect OK 就表示连接上了 执行hdc list targets -v 显示设备 执行hdc -t 192.168.3.197:10178 shell 连接鸿蒙系统的shell， 注： tcp连接时要用-t指定连接的ip:端口 执行hdc -t 192.168.3.197:10178 file send localfile remotefile 发送文件 其实命令请查看使用手册","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"鸿蒙","slug":"鸿蒙","permalink":"http://ystyle.top/tags/鸿蒙/"}]},{"title":"鸿蒙开发板HI3516用命令行连接wifi","slug":"hi3516-connect-wifi","date":"2020-12-18T12:11:48.000Z","updated":"2020-12-18T12:11:48.000Z","comments":true,"path":"2020/12/18/hi3516-connect-wifi/","link":"","permalink":"http://ystyle.top/2020/12/18/hi3516-connect-wifi/","excerpt":"","text":"鸿蒙的HI3516编译里已经有wpa_supplicant相关工程了，但编译时没有包进去, 所以只要修改配置文件后就能编译出来了 主要修改文件: communication/BUILD.gn#L17-18 行之间添加， 以下第2行123features = [ &quot;wpa_supplicant:wpa_sample&quot;,] 编译过程123docker run --rm -ti -e HARDWARE=ipcamera_hi3516dv300 -v $&#123;PWD&#125;/out:/OpenHarmony/out ystyle/open-harmony bashsed -i '17a\\ \\ \\ \\ \\ \\ \"wpa_supplicant:wpa_sample\",' applications/sample/camera/communication/BUILD.gnpython build.py $&#123;HARDWARE&#125; -b debug 然后wpa_supplicant在编译目录/out/ipcamera_hi3516dv300/bin/， 把wpa_supplicant复制出来就可以直接使用 使用方法先创建配置文件，wpa_supplicant.conf 12345678910country=GBctrl_interface=udpnetwork=&#123; #要连接的SSID ssid=&quot;example&quot; #如果不需要加密就写key_mgmt=NONE #key_mgmt=NONE #如果需要加密就写这行密码 psk=&quot;AA123456&quot;&#125; 把wpa_supplicant和配置文件复制到hi3516， 执行以下命令连接wifi12cd /nfs/wifi./wpa_supplicant -i wlan0 -c ./wpa_supplicant.conf","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"鸿蒙","slug":"鸿蒙","permalink":"http://ystyle.top/tags/鸿蒙/"},{"name":"wifi","slug":"wifi","permalink":"http://ystyle.top/tags/wifi/"}]},{"title":"Quest2 使用Netch激活与无线串流的设置","slug":"quest2","date":"2020-12-05T17:30:26.000Z","updated":"2021-11-05T11:30:26.000Z","comments":true,"path":"2020/12/05/quest2/","link":"","permalink":"http://ystyle.top/2020/12/05/quest2/","excerpt":"","text":"Quest2 激活与无线串流的设置更新后自带Airlink串流，不需要买virtual desktop了连网激活 需要可上网，与tcp、udp转发， 激活更新系统时需要udp转发才能正常更新系统, 本方法完美支持，只需要有支持wifi网卡的电脑 Netch： socket5、ss、vmess(v2ray) 转wifi 安装.NET Desktop runtime 5.0 x64和Visual C++ 运行库 打开Netch, 添你的代理，然后选择ByPass LAN and China， 启动 在win10开启wifi移动热点 在网络适配器管理界面，把带tap的网卡，右键属性-切换到分享， 把第一个勾上，下拉选择wifi热点的网卡 在quest2连接热点，等一会后，联网界面下的确定按钮亮了之后，会进入系统更新 更新系统后，可以切回wifi+http代理方式玩(wifi连接输入密码，下边点高级，可以填入http代理) Airlink串流 电脑上安装或升级oculus home到最新版 登陆帐号后到设置-公测版打开Airlink设置 更新quest2系统到最新版 在实验室打开Airlink 之后在设置-快捷操作-Airlink搜索电脑，连接上后点启动， 就进入电脑版的操作台了。 开发者模式 注册开发者帐号或进入别人的开发者团队 下载adb驱动, 解压后右键【androidwinusb.inf】选择安装即可。 安装手机oculus app 用数据线连接quest2和电脑 在手机oculus app上连接quest2, 并在设置开启开发者模板 在电脑上安装sidequest， 可以下载一些第三方游戏。 展开查看 virtual desktop 串流### virtual desktop - 在quest2上购买virtual desktop - virtual desktop必需买，sidequest上的只是个串流用的插件 - 在电脑上安装virtual desktop streamer串流软件， 官方网站直接免费下载 - 用数据线连接电脑 - 安装sidequest, 用它给quest2安装串流插件virtual desktop vr patch ### 购买virtual desktop - 注册paypal - 绑定支持银联的银行卡(我用的是邮政的储蓄卡，只有银联，没其它标识) - 在oculus home、oculus网站、或手机oculus app绑定paypal - 在上述软件中搜索virtual desktop点购买，如果出现执行查询出现错误就更换代理节点(我用美国节点的会出现这个) - 按汇率，卡里需要137RMB - steam 里的virtual desktop不支持quest2### 串流设置 - 连接到与电脑同wifi（激活时用的热点也可以用的） - 打开电脑上的virtual desktop streamer，并在username填写自己的oculus帐户名 - 在quest2上打开virtual desktop软件 - 这时会显示一个巨大的电脑屏幕， 打开支持steam vr或oculus home的游戏，会自动串流到quest2里 - 这时可以愉快的玩耍了 参考 Oculus Quest / Quest2 如何设置 VirtualDesktop 实现无线串流【详细教程】_kasaiki的博客-CSDN博客 Oculus Quest 国内玩家无障碍使用指南 - VR42 本文的Netch是此文中方案4的Sstap替代品，sstap已经多年不更新了 【干货】Oculus quest 2电脑连接串流教程｜有线+无线_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili","categories":[{"name":"软件","slug":"软件","permalink":"http://ystyle.top/categories/软件/"}],"tags":[{"name":"quest2","slug":"quest2","permalink":"http://ystyle.top/tags/quest2/"},{"name":"工具","slug":"工具","permalink":"http://ystyle.top/tags/工具/"}]},{"title":"移植lua到鸿蒙 - 首个移植成功的编程语言","slug":"porting-Lua-to-openharmony","date":"2020-11-07T15:52:26.000Z","updated":"2020-11-07T15:52:26.000Z","comments":true,"path":"2020/11/07/porting-Lua-to-openharmony/","link":"","permalink":"http://ystyle.top/2020/11/07/porting-Lua-to-openharmony/","excerpt":"","text":"惯例先放hello world hello world 本项目地址: https://gitee.com/ystyle/lua 下载二进制文件 准备环境 安装 docker docker pull ystyle/open-harmony ps: 本文使用与鸿蒙系统一同编译的方法。 如果自己有本地环境，可以把lua项目放鸿蒙代码目录里(或者使用软接连) 下载lua官方代码123mkdir -p ~/code/ohos/cd ~/code/ohos/git clone https://github.com/lua/lua.git 编写BUILD.gn文件 因为要与系统一起编译， 为了方便，直接用替换掉示例的方法，这样就只需要写一个BUILD.gn就好了 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475# Copyright (c) 2020 YSTYLE(lxy5266@live.com)# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);# you may not use this file except in compliance with the License.# You may obtain a copy of the License at## http://www.apache.org/licenses/LICENSE-2.0## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.import(&quot;//build/lite/config/component/lite_component.gni&quot;)import(&quot;//build/lite/ndk/ndk.gni&quot;)static_library(&quot;hello_world&quot;) &#123; sources = [ &quot;lapi.c&quot;, &quot;lauxlib.c&quot;, &quot;lbaselib.c&quot;, &quot;lcode.c&quot;, &quot;lcorolib.c&quot;, &quot;lctype.c&quot;, &quot;ldblib.c&quot;, &quot;ldebug.c&quot;, &quot;ldo.c&quot;, &quot;ldump.c&quot;, &quot;lfunc.c&quot;, &quot;lgc.c&quot;, &quot;linit.c&quot;, &quot;liolib.c&quot;, &quot;llex.c&quot;, &quot;lmathlib.c&quot;, &quot;lmem.c&quot;, &quot;loadlib.c&quot;, &quot;lobject.c&quot;, &quot;lopcodes.c&quot;, &quot;loslib.c&quot;, &quot;lparser.c&quot;, &quot;lstate.c&quot;, &quot;lstring.c&quot;, &quot;lstrlib.c&quot;, &quot;ltable.c&quot;, &quot;ltablib.c&quot;, &quot;ltests.c&quot;, &quot;ltm.c&quot;, &quot;lua.c&quot;, &quot;lundump.c&quot;, &quot;lutf8lib.c&quot;, &quot;lvm.c&quot;, &quot;lzio.c&quot; ] include_dirs = [ &quot;include&quot;, ]&#125;lite_component(&quot;camera_app&quot;) &#123; target_type = &quot;executable&quot; features = [ &quot;:hello_world&quot;, ]&#125;ndk_lib(&quot;app_sample&quot;) &#123; deps = [ &quot;:hello_world&quot; ] head_files = [ &quot;include&quot; ]&#125; static_library里的source参照lua/makefile 编译脚本创建编译脚本build-ohos.sh文件 123cd ~/code/ohos/luatouch build-ohos.shchmod +x build-ohos.sh 文件内容如下1234567891011set -erm -rf ./out ./bindocker run --rm -ti \\ -e HARDWARE=ipcamera_hi3516dv300 \\ -v $&#123;PWD&#125;/out:/OpenHarmony/out \\ -v $&#123;PWD&#125;:/OpenHarmony/applications/sample/camera/app \\ ystyle/open-harmonymkdir -p ./bincp ./out/ipcamera_hi3516dv300/bin/camera_app ./bin/luatar -zcf lua-5.4.2-ohos.tar.gz ./binecho 'build success!' 与鸿蒙一起编译，这里使用我之前的docker镜像123cd ~/code/ohos/lua./build-ohos.sh# 看到 ohos ipcamera_hi3516dv300 build success! build success! 就编译成功了。 编译后软件在鸿蒙的 ./out/ipcamera_hi3516dv300/bin/camera_app脚本会把lua单独打包出来单独的lua可执行文件在bin目录 演示 io操作 官方测试用例1 官方测试用例2 官方测试用例3","categories":[{"name":"软件","slug":"软件","permalink":"http://ystyle.top/categories/软件/"}],"tags":[{"name":"鸿蒙","slug":"鸿蒙","permalink":"http://ystyle.top/tags/鸿蒙/"},{"name":"编程语言","slug":"编程语言","permalink":"http://ystyle.top/tags/编程语言/"},{"name":"lua","slug":"lua","permalink":"http://ystyle.top/tags/lua/"}]},{"title":"harl-鸿蒙应用开发实机热更新工具","slug":"harl","date":"2020-10-24T17:30:26.000Z","updated":"2020-10-24T17:30:26.000Z","comments":true,"path":"2020/10/24/harl/","link":"","permalink":"http://ystyle.top/2020/10/24/harl/","excerpt":"","text":"鸿蒙应用开发实机热更新工具 依赖 debug 版本的hi3516镜像(release版本不支持shell) nfs v3 配置过程 配置过程可能遇到的问题 serial(串口) dev tools (可以从鸿蒙编译目录/out/ipcamera_hi3516dv300/dev_tools/bin复制到nfs挂载目录) aa (管理APP启动，关闭) bm (安装卸载APP) USAGE12345678910111213141516171819202122➜ harl.exeNAME: harl - Open Harmony OS Dev toolsUSAGE: harl.exe [global options] command [command options] [arguments...]VERSION: v0.1.2COMMANDS: init, i init .harm.yml watch, w watch and reload app install install hap uninstall uninstall hap shell open a shell reboot reboot help, h Shows a list of commands or help for one commandGLOBAL OPTIONS: --help, -h show help (default: false) --version, -v print the version (default: false) 下载应用 cd /your-project-dir 切换到项目目录 harl init 初始化配置文件 harl w 监听项目文件修改 监听时支持输入命令, 若看不到提示符请在调试日志暂停打印时按回车 可以用^run [command name]的方式执行command里定义的脚本 如执行示例配置文件的setup脚本， ^run setup 目前命令只支持在项目目录执行 配置文件 .harl.yaml123456789101112131415161718192021222324252627282930watch: # 监听文件修改并自动编译、安装的参数 excludes: # 排除的文件 - .gradle - .idea - gradle - entry/build - entry/node_modules includes: # 监听的文件类型 - .css - .hml - .js - .hap - .json delay: 100 # 监听频率，单位msnfs: # nfs 配置 ldir: H:/bin # 本地nfs挂载目录 rdir: /nfs # 远程nfs(开发板)挂载目录shell: # 开发板连接参数 com: COM5 # 串口号command: # 定义常用命令, 在shell或watch里可执行 setup: # 命令执行方式: ^run setup - dhclient eth0 # 命令一行一个, 顺序执行错误不会中断 - mkdir /nfs - mount 192.168.3.12:/nfsshare /nfs nfs kill: # 关闭应用 - cd /nfs - ./aa terminate -p top.ystyle.ohos.js.testapp start: # 启动应用 - cd /nfs - ./aa start -p top.ystyle.ohos.js.testapp -n default 支持情况 只支持windows 只测试过liteWearable项目改的smartVision 只在hi3516d上测试过","categories":[{"name":"软件","slug":"软件","permalink":"http://ystyle.top/categories/软件/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://ystyle.top/tags/工具/"},{"name":"鸿蒙","slug":"鸿蒙","permalink":"http://ystyle.top/tags/鸿蒙/"}]},{"title":"使用Docker快速上手鸿蒙","slug":"compile-openharmony-indokcer","date":"2020-09-10T17:00:26.000Z","updated":"2020-12-25T08:40:26.000Z","comments":true,"path":"2020/09/10/compile-openharmony-indokcer/","link":"","permalink":"http://ystyle.top/2020/09/10/compile-openharmony-indokcer/","excerpt":"","text":"准备 在机器上安装好Docker 编译鸿蒙系统镜像 打开终端执行以下命令 123mkdir ~/OpenHarmonycd ~/OpenHarmonydocker run --rm -ti -v $&#123;PWD&#125;/out:/OpenHarmony/out ystyle/open-harmony 编译成功后各镜像在out目录下面, 默认编译的是Hi3861开发板的系统镜像, 可自行烧录到固定测试 如果要编译其它板子可以设置dokcer镜像的环境变量HARDWARE 目前支持: wifiiot、ipcamera_hi3516dv300、ipcamera_hi3518ev300 更新代码并编译12345mkdir ~/OpenHarmonycd ~/OpenHarmonydocker run --rm -ti -e HARDWARE=ipcamera_hi3516dv300 -v $&#123;PWD&#125;/out:/OpenHarmony/out ystyle/open-harmony bashrepo sync -cpython build.py $&#123;HARDWARE&#125; -b debug 编写应用程序 示例在这Hi3861开发板第二个示例程序 创建一个代码目录: my_first_app 新建文件hello_world.c 12345678#include \"ohos_init.h\"#include \"ohos_types.h\"void HelloWorld(void)&#123; printf(\"[DEMO] Hello world.\\n\");&#125;SYS_RUN(HelloWorld); 新建文件BUILD.gn 12345678static_library(\"myapp\") &#123; sources = [ \"hello_world.c\" ] include_dirs = [ \"//utils/native/liteos/include\" ]&#125; 新建文件APP_BUILD.gn 1234567import(\"//build/lite/config/component/lite_component.gni\")lite_component(\"app\") &#123; features = [ \"my_first_app:myapp\", ]&#125; 现在的目录结构为 1234.├── APP_BUILD.gn├── BUILD.gn└── hello_world.c 编译代码123456docker run --rm \\ -e HARDWARE=wifiiot \\ -v $&#123;PWD&#125;/out:/OpenHarmony/out \\ -v $&#123;PWD&#125;/APP_BUILD.gn:/OpenHarmony/applications/sample/wifi-iot/app/APP_BUILD.gn \\ -v $&#123;PWD&#125;:/OpenHarmony/applications/sample/wifi-iot/app/my_first_app \\ ystyle/open-harmony 编译后的文件在out目录123456.├── APP_BUILD.gn├── BUILD.gn├── hello_world.c└── out └── wifiiot 其它问题 如果实际开发，建议直接替换掉 整个/OpenHarmony/applications/sample/wifi-iot/app/ 目录, 目录里边的都是示例代码. 如果要修改启动编译的命令的话，可以写好shell 脚本， run时指定cmd命令 构建命令为: python build.py ${HARDWARE} -b debug docker run --rm -v ${PWD}/mybuild.sh:/OpenHarmony/mybuild.sh ystyle/open-harmony /OpenHarmony/mybuild.sh 更新鸿蒙代码: 用修改镜像启动命令的方法，在/OpenHarmony目录执行repo sync -c 命令 其它驱动开发或系统组件开发也可以用挂载的方式把工程目录映射到容器，开发并编译 本文所使用Docker镜像的dockerfile文件 参考@keithyau所写的Dockerfile修改而来 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192FROM ubuntu:20.04 AS build-envLABEL version=2020-10-15# Set your hardwareENV HARDWARE=wifiiot# Prevent interactiveENV DEBIAN_FRONTEND=noninteractive# Setting up the build environmentRUN sed -i 's/archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list &amp;&amp; \\ sed -i 's/security.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list &amp;&amp; \\ apt-get clean -y &amp;&amp; \\ apt-get -y update &amp;&amp; \\ apt-get remove python* -y &amp;&amp; \\ apt-get install git curl build-essential libdbus-glib-1-dev libgirepository1.0-dev -y &amp;&amp; \\ apt-get install zip libncurses5-dev pkg-config -y &amp;&amp; \\ apt-get install python3-pip -y &amp;&amp; \\ apt-get install scons dosfstools mtools mtd-utils default-jdk default-jre -y &amp;&amp; \\ rm -rf /var/lib/apt/lists/*# Setup python# Make sure python install on the right python version pathRUN update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1 &amp;&amp; \\ pip3 install --upgrade pip -i https://mirrors.aliyun.com/pypi/simple &amp;&amp; \\ pip3 install ninja kconfiglib pycryptodome ecdsa -i https://mirrors.aliyun.com/pypi/simple &amp;&amp; \\ pip3 install six --upgrade --ignore-installed six -i https://pypi.tuna.tsinghua.edu.cn/simple &amp;&amp; \\ rm -rf /var/cache/apt/archives#Fix DashRUN rm -rf /bin/sh &amp;&amp; \\ ln -s /bin/bash /bin/sh#Setup gnENV PATH /tools/gn:$PATHRUN mkdir /tools &amp;&amp; \\ cd /tools &amp;&amp; \\ curl -LO https://repo.huaweicloud.com/harmonyos/compiler/gn/1523/linux/gn.1523.tar &amp;&amp; \\ tar xvf /tools/gn.1523.tar &amp;&amp; \\ rm -rf /tools/gn.1523.tar#Setup LLVM#ADD ./llvm-linux-9.0.0-34042.tar /toolsENV PATH /tools/llvm/bin:$PATHRUN cd /tools &amp;&amp; \\ curl -LO https://repo.huaweicloud.com/harmonyos/compiler/clang/9.0.0-34042/linux/llvm-linux-9.0.0-34042.tar &amp;&amp; \\ tar xvf /tools/llvm-linux-9.0.0-34042.tar &amp;&amp; \\ rm -rf /tools/llvm-linux-9.0.0-34042.tar#Setup hc-genENV PATH /tools/hc-gen:$PATHRUN cd /tools &amp;&amp; \\ curl -LO https://repo.huaweicloud.com/harmonyos/compiler/hc-gen/0.65/linux/hc-gen-0.65-linux.tar &amp;&amp; \\ tar xvf /tools/hc-gen-0.65-linux.tar &amp;&amp; \\ rm -rf /tools/hc-gen-0.65-linux.tar #Setup hmos_app_packing_tool and hapsigntool // 必需是这目录，编译脚本写死了ENV PATH /root/developtools/:$PATHRUN mkdir /root/developtools/ &amp;&amp; cd /root/developtools/ &amp;&amp; \\ curl -LO https://repo.huaweicloud.com/harmonyos/develop_tools/hmos_app_packing_tool.jar &amp;&amp; \\ curl -LO https://repo.huaweicloud.com/harmonyos/develop_tools/hapsigntoolv2.jar#Setup gcc_riscv32ENV PATH /tools/gcc_riscv32/bin:$PATHRUN cd /tools &amp;&amp; \\ curl -LO http://tools.harmonyos.com/mirrors/gcc_riscv32/7.3.0/linux/gcc_riscv32-linux-7.3.0.tar.gz &amp;&amp; \\ tar xvf /tools/gcc_riscv32-linux-7.3.0.tar.gz &amp;&amp; \\ rm -rf /tools/gcc_riscv32-linux-7.3.0.tar.gz#Create work dirRUN mkdir /OpenHarmonyWORKDIR /OpenHarmony# Gitee Repo tool and download# Make sure requests install at the right locationRUN curl https://gitee.com/oschina/repo/raw/fork_flow/repo-py3 &gt; /usr/bin/repo &amp;&amp; \\ chmod a+x /usr/bin/repo &amp;&amp; \\ pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple requests#Download source, update to your infoRUN git config --global user.email \"lxy5266@live.com\" &amp;&amp; \\ git config --global user.name \"ystyle\" &amp;&amp; \\ git config --global color.ui false &amp;&amp; \\ git config --global credential.helper store &amp;&amp; \\ repo init -u https://gitee.com/openharmony/manifest.git -b master --repo-branch=stable --no-repo-verify &amp;&amp; \\ repo sync -c# compileENV LANGUAGE enENV LANG en_US.utf-8RUN export|grep LANGCMD [\"/bin/bash\", \"-c\", \"python build.py $&#123;HARDWARE&#125; -b debug\"]","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://ystyle.top/tags/docker/"},{"name":"鸿蒙","slug":"鸿蒙","permalink":"http://ystyle.top/tags/鸿蒙/"}]},{"title":"转换在线漫画为mobi格式","slug":"comic-cli","date":"2020-09-04T04:46:26.000Z","updated":"2020-09-04T04:46:26.000Z","comments":true,"path":"2020/09/04/comic-cli/","link":"","permalink":"http://ystyle.top/2020/09/04/comic-cli/","excerpt":"","text":"转换在线漫画为mobi格式的工具 支持的网站 动漫之家 喵同人 使用方法 必需安装谷歌浏览器chrome 下载comic-cli: https://pan.baidu.com/s/1EPkLJ7WIJYdYtRHBEMqw0w, 提取码:h4np 新建一个文件文件 1234567891011121314# 注释: 以#号或//开头的行会被忽略，空行也会被忽略// 本文件会生成三个漫画文件// 下载整个动漫，直接写列表地址https://www.dmzj.com/info/wodenvpengyouyoudianqiguaidanshihenkeai.html// 也可以载指定的章节，填写需要下载的章节地址，同一漫画的章节会合并成同一个文件https://www.dmzj.com/view/benghuai3rd/102129.html#@page=1https://www.dmzj.com/view/benghuai3rd/101570.html// 这行地址的章节会被忽略# https://www.dmzj.com/view/benghuai3rd/101013.html// 喵同人网站的写列表地址就好了https://zh.nyahentai.site/g/326699/ 然后把文件拖到comic-cli里边就会自动把漫画转为mobi格式 如果没有生成则把kindlegen.exe放到c:/windows里再试试 图文教程 目前存在的问题 转换工程文件到mobi格式时，可能失败，kindlegen没输出原因和错误内容，目前无法解决， 只能多次重试了。 其它工具 txt文件转epub和mobi的工具TmdTextEpub和kaf 喵同人在线转换为mobi格式hcc","categories":[{"name":"软件","slug":"软件","permalink":"http://ystyle.top/categories/软件/"}],"tags":[{"name":"kindle","slug":"kindle","permalink":"http://ystyle.top/tags/kindle/"},{"name":"mobi","slug":"mobi","permalink":"http://ystyle.top/tags/mobi/"},{"name":"漫画","slug":"漫画","permalink":"http://ystyle.top/tags/漫画/"}]},{"title":"Linux kde文件管理器连接华为Share","slug":"kde-dolphin-smb","date":"2020-09-03T02:46:26.000Z","updated":"2020-09-03T02:46:26.000Z","comments":true,"path":"2020/09/03/kde-dolphin-smb/","link":"","permalink":"http://ystyle.top/2020/09/03/kde-dolphin-smb/","excerpt":"","text":"华为手机设置 打开华为Share 长按华为Share图标进入华为分享 打开共享至电脑选项 Linux 设置 检查文件夹没有就创建一个 12mkdir ~/.smbvim ~/.smb/smb.conf 然后在文件填写 12[global]client min protocol = NT1 打开Dolphin 选择网络在文件管理地址栏填写手机ip: smb://192.168.3.129 回车 在弹窗填写用户名和密码 右键添加到标签(下次直接在标签点击就能访问了) 访问华为Share 修改标签名称","categories":[{"name":"软件","slug":"软件","permalink":"http://ystyle.top/categories/软件/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://ystyle.top/tags/linux/"},{"name":"kde","slug":"kde","permalink":"http://ystyle.top/tags/kde/"},{"name":"华为Share","slug":"华为Share","permalink":"http://ystyle.top/tags/华为Share/"},{"name":"Samba","slug":"Samba","permalink":"http://ystyle.top/tags/Samba/"}]},{"title":"Dokcer编译方舟引擎（MapleEngine）","slug":"dokcer-compile-maple-engine","date":"2020-07-21T02:46:26.000Z","updated":"2020-08-06T07:08:26.000Z","comments":true,"path":"2020/07/21/dokcer-compile-maple-engine/","link":"","permalink":"http://ystyle.top/2020/07/21/dokcer-compile-maple-engine/","excerpt":"","text":"文档 方舟引擎发布公告 官方文档 - 方舟引擎编译说明 官方文档 - 构建Java 核心库 Docker 文件 复制到方舟引擎代码根目录, 文件名为Dockerfile 123456789101112131415161718192021222324252627282930FROM ubuntu:16.04MAINTAINER https://www.openarkcompiler.cn# Setting up the build environmentRUN sed -i 's/archive.ubuntu.com/mirrors.163.com/g' /etc/apt/sources.list &amp;&amp; \\ apt-get -y update &amp;&amp; \\ apt install --no-install-recommends -y build-essential git wget clang cmake libffi-dev libelf-dev libunwind-dev \\ libssl-dev openjdk-8-jdk-headless unzip python-minimal python3 curl &amp;&amp; \\ rm -rf /var/lib/apt/lists/*# 在国内请反注释下行, 因为容器也是个单独的系统，所以别用127.0.0.1#ENV http_proxy=http://192.168.3.81:1081 \\ # https_proxy=http://192.168.3.81:1081# copy sourceCOPY . /maple_engineWORKDIR /maple_engine# custom java/lang/Object.javaRUN cd /maple_engine/maple_build/jar/ &amp;&amp; \\ bash -c \"cp /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/&#123;rt.jar,jce.jar,jsse.jar,charsets.jar&#125; . \" &amp;&amp; \\ mkdir -p java/lang/ &amp;&amp; \\ curl -L http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/raw-file/jdk8u265-b01/src/share/classes/java/lang/Object.java &gt; java/lang/Object.java &amp;&amp; \\ sed -i '/public class Object &#123;/a\\long reserved_1; int reserved_2;' java/lang/Object.java &amp;&amp; \\ javac -target 1.8 -g java/lang/Object.java &amp;&amp; \\ jar uf rt.jar java/lang/Object.class &amp;&amp; \\ rm -rf java# compileRUN bash -c \"source ./envsetup.sh &amp;&amp; ./maple_build/tools/build-maple.sh &amp;&amp; ./maple_build/tools/build-libcore.sh &amp;&amp; rm -rf /maple_engine/maple_build/out/*\" 编译方舟引擎 方舟编译器，也会一起编译，注意： 编译libjava时会占用25G左右的内存，不足25G建议添加swap分区 本人机器是16G内存，20G的SSD swap分区 1docker build -t ystyle/maple-engine . 编译占用 测试 镜像已经推送到docker hub, 可以直接使用下面的镜像编译hello world或其它软件 12345678910docker run --rm -ti ystyle/maple-engine bash# 设置基础环境source ./envsetup.sh# 编译java hello worldcd ./maple_build/examples/HelloWorld$MAPLE_BUILD_TOOLS/java2asm.sh HelloWorld.java# 生成把.s文件编译为.so$MAPLE_BUILD_TOOLS/asm2so.sh HelloWorld.s# 运行软件$MAPLE_BUILD_TOOLS/run-app.sh -classpath ./HelloWorld.so HelloWorld 编译执行结果 调试应用程序 方舟多语言调试器介绍 方舟多语言调试器项目说明 方舟多语言调试器用户手册 123456789101112docker run --rm -ti ystyle/maple-engine:gdb bash# 设置jdk源码路径 $JDK_SRC 为本地的openjdk源码# docker run --rm -ti -v $&#123;JDK_SRC&#125;:/root/my_openjdk8/jdk/src/ ystyle/maple-engine:gdb bash# 设置基础环境source ./envsetup.sh# 编译java hello worldcd ./maple_build/examples/HelloWorld$MAPLE_BUILD_TOOLS/java2asm.sh HelloWorld.java# 生成把.s文件编译为.so$MAPLE_BUILD_TOOLS/asm2so.sh HelloWorld.s# 调试应用程序&quot;$MAPLE_BUILD_TOOLS&quot;/run-app.sh -gdb -classpath ./HelloWorld.so HelloWorld","categories":[{"name":"软件","slug":"软件","permalink":"http://ystyle.top/categories/软件/"}],"tags":[{"name":"编译器","slug":"编译器","permalink":"http://ystyle.top/tags/编译器/"},{"name":"方舟","slug":"方舟","permalink":"http://ystyle.top/tags/方舟/"},{"name":"方舟多语言调试器","slug":"方舟多语言调试器","permalink":"http://ystyle.top/tags/方舟多语言调试器/"}]},{"title":"Windows右键菜单添以Window Terminal命令行打开文件","slug":"open-file-with-windows-terminal-command","date":"2020-05-31T14:11:48.000Z","updated":"2020-05-31T14:11:48.000Z","comments":true,"path":"2020/05/31/open-file-with-windows-terminal-command/","link":"","permalink":"http://ystyle.top/2020/05/31/open-file-with-windows-terminal-command/","excerpt":"","text":"应用场景: 在文件右键打开windows terminal， 并在执行的命令中以选择的文件为参数运行。 本示例为在windows terminal使用micro编辑器打开选中文件 先创建一个右键菜单项1234567Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\\*\\shell\\Open with Micro]&quot;Icon&quot;=&quot;E:\\\\Code\\\\Go\\\\bin\\\\micro-logo-mark.ico&quot;[HKEY_CLASSES_ROOT\\*\\shell\\Open with Micro\\command]@=&quot;C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\wt.exe new-tab -p \\&quot;Windows PowerShell\\&quot; micro.exe \\&quot;%1\\&quot;&quot; 键的说明 [HKEY_CLASSES_ROOT\\*\\shell\\Open with Micro] 中的 Open with Micro为右键菜单名 Icon 是右键菜单项的图标 command 里的是菜单项点击后要执行的命令 wt.exe new-tab -p \\&quot;Windows PowerShell\\&quot; micro.exe &#39;%1&#39; wt 必需要写全路径，不写会弹出【选择打开文件需要的应用】那个窗口 new-tab 是打开一个新的windows terminal 页签(不过在我电脑会打开新的一个应用实例) -p \\&quot;Windows PowerShell\\&quot; 是新页签需要用的的shell，可以是windows terminal的配置中的 name或guid micro.exe \\&quot;%1\\&quot; 是需要执行的命令， \\&quot;%1\\&quot;是当前右键的文件占位符 效果","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"windows","slug":"windows","permalink":"http://ystyle.top/tags/windows/"},{"name":"Window Terminal","slug":"Window-Terminal","permalink":"http://ystyle.top/tags/Window-Terminal/"}]},{"title":"uTorrent BT软件入门","slug":"getting-start-utorrent","date":"2020-04-25T14:36:26.000Z","updated":"2020-04-25T14:36:26.000Z","comments":true,"path":"2020/04/25/getting-start-utorrent/","link":"","permalink":"http://ystyle.top/2020/04/25/getting-start-utorrent/","excerpt":"","text":"软件设置并不能解决百分百的问题，BT是有死链的概念的，这种怎么设置都无法下载，还有些冷门内容速度慢是无法解决的，但大家可以尽量少用讯雷下载。 讯雷p2p只上传给自己的服务器，别的下载工具得不到p2p加速，并且还免费给讯雷做下载点 如果遇到喜欢的资源，想让更多的人知道、下载就多给种子挂【做种】吧，下载完后默认就开了的，建议分享率大于1时再关，有条件的可以一直挂着 全局设置 连接设置 监听端口部分照着设置就行 代理服务器: 代理ip和端口看你用的代理工具，要勾上使用代理进行主机名查询 任务设置 DHT和UDP tracker一定要勾上 传出连接选择强制, 去掉[允许传入旧式中接] 建议按我的设置 去广告 把以下设置为false offers.sponsored_torrent_offer_enabled offers.left_rail_offer_enabled gui.show_plus_upsell 下载任务设置 主要是开DHT,和设置tracker, DHT开在连接上面的任务里说过了 Tracker是什么 一般下载文件是用http/ftp/smb协议的域名或ip来明确指向文件存放在哪个IP的服务器上， 但BT是用识别码来标识文件，而没有明确的文件地址。 所以为了找到文件就需要有一个机制来确定目标文件在哪些机器上能下载到。 DHT和Tracker服务器都能做到文件寻址。 DHT: 是内嵌在BT软件里边的，会和电脑能识别并能连接上的BT网络进行数据交换和查询，从而找到文件需要到哪个IP去下载。 Tracker: 是运行在别人搭建好的服务器上，你只需要在下载时填写别人提供的Tracker连接就好了，BT软件会连接服务器进行文件查询并取到下载文件的IP地址 设置Tracker 在任务上右键-属性 打开https://github.com/ngosang/trackerslist 把 trackers_best_ip.txt 或 trackers_all.txt 的内容复制到tracker里 trackers_best_ip 如果部分tracker被墙了域名，可以用这个试试 trackers_all 一般是域名的，如果墙了域名的可能连接不上，破解方法在上面 【全局设置 - 连接设置 - 设置代理】 终极方法是启用全局代理，但梯子月费比较贵，流量也少，所以以上都用不了时才开来下载 一般是勾上了DHT的，没有勾的，自行勾上 制作种子或磁力链接 点击文件-制作新的torrent 或 工具栏 箭头那个图标 在选择源添加文件或目录 有必要时在Tracker里添加新的链接 勾选【开始做种】， 默认已经选上 点创建，选择种子保存位置， 这种子可以发给别人 生成磁力链接: 在【做种中】界面 右键任务 - 【复制Magnet链接】 边下边播功能 选择正在下载的任务 在下面板选择文件 在下载中的文件右键复制串流地址 打开其它支持播放url的播放器 打开这网址，就能实现边下边播放的功能了","categories":[{"name":"软件","slug":"软件","permalink":"http://ystyle.top/categories/软件/"}],"tags":[{"name":"uTorrent","slug":"uTorrent","permalink":"http://ystyle.top/tags/uTorrent/"},{"name":"BT","slug":"BT","permalink":"http://ystyle.top/tags/BT/"}]},{"title":"Windows Terminal 添加SSH到Tabs里","slug":"add-ssh-command-to-windows-terminal-tab","date":"2020-03-15T06:46:26.000Z","updated":"2020-03-15T06:46:26.000Z","comments":true,"path":"2020/03/15/add-ssh-command-to-windows-terminal-tab/","link":"","permalink":"http://ystyle.top/2020/03/15/add-ssh-command-to-windows-terminal-tab/","excerpt":"","text":"注意替换路径 用git-bash带的SSH 命令一定要用转义的双引号包起来, key的路径用git bash的路径方式，没key的话，删掉-i后面的就好，但每次都要输入密码. key登陆百度搜索SSH免密登陆 12345678910111213&#123; \"guid\": \"&#123;43d5c880-802b-42c7-aeaf-21b112a3569b&#125;\", \"name\": \"腾讯云\", \"icon\":\"E:\\\\Images\\\\tx.ico\", \"commandline\": \"E:\\\\Application\\\\Git\\\\bin\\\\bash.exe -c \\\"ssh ubuntu@140.143.205.68 -i /e/Code/Docker/tx.key\\\"\", \"useAcrylic\":true, \"acrylicOpacity\": 0.75, \"backgroundImage\" : \"E:\\\\Images\\\\壁纸\\\\03.jpg\", \"backgroundImageOpacity\" : 0.5, \"startingDirectory\": \"./\", \"scrollbarState\": false, \"hidden\": false&#125; 用Power Shell自带的SSH 基本是一样的，但key的目录必需在当前用户的主目录下，路径是windwos的标准格式 123456789101112131415&#123; // Make changes here to the powershell.exe profile \"guid\": \"&#123;61c54bbd-c2c6-5271-96e7-009a87ff44ba&#125;\", \"name\": \"腾讯云\", \"icon\":\"E:\\\\Images\\\\tx.ico\", \"commandline\": \"powershell.exe -c \\\"ssh ubuntu@140.143.205.68 -i C:/Users/Administrator/tx.key\\\"\", \"useAcrylic\":true, \"acrylicOpacity\": 0.75, \"backgroundImage\" : \"E:\\\\Images\\\\壁纸\\\\03.jpg\", \"backgroundImageOpacity\" : 0.5, \"startingDirectory\": \"./\", \"scrollbarState\": false, \"background\": \"#0000FF\", \"hidden\": false&#125; 添加右键菜单-在任意地方打开Window Terminal 图标下载 12345678Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt]@=&quot;Windows Terminal here&quot;&quot;Icon&quot;=&quot;\\&quot;E:\\\\Images\\\\terminal.ico\\&quot;&quot;[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt\\command]@=&quot;C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\wt.exe&quot; 效果预览","categories":[{"name":"软件","slug":"软件","permalink":"http://ystyle.top/categories/软件/"}],"tags":[{"name":"SSH","slug":"SSH","permalink":"http://ystyle.top/tags/SSH/"},{"name":"terminal","slug":"terminal","permalink":"http://ystyle.top/tags/terminal/"}]},{"title":"KDE添加右键菜单","slug":"add-custom-context-menu-to-kde-dolphin","date":"2020-02-21T07:11:48.000Z","updated":"2020-02-21T07:11:48.000Z","comments":true,"path":"2020/02/21/add-custom-context-menu-to-kde-dolphin/","link":"","permalink":"http://ystyle.top/2020/02/21/add-custom-context-menu-to-kde-dolphin/","excerpt":"","text":"文件存放位置 位置 $HOME/.local/share/kservices5/ /usr/share/kservices5/ 文件后缀: .desktop 示例1234567891011[Desktop Entry]Actions=OptimisePNG;MimeType=image/png;Type=ServiceX-KDE-ServiceTypes=KonqPopupMenu/PluginIcon=tools-wizard.png[Desktop Action OptimisePNG]Name=Optimise PNG ImageIcon=tools-wizard.pngExec=optipng -o7 %f 说明 [Desktop Entry] Actions: 在该菜单中的菜单项，多个用英文分号隔开 MimeType: 在指定的文件类型中启动该菜单 inode/directory 在目录中启用 image/png 只在png图片启用 all/allfiles在所有文件中启用（不包括文件夹） image/allfiles 在所有图片启用 Type=Service: 表示服务，不会在开始菜单中显示， 改为Application表示应用，会显示在开始菜单 X-KDE-ServiceTypes=KonqPopupMenu/Plugin: 只在kde中支持， 表示显示在右键-动作下边 X-KDE-Priority=TopLevel 表示显示在顶级菜单中，右键直接显示 Icon Type=Service 时图标不会显示 [Desktop Action OptimisePNG] OptimisePNG为自定义的动作，填写在上边的Actions里 Name菜单项名称 Icon菜单显示图标 Exec点击菜单时执行的命令 %f 文件列表。用于可一次打开多个本地文件的应用程序。每个文件都作为单独的参数传递给可执行程序。 %F 即使选择了多个文件，也只有一个文件名（包括路径）。读取桌面条目的系统应认识到所讨论的程序无法处理多个文件参数，并且如果该程序无法处理其他文件参数，则应该为每个选定文件生成并执行该程序的多个副本。如果文件不在本地文件系统上（即，在HTTP或FTP位置），则文件将被复制到本地文件系统，%f并将展开以指向临时文件。用于不了解URL语法的程序。 [Desktop Action XXXX] 的条目在一个文件中可以有多个 如果新建无误后显示不出来的话， 执行一下kbuildsycoca5如果有错误会有提示`","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://ystyle.top/tags/linux/"},{"name":"kde","slug":"kde","permalink":"http://ystyle.top/tags/kde/"}]},{"title":"txt小说转epub与mobi","slug":"txt-converto-epub-and-mobi","date":"2019-12-31T05:02:49.000Z","updated":"2021-04-13T05:02:49.000Z","comments":true,"path":"2019/12/31/txt-converto-epub-and-mobi/","link":"","permalink":"http://ystyle.top/2019/12/31/txt-converto-epub-and-mobi/","excerpt":"","text":"把txt文本转成epub、mobi电子书的工具, 支持电脑和安卓APP。 下载 电脑版kaf-cli: Github下载 手机版kaf: Github下载 原服务器已过期，新的服务器地址为: ws://kas.ystyle.top/ws 电脑版wifi传书kaf-wifi: Github下载 全部软件 百度网盘下载 https://pan.baidu.com/s/1EPkLJ7WIJYdYtRHBEMqw0w?pwd=h4np Archlinux 可以在aur上安装 yay -S kaf-cli kaf-wifi 功能 功能 kaf-cli KAF 支持平台 windows、linux、mac Android 自动识别书名和章节 支持 支持 自定义封面 支持 自动识别字符编码(自动解决中文乱码) 支持 支持 自动给章节正文生成加粗居中的标题 支持 支持 段落自动识别 支持 支持 段落自动缩进 支持 支持 自定义书名作者 支持 支持 自定义章节标题识别规则 支持 支持 自定义章节标题对齐方式 支持 支持 自定义段落缩进字数 支持 支持 自定义段落间距 支持 自定义书籍语言 支持 支持 WIFI传书 kaf-wifi电脑版 支持 使用方法 电脑版 解压, 把小说直接拖到 kaf-cli.exe 文件上面 等转换完，目录下会生成epub、azw3、mobi文件 mobi格式需要有kindlegen才会生成(windows、mac版本已经自带) 自定义封面功能在拖拽模式下, 如果目录下有cover.png文件会自动添加为封面、支持jpg、png格式， 如果需要指定其它文件或jpg格式需要使用命令行模式 其它自定义功能请用命令行模式 安卓版 效果 异常生物见闻录 命令行模式命令行全部参数为：12345678910111213141516171819202122232425Usage of kaf-cli.exe: -align string 标题对齐方式: left、center、righ (default \"center\") -author string 作者 (default \"YSTYLE\") -bookname string 书名: 默认为txt文件名 -bottom string 段落间距(单位可以为em、px) (default \"1em\") -cover string 封面图片 (default \"cover.png\") -filename string txt 文件名 -format string 书籍格式: both、epub、mobi (default \"both\") -indent uint 段落缩进字数 (default 2) -lang string 设置语言: en,de,fr,it,es,zh,ja,pt,ru,nl。 支持使用环境变量KAF-CLI-LANG设置 (default \"zh\") -match string 匹配标题的正则表达式, 不写可以自动识别, 如果没生成章节就参考教程。例: -match 第.&#123;1,8&#125;章 表示第和章字之间可以有1-8个任意文字 (default \"自动匹配,可自定义\") -max uint 标题最大字数 (default 35) -tips 添加本软件教程 (default true) PS: 在darwin(mac)上-tips参数要设置为false的方法 kaf-cli -filename 小说.txt -tips=0 命令行模式说明转换全职法师.txt, 并设置作者名为乱1234567891011121314# windows 10: win + s 搜索powershell cd d:/d:/kaf-cli.exe -author 乱 -filename d:/全职法师.txt# linux / mac下, 把kaf-cli-linux/kaf-cli-darwin重命名为kaf-cli, 放到用户目录# 把小说和kaf-cli放到用户目录下, 打开终端执行cd ~./kaf-cli -author 乱 -filename ./全职法师.txt# 如果kaf-cli放到path里了, 或者在aur安装的可以执行:kaf-cli -author 乱 -filename ~/全职法师.txt# 命令行的简单模式（功能和拖拽模式一样）kaf-cli ~/全职法师.txt 自定义章节匹配规则 以下全部示例都可以自动识别，不需要自己设定标题格式了， 一般用上用上面的例子就行了 规则支持正则表达式， 要自定义标题格式参考以下几个例子, 以下例子小说都在D盘 自定义章节匹配, 章节格式为第x节:1d:/kaf-cli.exe -filename d:/ebbok.txt -match \"第.&#123;1,8&#125;节\" 自定义章节匹配, 章节格式为Section 1 ~ Section 100:1d:/kaf-cli.exe -filename d:/ebbok.txt -match \"Section \\d+\" 自定义章节匹配, 章节格式为Chapter xxx:1d:/kaf-cli.exe -filename d:/ebbok.txt -match \"Chapter .&#123;1,8&#125;\" 在任意位置执行命令 windows 把kaf-cli.exe 和 kindlegen.exe 放c:/windows/下边 以后可以把小说放任意目录，都可以很简单执行转换， 第一步只需要做一次， 以下为每次转换小说的操作， 打开小说在的文件夹, 按住Shift键不放，鼠标右击文件夹空白位置 在右键菜单选择 用命令行打开 或 以PowerShell打开 以上命令可以改为 kaf-cli.exe -filename 全职法师.txt, 现在可以不用写盘符了 linux(理论上mac也可以是这样的) 软件可以放任意地方, 比如~/application/kaf-cli，在~/.bashrc 或 ~/.zshrc 最后一行添加 export PATH=$HOME/application:$PATH 打开终端, 执行命令为: kaf-cli -filename ~/全职法师.txt 手动把书转为kindle的mobi格式 新版如果检测到有kindlegen程序时会自动转为mobi 下载kindlegen (github备份，官网已经不提供下载) 同样放到d:盘根目录下， 把epub拖拽到kindlegen.exe上面， 或执行以下命令转换, 参数-dont_append_source 可以减少大概一半的mobi文件大小 12cd d:/d:/kindlegen.exe -dont_append_source d:/全职法师.epub 在d盘就能找到mobi文件，复制到kindle的documents目录下，打开kindle就能看到小说了","categories":[{"name":"软件","slug":"软件","permalink":"http://ystyle.top/categories/软件/"}],"tags":[{"name":"小说","slug":"小说","permalink":"http://ystyle.top/tags/小说/"},{"name":"kindle","slug":"kindle","permalink":"http://ystyle.top/tags/kindle/"},{"name":"epub","slug":"epub","permalink":"http://ystyle.top/tags/epub/"},{"name":"mobi","slug":"mobi","permalink":"http://ystyle.top/tags/mobi/"},{"name":"kaf-cli","slug":"kaf-cli","permalink":"http://ystyle.top/tags/kaf-cli/"}]},{"title":"嵌入式数据库storm的使用","slug":"how-to-use-storm-db","date":"2019-12-22T06:46:26.000Z","updated":"2023-10-16T08:04:08.520Z","comments":true,"path":"2019/12/22/how-to-use-storm-db/","link":"","permalink":"http://ystyle.top/2019/12/22/how-to-use-storm-db/","excerpt":"","text":"storm是一个使用BoltDB的上层orm框架 地址: 数据查看工具: https://github.com/br0xen/boltbrowser 驱动: https://github.com/asdine/storm 初始化12db, err := storm.Open(\"my.db\")defer db.Close() 定义对象模型1234567type User struct &#123; ID int // primary key Group string `storm:\"index\"` // this field will be indexed Email string `storm:\"unique\"` // this field will be indexed with a unique constraint Name string // this field will not be indexed Age int `storm:\"index\"`&#125; 自增可以在主键上添加tag: storm:&quot;id,increment=2&quot; =2是自增步长 保存数据123456789101112131415user := User&#123; ID: 10, Group: \"staff\", Email: \"john@provider.com\", Name: \"John\", Age: 21, CreatedAt: time.Now(),&#125;err := db.Save(&amp;user)// err == niluser.ID++err = db.Save(&amp;user)// err == storm.ErrAlreadyExists 修改12345// Update multiple fieldserr := db.Update(&amp;User&#123;ID: 10, Name: \"Jack\", Age: 45&#125;)// Update a single fielderr := db.UpdateField(&amp;User&#123;ID: 10&#125;, \"Age\", 0) 删除数据1err := db.DeleteStruct(&amp;user) 表管理操作 初始化索引 err := db.Init(&amp;User{}) 重建索引: err := db.ReIndex(&amp;User{}) 删表: err := db.Drop(&amp;User) 或 err := db.Drop(&quot;User&quot;) 简单查询12345678910111213141516171819202122232425262728293031323334353637383940var user Usererr := db.One(\"Email\", \"john@provider.com\", &amp;user)// err == nilerr = db.One(\"Name\", \"John\", &amp;user)// err == nilerr = db.One(\"Name\", \"Jack\", &amp;user)// err == storm.ErrNotFound// Fetch multiple objectsvar users []Usererr := db.Find(\"Group\", \"staff\", &amp;users)// Fetch all objectsvar users []Usererr := db.All(&amp;users)// Fetch all objects sorted by indexvar users []Usererr := db.AllByIndex(\"CreatedAt\", &amp;users)// Fetch a range of objectsvar users []Usererr := db.Range(\"Age\", 10, 21, &amp;users)// Fetch objects by prefixvar users []Usererr := db.Prefix(\"Name\", \"Jo\", &amp;users)// Skip, Limit and Reversevar users []Usererr := db.Find(\"Group\", \"staff\", &amp;users, storm.Skip(10))err = db.Find(\"Group\", \"staff\", &amp;users, storm.Limit(10))err = db.Find(\"Group\", \"staff\", &amp;users, storm.Reverse())err = db.Find(\"Group\", \"staff\", &amp;users, storm.Limit(10), storm.Skip(10), storm.Reverse())err = db.All(&amp;users, storm.Limit(10), storm.Skip(10), storm.Reverse())err = db.AllByIndex(\"CreatedAt\", &amp;users, storm.Limit(10), storm.Skip(10), storm.Reverse())err = db.Range(\"Age\", 10, 21, &amp;users, storm.Limit(10), storm.Skip(10), storm.Reverse()) 高级查询12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394// Equalityq.Eq(\"Name\", John)// Strictly greater thanq.Gt(\"Age\", 7)// Lesser than or equal toq.Lte(\"Age\", 77)// Regex with name that starts with the letter Dq.Re(\"Name\", \"^D\")// In the given slice of valuesq.In(\"Group\", []string&#123;\"Staff\", \"Admin\"&#125;)// Comparing fieldsq.EqF(\"FieldName\", \"SecondFieldName\")q.LtF(\"FieldName\", \"SecondFieldName\")q.GtF(\"FieldName\", \"SecondFieldName\")q.LteF(\"FieldName\", \"SecondFieldName\")q.GteF(\"FieldName\", \"SecondFieldName\")// Match if all matchq.And( q.Gt(\"Age\", 7), q.Re(\"Name\", \"^D\"))// Matchers can also be combined with And, Or and Not:// Match if one matchesq.Or( q.Re(\"Name\", \"^A\"), q.Not( q.Re(\"Name\", \"^B\") ), q.Re(\"Name\", \"^C\"), q.In(\"Group\", []string&#123;\"Staff\", \"Admin\"&#125;), q.And( q.StrictEq(\"Password\", []byte(password)), q.Eq(\"Registered\", true) ))query := db.Select(q.Gte(\"Age\", 7), q.Lte(\"Age\", 77))// Calls can also be chainedquery = query.Limit(10).Skip(20).OrderBy(\"Age\").Reverse()// But also to specify how to fetch them.var users []Usererr = query.Find(&amp;users)var user Usererr = query.First(&amp;user)// demo// Examples with Select:/ Find all users with an ID between 10 and 100err = db.Select(q.Gte(\"ID\", 10), q.Lte(\"ID\", 100)).Find(&amp;users)// Nested matcherserr = db.Select(q.Or( q.Gt(\"ID\", 50), q.Lt(\"Age\", 21), q.And( q.Eq(\"Group\", \"admin\"), q.Gte(\"Age\", 21), ),)).Find(&amp;users)query := db.Select(q.Gte(\"ID\", 10), q.Lte(\"ID\", 100)).Limit(10).Skip(5).Reverse().OrderBy(\"Age\", \"Name\")// Find multiple recordserr = query.Find(&amp;users)// orerr = db.Select(q.Gte(\"ID\", 10), q.Lte(\"ID\", 100)).Limit(10).Skip(5).Reverse().OrderBy(\"Age\", \"Name\").Find(&amp;users)// Find first recorderr = query.First(&amp;user)// orerr = db.Select(q.Gte(\"ID\", 10), q.Lte(\"ID\", 100)).Limit(10).Skip(5).Reverse().OrderBy(\"Age\", \"Name\").First(&amp;user)// Delete all matching recordserr = query.Delete(new(User))// Fetching records one by one (useful when the bucket contains a lot of records)query = db.Select(q.Gte(\"ID\", 10),q.Lte(\"ID\", 100)).OrderBy(\"Age\", \"Name\")err = query.Each(new(User), func(record interface&#123;&#125;) error) &#123; u := record.(*User) ... return nil&#125; 事务1234567891011121314151617181920tx, err := db.Begin(true)if err != nil &#123; return err&#125;defer tx.Rollback()accountA.Amount -= 100accountB.Amount += 100err = tx.Save(accountA)if err != nil &#123; return err&#125;err = tx.Save(accountB)if err != nil &#123; return err&#125;return tx.Commit() 不同的数据编码方式1234567891011121314import ( \"github.com/asdine/storm/v3\" \"github.com/asdine/storm/v3/codec/gob\" \"github.com/asdine/storm/v3/codec/json\" \"github.com/asdine/storm/v3/codec/sereal\" \"github.com/asdine/storm/v3/codec/protobuf\" \"github.com/asdine/storm/v3/codec/msgpack\")var gobDb, _ = storm.Open(\"gob.db\", storm.Codec(gob.Codec))var jsonDb, _ = storm.Open(\"json.db\", storm.Codec(json.Codec))var serealDb, _ = storm.Open(\"sereal.db\", storm.Codec(sereal.Codec))var protobufDb, _ = storm.Open(\"protobuf.db\", storm.Codec(protobuf.Codec))var msgpackDb, _ = storm.Open(\"msgpack.db\", storm.Codec(msgpack.Codec))","categories":[{"name":"软件","slug":"软件","permalink":"http://ystyle.top/categories/软件/"}],"tags":[{"name":"go","slug":"go","permalink":"http://ystyle.top/tags/go/"},{"name":"BoltDB","slug":"BoltDB","permalink":"http://ystyle.top/tags/BoltDB/"},{"name":"storm","slug":"storm","permalink":"http://ystyle.top/tags/storm/"}]},{"title":"kde在更新系统后不想重启怎么办","slug":"donot-restart-kde-after-update-system","date":"2019-12-12T07:24:26.000Z","updated":"2020-04-13T07:24:26.000Z","comments":true,"path":"2019/12/12/donot-restart-kde-after-update-system/","link":"","permalink":"http://ystyle.top/2019/12/12/donot-restart-kde-after-update-system/","excerpt":"","text":"用Archlinux经常更新系统， 如果遇到kde更新了的话，不重启系统的话很多kde的应用会打不开， 如果不想重启系统应该怎么办？ 不重启系统情况下重启KDE5在更新系统完成后输入:1# kquitapp5 plasmashell &amp;&amp; kstart5 plasmashell 太长了不好记建议在.zshrc添加以下内容:1alias kr=\"kquitapp5 plasmashell &amp;&amp; kstart5 plasmashell\" 以后更新完后输入kr就好了， kde重启后还会有日志输出，直接把终端关了就好了","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://ystyle.top/tags/Linux/"},{"name":"KDE","slug":"KDE","permalink":"http://ystyle.top/tags/KDE/"},{"name":"Archlinux","slug":"Archlinux","permalink":"http://ystyle.top/tags/Archlinux/"}]},{"title":"方舟编译器使用测试","slug":"ark-test-axample","date":"2019-09-06T12:23:21.000Z","updated":"2023-10-16T08:04:08.520Z","comments":true,"path":"2019/09/06/ark-test-axample/","link":"","permalink":"http://ystyle.top/2019/09/06/ark-test-axample/","excerpt":"","text":"方舟编译器编译过程准备工作 下载java-core.jar 需要安装docker docker镜像 daocloud.io/ystyle/ark 方舟镜像编译教程 准备java代码12345public class Test &#123; public static void main(String[] args) &#123; System.out.println(\"hello world\"); &#125;&#125; 12345678910111213# 进入docker容器的交互模式docker run --rm -v -ti $PWD:/mnt/code daocloud.io/ystyle/ark bash# 先把java-core转为mplt文件jbc2mpl -injar java-core.jar# 用java-core.jar编译并打包Test.javajava2jar Test.jar java-core.jar Test.java# 把Test.jar生成mpl文件jbc2mpl -mplt java-core.mplt -injar Test.jar -out Test# mpl2mplmaple --run=me:mpl2mpl --option=\"--quiet:--quiet --regnativefunc --maplelinker\" Test.mpl --save-temps# 编译.VtableImpl.mpl文件，生成后端优化后的汇编文件(.VtableImpl.s)。mplcg --fpic --maplelinker --no-pie --quiet --verbose-asm Test.VtableImpl.mpl# 后续用android ndk可以把.s文件编译出能在安卓上运行的程序, 因为汇编的原因， linux的GCC是编译不了的","categories":[{"name":"编程","slug":"编程","permalink":"http://ystyle.top/categories/编程/"}],"tags":[{"name":"android","slug":"android","permalink":"http://ystyle.top/tags/android/"},{"name":"ark","slug":"ark","permalink":"http://ystyle.top/tags/ark/"}]},{"title":"用docker编译方舟编译器","slug":"compile-ark","date":"2019-09-06T12:22:21.000Z","updated":"2023-10-16T08:04:08.520Z","comments":true,"path":"2019/09/06/compile-ark/","link":"","permalink":"http://ystyle.top/2019/09/06/compile-ark/","excerpt":"","text":"用docker编译方舟编译器准备工作 下载方舟源码: git clone https://code.opensource.huaweicloud.com/HarmonyOS/OpenArkCompiler.git 需要安装docker 生成出来的镜像以后可作为CI里编译方舟应用时的编译环境。现在可用来做getting start的环境，简单编译环境的搭建 dockerfile 把下面的dockerfile放到方舟源码根目录下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051FROM ubuntu:16.04 AS build-envMAINTAINER https://www.openarkcompiler.cn# Setting up the build environmentRUN sed -i 's/archive.ubuntu.com/mirrors.163.com/g' /etc/apt/sources.list &amp;&amp; \\ dpkg --add-architecture i386 &amp;&amp; \\ apt-get -y update &amp;&amp; \\ apt-get -y dist-upgrade &amp;&amp; \\ apt-get -y install openjdk-8-jdk git-core build-essential zlib1g-dev libc6-dev-i386 g++-multilib gcc-multilib linux-libc-dev:i386 &amp;&amp; \\ apt-get -y install gcc-5-aarch64-linux-gnu g++-5-aarch64-linux-gnu unzip tar curl &amp;&amp; \\ apt-get -y install python3-paramiko python-paramiko python-requests &amp;&amp; \\ mkdir -p /tools/ninja /tools/gn# 在国内请反注释下行, 因为容器也是个单独的系统，所以别用127.0.0.1#ENV http_proxy=http://192.168.3.81:1081 \\ # https_proxy=http://192.168.3.81:1081RUN cd /tools &amp;&amp; \\ curl -C - -LO http://releases.llvm.org/8.0.0/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz &amp;&amp; \\ curl -LO https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-linux.zip &amp;&amp; \\ curl -LO http://tools.harmonyos.com/mirrors/gn/1523/linux/gn.1523.tar &amp;&amp; \\ tar Jvxf /tools/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz -C /tools/ &amp;&amp; \\ unzip /tools/ninja-linux.zip -d /tools/ninja/ &amp;&amp; \\ tar xvf /tools/gn.1523.tar &amp;&amp; \\ chmod a+x /tools/gn/gn &amp;&amp; \\ rm /tools/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz /tools/ninja-linux.zip &amp;&amp; \\ rm -rf /var/cache/apt/archives# copy sourceCOPY . /OpenArkCompilerWORKDIR /OpenArkCompiler# create symbolic linkRUN mkdir -p /OpenArkCompiler/tools /OpenArkCompiler/tools/gn &amp;&amp; \\ ln -s /tools/ninja /OpenArkCompiler/tools/ninja_1.9.0 &amp;&amp; \\ ln -s /tools/gn/gn /OpenArkCompiler/tools/gn/gn &amp;&amp; \\ ln -s /tools/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04 /OpenArkCompiler/tools/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04# compileRUN [\"/bin/bash\", \"-c\", \"source build/envsetup.sh &amp;&amp; make &amp;&amp; ls -al \"]# build final docker imageFROM ubuntu:16.04RUN sed -i 's/archive.ubuntu.com/mirrors.163.com/g' /etc/apt/sources.list &amp;&amp; \\ apt-get -y update &amp;&amp; \\ apt-get install -y openjdk-8-jdk curl vim &amp;&amp; \\ rm -rf /var/cache/apt/archivesCOPY --from=build-env /OpenArkCompiler/output /OpenArkCompilerVOLUME /OpenArkCompilerENV PATH=/OpenArkCompiler/bin:$PATHCMD maple -h 编译 第一次编译安装依赖会慢点， 之后因为docker缓存每次编译会跳过依赖安装从复制源码开始1docker build -t ark:latest . 测试1docker run --rm ark:latest 交互模式12docker run --rm -ti ark:latest bashmaple -h 方舟编译java代码教程","categories":[{"name":"编程","slug":"编程","permalink":"http://ystyle.top/categories/编程/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://ystyle.top/tags/docker/"},{"name":"linux","slug":"linux","permalink":"http://ystyle.top/tags/linux/"},{"name":"android","slug":"android","permalink":"http://ystyle.top/tags/android/"},{"name":"ark","slug":"ark","permalink":"http://ystyle.top/tags/ark/"}]},{"title":"Beat Saber mod安装方法","slug":"beat-saber-mod-install","date":"2019-04-05T06:46:26.000Z","updated":"2019-06-30T05:50:26.000Z","comments":true,"path":"2019/04/05/beat-saber-mod-install/","link":"","permalink":"http://ystyle.top/2019/04/05/beat-saber-mod-install/","excerpt":"","text":"一定要先把Plugins目录删掉下载安装ModAssistant 新版的mod管理器 下载连接: https://github.com/Assistant/ModAssistant/releases/latest 不要用BeatDrop了， bug太多了 使用方法 点击I Agree同意 选择需要的mod然后点右下角的Install or Update 至于设置，不设置也可以，但我是这么选择的 最简安装需要的mod mod 名称 说明 SongLoader 自定义歌曲加载 ScoreSaber 分数上传 SongBrowser 歌曲排序过滤 Counters+ 游戏内统计插件 BeatSaverDownloader 游戏内歌曲下载插件 Custom Sabers 自定义光剑 SyncSaber Bsaber歌单同步插件要注册bsaber 其它mod推荐 mod 名称 说明 Custom Colors 自定义颜色 Custom Avatars 自定义人物 Custom Platforms 自定义场景 Camera+ 第一/三人称切换 BeatSaberDrinkWater 健康提醒功能：提醒您在玩多长时间/数量的歌曲后喝点水！ YUR Fit Calorie Tracker 计算游戏消耗的卡路里 AutoPause 网络/fps不好时自动暂停 相关网站 第三方曲谱 排名网站 bsaber Beat drop MOD/音乐管理器 这里能下载歌曲、光剑、舞台、人物 新的mod网站 Beat saber的wiki(英文) 里边有mod的安装方法之类的","categories":[{"name":"软件","slug":"软件","permalink":"http://ystyle.top/categories/软件/"}],"tags":[{"name":"Beat Saber","slug":"Beat-Saber","permalink":"http://ystyle.top/tags/Beat-Saber/"},{"name":"VR","slug":"VR","permalink":"http://ystyle.top/tags/VR/"}]},{"title":"安装flutter","slug":"install-flitter-without-android-studio","date":"2019-01-23T10:47:21.000Z","updated":"2023-10-16T08:04:08.520Z","comments":true,"path":"2019/01/23/install-flitter-without-android-studio/","link":"","permalink":"http://ystyle.top/2019/01/23/install-flitter-without-android-studio/","excerpt":"","text":"安装flutter 因为不想安装Android Studio， 所以只安装了安装Android sdk 安装安卓sdk到https://developer.android.google.cn/studio/ 下载 Android-sdk-tools命令行工具 chrome_2019-01-23_17-25-00.png 下载后直接解压就行了，如图。 解压后其实只有tools一个文件夹, 我已经执行过安装其它工具的命令了，所以有那么多文件夹 explorer_2019-01-23_17-26-32.png 在android-sdk-windows目录打开终端(按着shift 右键打开命令行)1234.\\tools\\bin\\sdkmanager.bat --licenses.\\tools\\bin\\sdkmanager.bat \"build-tools;28.0.3\".\\tools\\bin\\sdkmanager.bat \"platforms;android-28\".\\tools\\bin\\sdkmanager.bat \"platform-tools\" 如果需要代理在每句命令后面加上--no_https --proxy=http --proxy_host=mirrors.neusoft.edu.cn --proxy_port=80 powershell_2019-01-23_17-30-42.png 过程中有提示确认的全部输入y再按回车键 安装fluter到官网Windows install - Flutter下载安装包，然后直接解压就行 explorer_2019-01-23_17-45-01.png 设置环境变量 设置ANDROID_HOME变量 SystemPropertiesAdvanced_2019-01-23_17-45-44.png 设置flutter的变量 Boostnote_2019-01-23_17-47-12.png gradle 换源 放一个init.gradle 文件到USER_HOME/.gradle/目录下 放一个后缀是.gradle的文件到 USER_HOME/.gradle/init.d/ 目录下. 放一个后缀是.gradle的文件到 GRADLE_HOME/init.d/ 目录下. init.gradle如下 123456allprojects &#123; repositories &#123; mavenLocal() maven &#123; url 'http://maven.aliyun.com/nexus/content/repositories/central/' &#125; &#125;&#125; 另一个方法是在当前项目下修改build.gradle 1234567repositories &#123; mavenLocal() maven &#123; url 'http://maven.aliyun.com/nexus/content/repositories/central/' &#125; mavenCentral()&#125; 然后打包时会自动执行项目下的./gradlew, 会启用上面的源。如果没安装gradle的话会自动下载， 下载很慢， 可以自己去Gradle官网下载然解压配置到环境变量 测试 powershell_2019-01-23_18-14-17.png 如图，安装编译工具链已经安装完成，！号的表示可选操作安装 之后就可以用喜欢的编辑器或IDE开发fluter了， 而不需要安装android stuiod,特别是只做编译一下的 编译测试 powershell_2019-01-23_18-43-50.png","categories":[{"name":"编程","slug":"编程","permalink":"http://ystyle.top/categories/编程/"}],"tags":[{"name":"android","slug":"android","permalink":"http://ystyle.top/tags/android/"},{"name":"flutter","slug":"flutter","permalink":"http://ystyle.top/tags/flutter/"}]},{"title":"使用dat代替resilio sync分享数据","slug":"Use-dat-instead-of-resilio-sync-to-share-data","date":"2018-12-03T07:57:33.000Z","updated":"2023-10-16T08:04:08.520Z","comments":true,"path":"2018/12/03/Use-dat-instead-of-resilio-sync-to-share-data/","link":"","permalink":"http://ystyle.top/2018/12/03/Use-dat-instead-of-resilio-sync-to-share-data/","excerpt":"","text":"用btsync/resilio sync绝大部分原因就是用来做文件分享，只要简单添加个文件夹，把key复制出去就好了，同步用户数上来后甚至可以把软件关掉也不会影响分享 在我看来btsync/resilio sync是个绝佳的分享软件，后来那些号称代替它的都只是同步软件或者网盘，核心并不是用来分享也不太适合用来做分享 windows 安装方法 下载安装Node.js 然后按win + s 搜索powershell 打开 执行npm install -g dat linux 和 mac 安装方法 linux 和 mac 有桌面版, 当然也可以用windows的安装方法， 但有界面更好操作 mac linux 分享文件 在要分享的文件夹按着shift 点击右键 - 在此处打开powerShell窗口(也可能是命令行窗口)都可以 方法一 在窗口输入命令 dat create 以创建共享文件夹 在窗口输入命令 dat share 共享文件夹， 等待进度知完成， 按ctrl + c 结束 即时修改文件 在窗口输入命令 dat sync 在共享目录删除、修改、新增文件时会自动分享， 这个可以一直挂着， 要结束可以按ctrl + c 注意看我选中的那行 dat://0406903bdf62a99da7edb01ccb0c950f33d5c099f444be22afaeb6bb24ffa8a5分享的文件只有自己机器上能修改， 别人下载后是无法修改的， 相当于resilio sync的只读分享 在线查看分享的文件列表 打开网站https://datbase.org 在左上角搜索 dat create、dat share、 dat sync、或者dat status打印出来的以 dat://xxx开头的地址 下载别人分享的文件 在要保存文件的文件夹按着shift 点击右键 - 在此处打开powerShell窗口 执行 dat clone dat://0406903bdf62a99da7edb01ccb0c950f33d5c099f444be22afaeb6bb24ffa8a5 测试2 结尾的测试2为存放的文件名字，如果没写，文件夹的名称为那串很长的key 与别人分享的文件保持同步 在已经下载的文件夹按着shift 点击右键 - 在此处打开powerShell窗口 输入 dat sync 开启同步","categories":[{"name":"软件","slug":"软件","permalink":"http://ystyle.top/categories/软件/"}],"tags":[{"name":"dat","slug":"dat","permalink":"http://ystyle.top/tags/dat/"},{"name":"resilio sync","slug":"resilio-sync","permalink":"http://ystyle.top/tags/resilio-sync/"}]},{"title":"windows 10 右键用子系统Archlinux打开文件","slug":"Windows-10-open-with-wsl-Archlinux","date":"2018-11-01T07:57:33.000Z","updated":"2023-10-16T08:04:08.520Z","comments":true,"path":"2018/11/01/Windows-10-open-with-wsl-Archlinux/","link":"","permalink":"http://ystyle.top/2018/11/01/Windows-10-open-with-wsl-Archlinux/","excerpt":"","text":"要求 windows 10 更新到最新 开启 Windows Subsystem for Linux 功能 过程请看其它文章 Archlinux简略安装配置过程 用yuk7/ArchWSL 安装Archlinux 进行基础设置 安装spacevim curl -sLf https://spacevim.org/install.sh | bash 安装zshpacman -S zsh 安装oh-my-zshsh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; windows 右键菜单设置以下存为文件 -&gt; 文件夹空白位置右键打开zsh.reg1234567Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\Open with Arch]&quot;Icon&quot;=&quot;Y:\\\\Users\\\\YSTYLE\\\\Downloads\\\\Arch\\\\Arch.exe&quot;[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\Open with Arch\\command]@=&quot;Y:\\\\Users\\\\YSTYLE\\\\Downloads\\\\Arch\\\\Arch.exe run zsh&quot; 修改Arch.exe的位置，记得用\\， 然后右键该文件点合并 以下存为文件 -&gt; 文件夹空白位置右键打开vim.reg1234567Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\Open with Vim]&quot;Icon&quot;=&quot;Y:\\\\Users\\\\YSTYLE\\\\Downloads\\\\Arch\\\\Arch.exe&quot;[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\Open with Vim\\command]@=&quot;Y:\\\\Users\\\\YSTYLE\\\\Downloads\\\\Arch\\\\Arch.exe run runvim.sh &apos;%V&apos;&quot; 处理方式同上 同时要在Archlinux的/bin下面添加一文件runvim.sh1234567#!/bin/bashFILENAME=$1FILENAME=$&#123;FILENAME/:/&#125;FILENAME=$&#123;FILENAME//\\\\/\\/&#125;FILENAME=/mnt/$&#123;FILENAME,&#125;vim $FILENAME 执行命令: sudo chmod +x /bin/runvim.sh 以下存为文件 -&gt; 文件右键用vim打开.reg1234567Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\\*\\shell\\Open with Vim]&quot;Icon&quot;=&quot;D:\\\\Application\\\\Neovim\\\\bin\\\\nvim-qt.exe&quot;[HKEY_CLASSES_ROOT\\*\\shell\\Open with Vim\\command]@=&quot;Y:\\\\Users\\\\YSTYLE\\\\Downloads\\\\Arch\\\\Arch.exe run runvim.sh &apos;%1&apos;&quot; 功能测试三个文件都右键合并到注册表。 在文件夹右空白位置右键 可以看到 Open with Arch: 可以在Archlinux中打开当前目录 Open with Vim： 可以在vim打开当前目录 在文件右键可以看到 Open with Vim： 可以在vim打开当前选中文件","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"Archlinux","slug":"Archlinux","permalink":"http://ystyle.top/tags/Archlinux/"},{"name":"WSL","slug":"WSL","permalink":"http://ystyle.top/tags/WSL/"}]},{"title":"国内免翻墙预下载kubernetes镜像","slug":"pre-download-kubernetes-image","date":"2018-07-02T07:24:23.000Z","updated":"2023-10-16T08:04:08.520Z","comments":true,"path":"2018/07/02/pre-download-kubernetes-image/","link":"","permalink":"http://ystyle.top/2018/07/02/pre-download-kubernetes-image/","excerpt":"","text":"当前组件版本信息 组件 变量 版本 k8s版本 K8S_VERSION v1.11.0 ETCD版本 ETCD_VERSION 3.1.12 Dashboard版本 DASHBOARD_VERSION v1.8.3 flannel版本 FLANNEL_VERSION v0.10.0-amd64 DNS版本 DNS_VERSION 1.14.8 PAUSE版本 PAUSE_VERSION 3.1 需要安装其它版本时，修改这几个变量就好了 下载脚本 把以下内容存为 pull_k8s_images.sh 复制到目录机器上执行即可 123456789101112131415161718192021222324252627282930313233343536373839404142434445### 版本信息K8S_VERSION=v1.11.0ETCD_VERSION=3.1.12DASHBOARD_VERSION=v1.8.3FLANNEL_VERSION=v0.10.0-amd64DNS_VERSION=1.14.8PAUSE_VERSION=3.1## 基本组件docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver-amd64:$K8S_VERSIONdocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager-amd64:$K8S_VERSIONdocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler-amd64:$K8S_VERSIONdocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:$K8S_VERSIONdocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:$ETCD_VERSIONdocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:$PAUSE_VERSION### 网络docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-sidecar-amd64:$DNS_VERSIONdocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-kube-dns-amd64:$DNS_VERSIONdocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-dnsmasq-nanny-amd64:$DNS_VERSIONdocker pull quay.io/coreos/flannel:$FLANNEL_VERSION### 前端docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:$DASHBOARD_VERSION## 修改tagdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver-amd64:$K8S_VERSION k8s.gcr.io/kube-apiserver-amd64:$K8S_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager-amd64:$K8S_VERSION k8s.gcr.io/kube-controller-manager-amd64:$K8S_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler-amd64:$K8S_VERSION k8s.gcr.io/kube-scheduler-amd64:$K8S_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:$K8S_VERSION k8s.gcr.io/kube-proxy-amd64:$K8S_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:$ETCD_VERSION k8s.gcr.io/etcd-amd64:$ETCD_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:$PAUSE_VERSION k8s.gcr.io/pause-amd64:$PAUSE_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-sidecar-amd64:$DNS_VERSION k8s.gcr.io/k8s-dns-sidecar-amd64:$DNS_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-kube-dns-amd64:$DNS_VERSION k8s.gcr.io/k8s-dns-kube-dns-amd64:$DNS_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-dnsmasq-nanny-amd64:$DNS_VERSION k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64:$DNS_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:$DASHBOARD_VERSION k8s.gcr.io/kubernetes-dashboard-amd64:$DASHBOARD_VERSION## 删除镜像docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver-amd64:$K8S_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager-amd64:$K8S_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler-amd64:$K8S_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:$K8S_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:$ETCD_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:$PAUSE_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-sidecar-amd64:$DNS_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-kube-dns-amd64:$DNS_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-dnsmasq-nanny-amd64:$DNS_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:$DASHBOARD_VERSION","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://ystyle.top/tags/linux/"},{"name":"kubernetes","slug":"kubernetes","permalink":"http://ystyle.top/tags/kubernetes/"}]},{"title":"手工申请Let&#180;s Encrypt 证书","slug":"apply-lets-encrypt-by-manual","date":"2018-05-11T03:30:48.000Z","updated":"2023-10-16T08:04:08.520Z","comments":true,"path":"2018/05/11/apply-lets-encrypt-by-manual/","link":"","permalink":"http://ystyle.top/2018/05/11/apply-lets-encrypt-by-manual/","excerpt":"","text":"本教程讲如何手工申请证书，并提取出来， 因为有些软件并不能直接使用官方提供的脚本，如堡垒机的防火墙软件 安装letsencrypt123git clone https://github.com/letsencrypt/letsencryptcd letsencrypt./letsencrypt-auto --help 申请证书1./letsencrypt-auto certonly --manual --email lxy5266@live.com -d web.ystyle.top 出现以下内容时，打开一个新的终端 1234567891011121314151617181920212223242526Saving debug log to /var/log/letsencrypt/letsencrypt.logPlugins selected: Authenticator manual, Installer NoneObtaining a new certificatePerforming the following challenges:http-01 challenge for web.ystyle.top-------------------------------------------------------------------------------NOTE: The IP of this machine will be publicly logged as having requested thiscertificate. If you&apos;re running certbot in manual mode on a machine that is notyour server, please ensure you&apos;re okay with that.Are you OK with your IP being logged?-------------------------------------------------------------------------------(Y)es/(N)o: Y-------------------------------------------------------------------------------Create a file containing just this data:tzhL9xuoqMj4F57SMCiTvEpno36QM0nlAFwo8SDuHvk.2lxeywshhzsj142WeXRomKhAOmOFM5Iwlkbc5z1jljcAnd make it available on your web server at this URL:http://web.ystyle.top/.well-known/acme-challenge/tzhL9xuoqMj4F57SMCiTvEpno36QM0nlAFwo8SDuHvk-------------------------------------------------------------------------------Press Enter to Continue 12345mkdir -p /tmp/letsencrypt/public_html/.well-known/acme-challengecd /tmp/letsencrypt/public_htmlprintf \"%s\" tzhL9xuoqMj4F57SMCiTvEpno36QM0nlAFwo8SDuHvk.2lxeywshhzsj142WeXRomKhAOmOFM5Iwlkbc5z1jljc &gt; .well-known/acme-challenge/tzhL9xuoqMj4F57SMCiTvEpno36QM0nlAFwo8SDuHvk# echo 中的 tzhL9xuoqMj4F57SMCiTvEpno36QM0nlAFwo8SDuHvk.2lxeywshhzsj142WeXRomKhAOmOFM5Iwlkbc5z1jljc 是Create a file containing just this data: 下面那行# .well-known/acme-challenge/tzhL9xuoqMj4F57SMCiTvEpno36QM0nlAFwo8SDuHvk 是 And make it available on your web server at this URL: 下面那行的url中的 然后执行 1234sudo python -c \\\"import BaseHTTPServer, SimpleHTTPServer; \\s = BaseHTTPServer.HTTPServer(('', 80), SimpleHTTPServer.SimpleHTTPRequestHandler); \\s.serve_forever()\" 注意机器的80端口要先关闭 返回之前的窗口按回车，如果证书成功创建，会出现下面的提示： Congratulations! Your certificate and chain have been saved at … 然后在/etc/letsencrypt/archive/目录就能看到申请域名的证书了， 查看把privkey.pem转成pkcs1格式","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"ssl","slug":"ssl","permalink":"http://ystyle.top/tags/ssl/"},{"name":"https","slug":"https","permalink":"http://ystyle.top/tags/https/"}]},{"title":"Let's Encrypt 证书转 PKCS1 (传统私钥格式)","slug":"Lets-Encrypt-convert-to-pkcs1","date":"2018-05-11T02:58:46.000Z","updated":"2023-10-16T08:04:08.516Z","comments":true,"path":"2018/05/11/Lets-Encrypt-convert-to-pkcs1/","link":"","permalink":"http://ystyle.top/2018/05/11/Lets-Encrypt-convert-to-pkcs1/","excerpt":"","text":"Let’s Encrypt 证书转 PKCS1 (传统私钥格式)1openssl rsa -in privkey1.pem -out pkcs1.pem privkey1.pem 文件格式12345678910111213141516-----BEGIN PRIVATE KEY-----MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBALkFbpP0ZVpob96kYOM+ljfA3QOsG342iO/GQSClR04DGAB6mp4ZtKq1cB34w44FsfEg4TCsUL2y2TKlCDGsHj21cMj7gmPwy4ojXkcSYjyTv61EM6UnlMVIvYn0oDca5BvJUCGWnGX5idXvKPE/2XV2RsCmDWLFJ3ko49tpDTRZAgMBAAECgYBiKrOk5MLx2P+iDW0qpQZmxnl9fU+JA75cGcBsZcUTayjM+EAZKmJlQKcf/+Eh9XuYCG3yuTqNq9r5t/5E/KF+DTNbuhfLSmbwPChbv7R87NDiwRh6irNr9WuRjBHkHEFr4rJPUcKLi5eiDIOVBPWnRlPSJqpkF9MCl3JWSZxAQQJBAOF8+X4guXRuHQfw5GgyabEBkyfb3f517jjU6UCMvcKwXjKFRR1q8BhYzREBXkwm0pRNHhmlFeQH+mqSDJPGmv0CQQDSDqlBGlwbG6WvbvnxmU4t0vwHWfW5ut7jrggpDTM18REqFH+PtTwsYX7eaFm6hIR2SXAsInxky8iGRXS/wmONAkEA22pc7JqzW9R6c2u5FptXtWIu665LSn0/HhYwExvg2z37q3V7V7DjiQ2AHngSZk+wwZZ5H8NAlfAdgO41RucPkQJADtIZ/w3tEbyRpB8gY3t9mJ4aSip+u+wDbe0Jhlv4EQZBP8bSeUFATaFTYj3alt5iujXUREjqnfIC4/ZilmUQwQJAY3OGqyFh8OJbBThDdplaRGu/vi4heTUdCgUfUG2HNAlNvMof8sSpk3xZVq7dt/jXIDHZiho6wgkm05RNhx+HXg==-----END PRIVATE KEY----- pkcs1.pem文件格式123456789101112131415-----BEGIN RSA PRIVATE KEY-----MIICXAIBAAKBgQC5BW6T9GVaaG/epGDjPpY3wN0DrBt+NojvxkEgpUdOAxgAepqeGbSqtXAd+MOOBbHxIOEwrFC9stkypQgxrB49tXDI+4Jj8MuKI15HEmI8k7+tRDOlJ5TFSL2J9KA3GuQbyVAhlpxl+YnV7yjxP9l1dkbApg1ixSd5KOPbaQ00WQIDAQABAoGAYiqzpOTC8dj/og1tKqUGZsZ5fX1PiQO+XBnAbGXFE2sozPhAGSpiZUCnH//hIfV7mAht8rk6java+bf+RPyhfg0zW7oXy0pm8DwoW7+0fOzQ4sEYeoqza/VrkYwR5BxBa+KyT1HCi4uXogyDlQT1p0ZT0iaqZBfTApdyVkmcQEECQQDhfPl+ILl0bh0H8ORoMmmxAZMn293+de441OlAjL3CsF4yhUUdavAYWM0RAV5MJtKUTR4ZpRXkB/pqkgyTxpr9AkEA0g6pQRpcGxulr2758ZlOLdL8B1n1ubre464IKQ0zNfERKhR/j7U8LGF+3mhZuoSEdklwLCJ8ZMvIhkV0v8JjjQJBANtqXOyas1vUenNruRabV7ViLuuuS0p9Px4WMBMb4Ns9+6t1e1ew44kNgB54EmZPsMGWeR/DQJXwHYDuNUbnD5ECQA7SGf8N7RG8kaQfIGN7fZieGkoqfrvsA23tCYZb+BEGQT/G0nlBQE2hU2I92pbeYro11ERI6p3yAuP2YpZlEMECQGNzhqshYfDiWwU4Q3aZWkRrv74uIXk1HQoFH1BthzQJTbzKH/LEqZN8WVau3bf41yAx2YoaOsIJJtOUTYcfh14=-----END RSA PRIVATE KEY-----","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://ystyle.top/tags/linux/"}]},{"title":"剑网3重制版唐门机关小猪任务流程","slug":"jian-wang-3-zhong-zhi-ban-tang-men-ji-guan-xiao-zhu-ren-wu-liu-cheng","date":"2018-01-24T01:19:08.000Z","updated":"2023-10-16T08:04:08.520Z","comments":true,"path":"2018/01/24/jian-wang-3-zhong-zhi-ban-tang-men-ji-guan-xiao-zhu-ren-wu-liu-cheng/","link":"","permalink":"http://ystyle.top/2018/01/24/jian-wang-3-zhong-zhi-ban-tang-men-ji-guan-xiao-zhu-ren-wu-liu-cheng/","excerpt":"","text":"因为是做完任务后才写的，没图！！！！ 机关小猪相关任务 机关设计图（嘉陵江）（一个碎片） 莲花花簪（嘉陵江）（两个碎片） 未完成的机甲人（黑山谷）（三个碎片） 精巧的机关部件（唐门密室）（两个碎片） 机关设计图、莲花花簪都在 嘉陵江 建议一起做完再交任务，任务过程插入了 唐门秘事 的书籍获取方法 插件设置 按ESC点开茗伊插件， 在焦点列表添加以下焦点 神策正风营士兵 莲花花簪 野猪 未完成的机甲人 损坏的机甲人 神秘的机关匣 唐小晨 唐小夕 机关设计图 到嘉陵江击杀“神策正风营士兵”后有几率获得“机关设计图”。右键设计图接任务会让你回力堂找唐傲侠交任务，可以获得一个机关碎片。 莲花花簪 在 嘉陵江 马头、神策正风营将领(小boss)前面的海(不知道为什么我这里没有船)， 在水里快跑一下转一下，焦点列表就会出现 莲花花簪 的位置了。在水里是个小箱子。拿起来得到 簪子 ，背包右键簪子接任务。 小试唐莲 和下一个任务[未完成的机甲人]一起做 送还花簪 先不交，看看后面能不能和 [神秘机关匣] 《难解心魔》任务一起交 未完成的机甲人 去之前找杂货商买花灯，(大概是任意一个都有卖的，但我的只能在冶子别院与马头之前的那个买)。 到黑山谷后在唐小晨面前放花灯，大概2-5尺左右吧，失败下去重新买花灯就好了。任务完成后会得到《庙会初遇》、《唐门姐妹》 从 唐小晨 左边屋前到悬崖边，站着一个机甲，焦点列表应该很清楚的标记首位置。右键对话选择第一个。机甲被推到河里。 直接飞下河里。 这时焦点列表应该显示了损坏的机甲人的位置了，直接游下去。没标注时飞起来绕一下 游下河低里，不够气不用怕，死了会直接掉下去，焦点列表 显示0尺时死后会直接掉到机甲旁边，等复活。拿了后等下一次挂掉，选择回营地。 对了还有个任务是 小试唐莲 任务列表里应该有指向，到了地方焦点列表也会显示位置很容易完成 精巧的机关部件 如果在唐家堡三楼近的话，去三楼 从左边数第三根柱子的朱雀机关 去幽冥渊 到地点后站 朱雀机关 尖头位置， 面向唐湛， 对面有上层个大石头，大轻功直接飞上去。焦点列表应该就显示了唐小夕的位置了。 而且 神秘的机关匣的位置也一起显示了。点唐小夕完成 送还花簪任务 飞到下边的湖里， 焦点列表 应该还显示着神秘的机关匣的位置。尽快找到机关匣(机关匣可能不显示，焦点列表显示1尺左右时屏幕上会显示按F操作) 。收回后差不多没呼吸了，等挂了后按回营地 之后从朱雀机关位置去左边跑(大轻功水上飞)。 进入唐门秘室后，第一个boss打完，在厅里右边可以箱子得到 机关零件 * N 要去小密室拼完图后回来拿。大密室击杀机关骰子后有几率获取0-9个机关零件(但我没拿到过) 重复刷到 20个机关零件 合成一个精巧的机关部件。 接了部件给的任务后回力堂找高翎，获得一个机关碎片。 唐门秘事 剩余 书籍 是谁原谅谁 从送信小猪身上得到的任务（鸿雁传书，得套书《任务遇险》）的后续任务，任务完成后可以获得唐门套书《你救了我》。 任务（鸿雁传书）是可以在任何一只送信小猪的身上得到的，不限定是广场上那只跑得慢的小猪，所以，如果你在那只小猪上没有得到任务，那么你可能在别的地方接到过了。接到这个任务的标志是包裹里会出现“小夕的信”这个任务物品，如果你不是个爱丢东西的好孩子，那么检查你的包裹，就知道你有没有接过这个任务了。(我的是在金水镇接的。。。不知道咱回事) 最大的愿望 唐门密室出的任务物品机关部件上给的任务 心系伊人 未完成的机甲人那里获得的任务 此情可待成追忆 莲花簪子上得到的任务 《宽恕》 把所有获得机关碎片的任务做完(好像不确定，我还没做) 参考资料 机关小猪获取攻略（第二弹）【补救篇】 机关小猪获取攻略（啰嗦版） 剑网3重制版唐门机关小猪任务流程视频文字攻略 B站《剑三》重制版唐门机关小猪任务流程视频 关于幽冥渊里的“神秘机关匣”位置 【唐门任务】唐门·缘引寻见唐小夕","categories":[{"name":"游戏","slug":"游戏","permalink":"http://ystyle.top/categories/游戏/"}],"tags":[{"name":"机关小猪","slug":"机关小猪","permalink":"http://ystyle.top/tags/机关小猪/"},{"name":"唐门","slug":"唐门","permalink":"http://ystyle.top/tags/唐门/"},{"name":"剑三","slug":"剑三","permalink":"http://ystyle.top/tags/剑三/"}]},{"title":"Win10开机启动hyper-v版Docker","slug":"Win10-auto-start-hyper-v-version-of-Docker","date":"2018-01-23T01:23:00.000Z","updated":"2023-10-16T08:04:08.516Z","comments":true,"path":"2018/01/23/Win10-auto-start-hyper-v-version-of-Docker/","link":"","permalink":"http://ystyle.top/2018/01/23/Win10-auto-start-hyper-v-version-of-Docker/","excerpt":"","text":"简介 当前的Dcoker for windows hyper-v版本不能开机自动启动，自己解决了这问题，记录一下解决方法 解决步骤 win + s 搜索 计划任务 按回车 在任务计划程序库 右键 创建任务 在弹出窗口，名称 填写 开机启动Docker 选择 触发器 页签 新建 在开始任务选择启动时 确认 在操作 页签 新建 操作选择启动程序 在程序或脚本填写Docker文件位置 选择开始菜单的局势方式也行&quot;C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Docker for Windows.lnk&quot; 引号也要复制 详细步骤图","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://ystyle.top/tags/Docker/"},{"name":"hyper-v","slug":"hyper-v","permalink":"http://ystyle.top/tags/hyper-v/"},{"name":"win10","slug":"win10","permalink":"http://ystyle.top/tags/win10/"}]},{"title":"traefik配置入门","slug":"traefik-getting-start","date":"2017-12-08T06:46:26.000Z","updated":"2023-10-16T08:04:08.520Z","comments":true,"path":"2017/12/08/traefik-getting-start/","link":"","permalink":"http://ystyle.top/2017/12/08/traefik-getting-start/","excerpt":"","text":"添加 /etc/traefik/traefik.toml 配置文件 traefik会在/etc/traefik 、 $HOME/.traefik/ 或 当前目录查找 traefik.toml 文件。所以本文的配置文件都放/etc/traefik下面 12345678910111213141516171819202122232425262728293031323334353637logLevel = \"WARN\"# 同时支持http和httpsdefaultEntryPoints = [\"http\", \"https\"][entryPoints] [entryPoints.http] address = \":80\" [entryPoints.http.redirect] entryPoint = \"https\" [entryPoints.https] address = \":443\" [entryPoints.https.tls]# 配置自动Let's Encrypt证书[acme]email = \"yourname@mail.com\"storage = \"/etc/traefik/acme.json\"entryPoint = \"https\"onDemand = true# 开启日志功能[accessLog]filePath = \"/var/log/traefik/acceslog.txt\"[traefikLog]filePath = \"/var/log/traefik/traefik.log\"# 开启web管理端[web]address = \":8080\"readOnly = true[web.auth.basic]users = [\"test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj/\"] #test/test 登陆名/密码 可用openssl生成# 使用文件方式[file]directory = \"/etc/traefik/rules\" # 在指定目录查找配置文件watch = true 示例：traefik后台配置域名访问 编辑/etc/traefik/rules/traefikadmin.toml文件 1234567891011[backends] [backends.traefikadmin] [backends.traefikadmin.servers.server1] url = \"http://localhost:8080\" weight = 10[frontends] [frontends.traefikadmin] backend = \"traefikadmin\" [frontends.traefikadmin.routes.rule_1] rule = \"Host:traefik.ystyle.top\" 示例：syncthing配置域名访问 编辑/etc/traefik/rules/syncthing.toml文件 1234567891011[backends] [backends.syncthing] [backends.syncthing.servers.server1] url = \"http://localhost:8384\" weight = 10[frontends] [frontends.syncthing] backend = \"syncthing\" [frontends.syncthing.routes.rule_1] rule = \"Host:syncthing.ystyle.top\"","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://ystyle.top/tags/linux/"},{"name":"traefik","slug":"traefik","permalink":"http://ystyle.top/tags/traefik/"}]},{"title":"oracle生成随机数","slug":"oracle-generate-random-numbers","date":"2017-12-07T01:53:53.000Z","updated":"2023-10-16T08:04:08.516Z","comments":true,"path":"2017/12/07/oracle-generate-random-numbers/","link":"","permalink":"http://ystyle.top/2017/12/07/oracle-generate-random-numbers/","excerpt":"","text":"小数( 0 ~ 1) 1select dbms_random.value from dual; 指定范围内的小数 ( 0 ~ 100 ) 1select dbms_random.value(0,100) from dual; 指定范围内的整数 ( 0 ~ 100 ) 1select trunc(dbms_random.value(0,100)) from dual; 长度为20的随机数字串 1select substr(cast(dbms_random.value as varchar2(38)),3,20) from dual; 正态分布的随机数 1select dbms_random.normal from dual; 随机字符串 1select dbms_random.string(opt, length) from dual; opt可取值如下： ‘u’,’U’ : 大写字母 ‘l’,’L’ : 小写字母 ‘a’,’A’ : 大、小写字母 ‘x’,’X’ : 数字、大写字母 ‘p’,’P’ : 可打印字符 随机日期 123select to_date(2454084+TRUNC(DBMS_RANDOM.VALUE(0,365)),'J') from dual-- 通过下面的语句获得指定日期的基数select to_char(sysdate,'J') from dual; 生成GUID 1select sys_guid() from dual;","categories":[{"name":"编程","slug":"编程","permalink":"http://ystyle.top/categories/编程/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"http://ystyle.top/tags/oracle/"},{"name":"随机数","slug":"随机数","permalink":"http://ystyle.top/tags/随机数/"}]},{"title":"用安卓设备DIY一个NAS","slug":"diy-a-nas-with-android-device","date":"2017-11-30T01:11:33.000Z","updated":"2023-10-16T08:04:08.520Z","comments":true,"path":"2017/11/30/diy-a-nas-with-android-device/","link":"","permalink":"http://ystyle.top/2017/11/30/diy-a-nas-with-android-device/","excerpt":"","text":"网站地址 以安卓IP地址192.168.1.7为例 ssh连接地址: ssh ystyle@192.168.1.7 supervisor 管理地址： http://192.168.1.7:9001/ aria2 web ui http://webui-aria2.ghostry.cn/ 设置-连接设置填写aria2 的rpc地址 aria2 rpc地址： 192.168.1.7:6800 syncthing 管理页面：http://127.0.0.1:8384/ 安卓设置需要安装的软件 kingroot 设备需要root linux deploy 安装linux Linux系统安装软件 bash completion screenfetch htop vim supervisor aria2 syncthing 安卓部署Linux记录 获取root权限 安装linux deploy 点右下角的图标进去配置界面 选择好linux发行版与版本 架构用默认的就好，手机64位的可选择arm64之类的 设置用户名和密码 本地化选择zh_CN.UTF-8 启用SSH(若喜欢图形界面可以选择桌面环境和VNC的组合) 退出设置到主界面 点右上角三点 选择 安装 等待系统安装完毕。其中过程出现 fail,download fail之类的重新执行安装过程 重新安装需要点击主界面的停止，卸载已挂载的文件系统，再点右上菜单的清空 继续执行安装操作 &gt;&gt;&gt; deploy ... &lt;&lt;&lt; deploy之间没出现错误说明安装完成 点击主界面的启动，出现&gt;&gt;&gt; start ... ... &lt;&lt;&lt; start则启动完成 若启动过程出现 extra/ssh fail 之类的，执行重新安装操作 左边三横线新建配置文件后，若需要安装其它系统/或切换系统，则要先点主界面的停止按钮 若要配置多个系统，右下属性里安装路径的*.img换成其它名字 安装linux 软件 在电脑上或手机上安装ssh 客户端 电脑用xshell、git bash ssh、 linux/osx 自带的ssh 安桌下载 JuiceSSH 在安卓设备上wifi设置里查看ip 用ssh客户端连接 ip:22 用户名/密码为在配置文件设置的 若登陆不了，用户名试试 android 以安装的ubuntu为例 apt install bash-completion screenfetch htop vim supervisor aria2 执行 sudo systemctl enable supervisor设置自动启动supervisor 若出现问题则执行/lib/systemd/systemd-sysv-install enable supervisor 如果重启linux deploy没自动启动supervisor则手工执行sudo supervisord 使用示例 执行 screenfetch打印系统信息 用htop查看系统负载信息 配置aria2 下载器 1234sudo mkdir /etc/aria2 #新建文件夹 sudo touch /etc/aria2/aria2.session #新建session文件sudo chmod 777 /etc/aria2/aria2.session #设置aria2.session可写sudo vim /etc/aria2/aria2.conf #创建配置文件 aria2.conf文件配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108## &apos;#&apos;开头为注释内容, 选项都有相应的注释说明, 根据需要修改 #### 被注释的选项填写的是默认值, 建议在需要修改时再取消注释 #### 基本选项 ### 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置dir=~/downloads# 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16Mdisk-cache=32M# 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc# 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc# falloc和trunc则需要文件系统和内核支持# NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项file-allocation=none# 断点续传，目前只支持 HTTP/HTTPS/FTP 协议continue=true#检查文件完整性，默认：falsecheck-intergrity=false#帮助信息分类#一个标签以#开头#可用标签: #basic, #advanced, #http, #https, #ftp, #metalink, #bittorrent, #cookie, #hook, #file, #rpc, #checksum, #experimental, #deprecated, #help, #all Default: #basic#默认为#basichelp=#basic## 下载连接相关 ### 最大同时下载任务数, 运行时可修改, 默认:5max-concurrent-downloads=1# 同一服务器连接数, 添加时可指定, 默认:1max-connection-per-server=5# 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M# 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载min-split-size=10M# 单个任务最大线程数, 添加时可指定, 默认:5split=5# 整体下载速度限制, 运行时可修改, 默认:0#max-overall-download-limit=0# 单个任务下载速度限制, 默认:0#max-download-limit=0# 整体上传速度限制, 运行时可修改, 默认:0#max-overall-upload-limit=0# 单个任务上传速度限制, 默认:0#max-upload-limit=0# 禁用IPv6, 默认:falsedisable-ipv6=true## 进度保存相关 ### 从会话文件中读取下载任务input-file=/etc/aria2/aria2.session# 在Aria2退出时保存`错误/未完成`的下载任务到会话文件save-session=/etc/aria2/aria2.session# 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0#save-session-interval=60## RPC相关设置 ### 启用RPC, 默认:falseenable-rpc=true# 允许所有来源, 默认:falserpc-allow-origin-all=true# 允许非外部访问, 默认:falserpc-listen-all=true# 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同#event-poll=select# RPC监听端口, 端口被占用时可以修改, 默认:6800#rpc-listen-port=6800# 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项#rpc-secret=&lt;TOKEN&gt;# 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项#rpc-user=&lt;USER&gt;# 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项#rpc-passwd=&lt;PASSWD&gt;## BT/PT下载相关 ### 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true#follow-torrent=true# BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999listen-port=51413# 单个种子最大连接数, 默认:55#bt-max-peers=55# 打开DHT功能, PT需要禁用, 默认:trueenable-dht=false# 打开IPv6 DHT功能, PT需要禁用#enable-dht6=false# DHT网络监听端口, 默认:6881-6999#dht-listen-port=6881-6999# 本地节点查找, PT需要禁用, 默认:false#bt-enable-lpd=false# 种子交换, PT需要禁用, 默认:trueenable-peer-exchange=false# 每个种子限速, 对少种的PT很有用, 默认:50K#bt-request-peer-speed-limit=50K# 客户端伪装, PT需要peer-id-prefix=-TR2770-user-agent=Transmission/2.77# 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0seed-ratio=0# 强制保存会话, 话即使任务已经完成, 默认:false# 较新的版本开启后会在任务完成后依然保留.aria2文件#force-save=false# BT校验相关, 默认:true#bt-hash-check-seed=true# 继续之前的BT任务时, 无需再次校验, 默认:falsebt-seed-unverified=true# 保存磁力链接元数据为种子文件(.torrent文件), 默认:falsebt-save-metadata=true 配置aria2守护进程 vim /etc/supervisor/conf.d/aria2.conf 123456[program:aria2]command=aria2c --conf-path=/etc/aria2/aria2.confautostart=trueautorestart=truestartsecs=10directory=/etc/aria2 sudo supervisorctl reload sudo vim /etc/supervisor/supervisord.conf 修改[inet_http_server]节点为以下内容，sudo supervisorctl reload 重载配置, 然后访问 ip:9001 可以管理重启/停止 aria2 进程 1234[inet_http_server]port=0.0.0.0:9001username=userpassword=123456 进入[http://webui-aria2.ghostry.cn/] 设置-连接设置 配置rpc地址为： ip:6800 点添加-使用连接可以下载文件，使用metelink可以下载磁力链, 使用种子可以下载 种子 安装syncthing同步工具 官方下载地址 下载 syncthing-linux-arm-vx.xx.xx-.tar.gz arm版本的 示例：右键复制地址 wget https://github.com/syncthing/syncthing/releases/download/v0.14.40/syncthing-linux-arm-v0.14.40.tar.gz 下载，建议下载最新版 解压 tar -czf syncthing-linux-arm-v0.14.40.tar.gz cd syncthing-linux-arm-v0.14.40 &amp;&amp; cp syncthing /usr/bin/syncthing 运行 syncthing 启动完成后按ctrl + c结束掉 vim cat /etc/supervisor/conf.d/syncthing.conf 配置syncthing守护进程, 建议把以下配置的syncthing目录或用户名换成自己配置的用户 123456[program:syncthing]command = syncthing -no-browser -home=&quot;/home/syncthing/.config/syncthing&quot;directory = /home/syncthing/autorestart = Trueuser = syncthingenvironment = STNORESTART=&quot;1&quot;, HOME=&quot;/home/syncthing&quot; 执行vim /home/syncthing/.config/syncthing/config.xml 找到以下内容，把[address]中的地址改为0.0.0.0 1234567 &lt;gui enabled=\"true\" tls=\"false\" debugging=\"false\"&gt; &lt;address&gt;0.0.0.0:8384&lt;/address&gt; &lt;user&gt;ystyle&lt;/user&gt; &lt;password&gt;$2a$10$ZhHTlk3OwM2s7hbFigI/quti97wNT0Y3fpciNE3ngIkJYVmLcyw76&lt;/password&gt; &lt;apikey&gt;SvgmE6D6i2hNzX6WGh5ZKnDNi6KriMqS&lt;/apikey&gt; &lt;theme&gt;dark&lt;/theme&gt;&lt;/gui&gt; sudo supervisorctl reload 重载配置， 访问 http://127.0.0.1:8384/ 可以管理同步设备与目录 第一次访问需要设置用户名和密码，会有提示 右上设置-显示id 可以复制添加到其它设备的syncthing【远程设备】中，两设备的目录可以互相同步 简单的使用技巧： aria2 下载文件，syncthing 同步下载目录到 pc, pc同步完成后剪切到其它目录，安卓上的会同步删除","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://ystyle.top/tags/linux/"},{"name":"android","slug":"android","permalink":"http://ystyle.top/tags/android/"},{"name":"nas","slug":"nas","permalink":"http://ystyle.top/tags/nas/"}]},{"title":"解决手动删除lxss文件夹后提示LX 子系统有安装、卸载或维护操作未完成的问题","slug":"lx-subsystem-installation-uninstall-or-maintenance-operation-is-not-completed","date":"2017-11-27T03:38:08.000Z","updated":"2023-10-16T08:04:08.520Z","comments":true,"path":"2017/11/27/lx-subsystem-installation-uninstall-or-maintenance-operation-is-not-completed/","link":"","permalink":"http://ystyle.top/2017/11/27/lx-subsystem-installation-uninstall-or-maintenance-operation-is-not-completed/","excerpt":"","text":"出错表现输入 lxrun /uninstall /full /y 出现以下内容12345PS D:\\Code\\linux\\WSL-Distribution-Switcher&gt; lxrun /uninstall /full /y这将在 Windows 中卸载 Ubuntu。这将删除 Ubuntu 环境以及任何修改、新应用程序和用户数据。正在卸载...LX 子系统有安装、卸载或维护操作未完成。 解决方案 结束 bash进程 结束 lxrun.exe 进程(同名或相关的都结果掉) 重新执行lxrun /uninstall /full /y","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://ystyle.top/tags/linux/"},{"name":"win10","slug":"win10","permalink":"http://ystyle.top/tags/win10/"},{"name":"wsl","slug":"wsl","permalink":"http://ystyle.top/tags/wsl/"}]},{"title":"用docker搭建ELK","slug":"use-docker-to-build-ELKStack","date":"2017-09-27T01:05:31.000Z","updated":"2023-10-16T08:04:08.520Z","comments":true,"path":"2017/09/27/use-docker-to-build-ELKStack/","link":"","permalink":"http://ystyle.top/2017/09/27/use-docker-to-build-ELKStack/","excerpt":"","text":"logstash-input-tcp 可用，但log4j会把对象序列化，在kibana看到的会是乱码 logstash-input-log4j 不可用，官方已废弃该插件， log4j连接不上该插件 logstash-input-redis 可用，配置简洁，有安全保障 本篇以 logstash-input-redis插件配置elk 下载sebp/elk镜像1docker pull sebp/elk 启动容器 创建docker-compose.yml文件 123456789version: '3'services: elk: image: sebp/elk ports: - \"5601:5601\" - \"9200:9200\" - \"5044:5044\" restart: always 设置主机的虚拟内存 1sysctl -w vm.max_map_count=262144 启动容器 1docker-compose up -d 配置Logstash虚拟日志条目 进入容器1docker exec -ti elk_elk_1 bash 删除/etc/logstash/conf.d/下的文件，并新增log4j.conf, 写入以下内容, 然后重启elk123456789101112131415161718192021input &#123; redis &#123; host =&gt; &quot;127.0.0.1&quot; port =&gt; 6379 password =&gt; &quot;123456&quot; type =&gt; &quot;redis-logs&quot; data_type =&gt; &quot;channel&quot; key =&gt; &quot;logstash-log&quot; &#125;&#125;output &#123; elasticsearch &#123; hosts =&gt; [&quot;localhost&quot;] index =&gt; &quot;logstash-%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot; document_type =&gt; &quot;%&#123;type&#125;&quot; flush_size =&gt; 20000 idle_flush_time =&gt; 10 sniffing =&gt; true template_overwrite =&gt; true &#125;&#125; output 说明 Logstash 会努力攒到 20000 条数据一次性发送出去，但是如果 10 秒钟内也没攒够 20000 条，Logstash 还是会以当前攒到的数据量发一次。 测试 用任意Redis client连接到redis, 执行 publish logstash-log &quot;debug message !!!!&quot; 过10秒后可以在kibana界面上看到,debug message !!!!的日志 kibana设置进去会让设置一个index ,可以设置为上面Logstash配置文件log4j.conf output的elasticsearch中的index前缀就行了，然后在首页就能查询到了 集成到java web项目以Jedis为例， 配置redis过程略 log4j to redis Appender 依赖 Jedis, 为了从JedisPool取出连接 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268import org.apache.log4j.AppenderSkeleton;import org.apache.log4j.helpers.LogLog;import org.apache.log4j.spi.LoggingEvent;import redis.clients.jedis.Jedis;import redis.clients.jedis.JedisPool;import redis.clients.jedis.JedisPoolConfig;public class RedisAppender extends AppenderSkeleton&#123; private static final String DEFAULT_KEYTYPE = \"channel\"; private static final String DEFAULT_KEY = \"logstash-log\"; String host = \"127.0.0.1\"; int port = 6379; String password; String keyType = DEFAULT_KEYTYPE; String key = DEFAULT_KEY; int timeout = 2000; // 连接池设置 private long minEvictableIdleTimeMillis = 60000L; private long timeBetweenEvictionRunsMillis = 30000L; private int numTestsPerEvictionRun = -1; private int maxTotal = 8; private int maxIdle = 0; private int minIdle = 0; private boolean blockWhenExhaused = false; private String evictionPolicyClassName; private boolean lifo = false; private boolean testOnBorrow = false; private boolean testWhileIdle = false; private boolean testOnReturn = false; static private JedisPool jedisPool; @Override public void activateOptions() &#123; super.activateOptions(); JedisPoolConfig poolConfig = new JedisPoolConfig(); if (lifo) &#123; poolConfig.setLifo(lifo); &#125; if (testOnBorrow) &#123; poolConfig.setTestOnBorrow(testOnBorrow); &#125; if (testWhileIdle) &#123; poolConfig.setTestWhileIdle(testWhileIdle); &#125; if (testOnReturn) &#123; poolConfig.setTestOnReturn(testOnReturn); &#125; if (timeBetweenEvictionRunsMillis &gt; 0) &#123; poolConfig.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis); &#125; if (evictionPolicyClassName != null &amp;&amp; evictionPolicyClassName.length() &gt; 0) &#123; poolConfig.setEvictionPolicyClassName(evictionPolicyClassName); &#125; if (blockWhenExhaused) &#123; poolConfig.setBlockWhenExhausted(blockWhenExhaused); &#125; if (minIdle &gt; 0) &#123; poolConfig.setMinIdle(minIdle); &#125; if (maxIdle &gt; 0) &#123; poolConfig.setMaxIdle(maxIdle); &#125; if (numTestsPerEvictionRun &gt; 0) &#123; poolConfig.setNumTestsPerEvictionRun(numTestsPerEvictionRun); &#125; if (maxTotal != 8) &#123; poolConfig.setMaxTotal(maxTotal); &#125; if (minEvictableIdleTimeMillis &gt; 0) &#123; poolConfig.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis); &#125; if (password != null &amp;&amp; password.length() &gt; 0) &#123; jedisPool = new JedisPool(poolConfig, host, port, timeout, password); &#125; else &#123; jedisPool = new JedisPool(poolConfig, host, port, timeout); &#125; // 配置连接实验 try &#123; Jedis jedis = jedisPool.getResource(); jedis.ping(); &#125; catch (Exception e) &#123; LogLog.error(\"Redis is can not connected: \" + e.getMessage()); &#125; &#125; @Override protected void append(LoggingEvent event) &#123; Jedis resource = null; try &#123; if (jedisPool == null)&#123; return; &#125; resource = jedisPool.getResource(); String format = getLayout().format(event); if (DEFAULT_KEYTYPE.equals(keyType))&#123; resource.publish(key,format); &#125;else &#123; resource.lpush(key,format); &#125; &#125;catch (Exception e)&#123; &#125;finally &#123; if (resource != null)&#123; resource.close(); &#125; &#125; &#125; @Override public void close() &#123; if (jedisPool!=null)&#123; jedisPool.destroy(); &#125; &#125; @Override public boolean requiresLayout() &#123; return true; &#125; public String getHost() &#123; return host; &#125; public void setHost(String host) &#123; this.host = host; &#125; public int getPort() &#123; return port; &#125; public void setPort(int port) &#123; this.port = port; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password; &#125; public String getKeyType() &#123; return keyType; &#125; public void setKeyType(String keyType) &#123; this.keyType = keyType; &#125; public String getKey() &#123; return key; &#125; public void setKey(String key) &#123; this.key = key; &#125; public int getTimeout() &#123; return timeout; &#125; public void setTimeout(int timeout) &#123; this.timeout = timeout; &#125; public long getMinEvictableIdleTimeMillis() &#123; return minEvictableIdleTimeMillis; &#125; public void setMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) &#123; this.minEvictableIdleTimeMillis = minEvictableIdleTimeMillis; &#125; public long getTimeBetweenEvictionRunsMillis() &#123; return timeBetweenEvictionRunsMillis; &#125; public void setTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) &#123; this.timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis; &#125; public int getNumTestsPerEvictionRun() &#123; return numTestsPerEvictionRun; &#125; public void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) &#123; this.numTestsPerEvictionRun = numTestsPerEvictionRun; &#125; public int getMaxTotal() &#123; return maxTotal; &#125; public void setMaxTotal(int maxTotal) &#123; this.maxTotal = maxTotal; &#125; public int getMaxIdle() &#123; return maxIdle; &#125; public void setMaxIdle(int maxIdle) &#123; this.maxIdle = maxIdle; &#125; public int getMinIdle() &#123; return minIdle; &#125; public void setMinIdle(int minIdle) &#123; this.minIdle = minIdle; &#125; public boolean isBlockWhenExhaused() &#123; return blockWhenExhaused; &#125; public void setBlockWhenExhaused(boolean blockWhenExhaused) &#123; this.blockWhenExhaused = blockWhenExhaused; &#125; public String getEvictionPolicyClassName() &#123; return evictionPolicyClassName; &#125; public void setEvictionPolicyClassName(String evictionPolicyClassName) &#123; this.evictionPolicyClassName = evictionPolicyClassName; &#125; public boolean isLifo() &#123; return lifo; &#125; public void setLifo(boolean lifo) &#123; this.lifo = lifo; &#125; public boolean isTestOnBorrow() &#123; return testOnBorrow; &#125; public void setTestOnBorrow(boolean testOnBorrow) &#123; this.testOnBorrow = testOnBorrow; &#125; public boolean isTestWhileIdle() &#123; return testWhileIdle; &#125; public void setTestWhileIdle(boolean testWhileIdle) &#123; this.testWhileIdle = testWhileIdle; &#125; public boolean isTestOnReturn() &#123; return testOnReturn; &#125; public void setTestOnReturn(boolean testOnReturn) &#123; this.testOnReturn = testOnReturn; &#125;&#125; 使用方法 123456789101112# 在log4j.rootLogger添加logstashlog4j.rootLogger=WARN, Console, RollingFile, logstash# log4j to redis 配置log4j.appender.logstash=RedisAppender #上面RedisAppender的类名log4j.appender.logstash.host=127.0.0.1log4j.appender.logstash.port=6379log4j.appender.logstash.password=123456log4j.appender.logstash.keyType=channel #支持 channe与listlog4j.appender.logstash.key=logstash-loglog4j.appender.logstash.layout=net.logstash.log4j.JSONEventLayoutV1log4j.appender.logstash.layout.locationInfo=true 官方的json layout, 在pom文件添加以下内容12345&lt;dependency&gt; &lt;groupId&gt;net.logstash.log4j&lt;/groupId&gt; &lt;artifactId&gt;jsonevent-layout&lt;/artifactId&gt; &lt;version&gt;1.7&lt;/version&gt;&lt;/dependency&gt; 123Logger logger = LoggerFactory.getLogger(getClass());MDC.put(\"title\",\"用户验证模块\"); // 让后续log带上入口信息，详情百度搜索 log4j mdclogger.debug(\"用户名验证失败！\"); 预览结果","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://ystyle.top/tags/docker/"},{"name":"elk","slug":"elk","permalink":"http://ystyle.top/tags/elk/"}]},{"title":"git下载指定目录","slug":"git-download-the-specified-directory","date":"2017-08-01T10:02:02.000Z","updated":"2023-10-16T08:04:08.516Z","comments":true,"path":"2017/08/01/git-download-the-specified-directory/","link":"","permalink":"http://ystyle.top/2017/08/01/git-download-the-specified-directory/","excerpt":"","text":"Git1.7.0以后加入了Sparse Checkout模式，这使得Check Out指定文件或者文件夹成为可能。 具体实现如下1234567891011121314#照常创建新项目mkdir project_namecd project_namegit initgit remote add origin &lt;url&gt;#接下来，在Config中允许使用Sparse Checkout模式git config core.sparsecheckout true#比较只需要下载src目录与README.md 文件echo \"src\" &gt;&gt; .git/info/sparse-checkoutecho \"README.md\" &gt;&gt; .git/info/sparse-checkout#不下载src/test目录echo \"!src/test\" &gt;&gt; .git/info/sparse-checkout#最后拉取项目git pull origin master","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"git","slug":"git","permalink":"http://ystyle.top/tags/git/"}]},{"title":"全新的重制版jvms2.0","slug":"the-new-heavy-version-of-jvms2.0","date":"2017-07-24T01:22:49.000Z","updated":"2023-10-16T08:04:08.520Z","comments":true,"path":"2017/07/24/the-new-heavy-version-of-jvms2.0/","link":"","permalink":"http://ystyle.top/2017/07/24/the-new-heavy-version-of-jvms2.0/","excerpt":"","text":"介绍JDK Version Manager (JVMS) for Windows Windows下JDK多版本管理器，类似 nvm, nvmw, rvm jvms下载地址 这对JDK不同版本之间切换是非常有用的。例如，如果你想测试一个项目你想使用最新最前沿的版本,却不想卸载JDK的稳定版，这个工具可以很好的解决。 请注意，您需要删掉以前的JAVA_HOME环境变量再安装JVMS。 安装 Download Now 解压 jvms.zip 用管理员身份运行cmd 或者 powershell (powershell在win10快捷键为win + X + A) cd 到解压目录 执行 ./jvms.exe init 安装成功！ 安装方法 使用12345678910111213141516171819202122NAME: jvms - JDK Version Manager (JVMS) for WindowsUSAGE: jvms.exe [global options] command [command options] [arguments...]VERSION: 2.0.0COMMANDS: init Initialize config file list, ls List the JDK installations. install, i Install remote available jdk switch, s Switch to use the specified version. remove, rm Remove a specific version. rls Show a list of versions available for download. proxy Set a proxy to use for downloads. help, h Shows a list of commands or help for one commandGLOBAL OPTIONS: --help, -h show help --version, -v print the version 以安装jdk 1.8.0_31为例 用管理员身份运行cmd 或者 powershell(win + X + A) jvms rls 列出可以在线安装的jdk版本 jvms install 1.8.0_31 安装 jdk 1.8.0_31 jvms ls 列出本地已安装的jdk版本 jvms switch 1.8.0_31 切换jdk 版本为 1.8.0_31 切换jdk","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://ystyle.top/tags/JAVA/"},{"name":"jvms","slug":"jvms","permalink":"http://ystyle.top/tags/jvms/"}]},{"title":"ShareX使用七牛文件上传","slug":"share-the-use-of-qiniu-file-upload","date":"2017-07-05T06:06:26.000Z","updated":"2023-10-16T08:04:08.516Z","comments":true,"path":"2017/07/05/share-the-use-of-qiniu-file-upload/","link":"","permalink":"http://ystyle.top/2017/07/05/share-the-use-of-qiniu-file-upload/","excerpt":"","text":"ShareX界面 配置文件 token字段得自己在七牛的其它工具生成， 本文后面提供一个我制作的小工具 上传的文件名格式为 20171705/1546-t.png, -后面的为随机数字或字母。 URL字段在七牛存储空间的内容管理页面的外链默认域名 下拉菜单能找到 在线配置生成工具 在配置页面填写好存储区域、token、域名 下载配置导入ShareX 文件保存为 qiniu.sxcu 然后在上图所示界面导入 RequestURL 可能因为每个对象存储的区域不一样， 华东，华北，华南，北美 的地址分别为 http://up-z0.qiniu.com/ http://up-z1.qiniu.com/ http://up-z2.qiniu.com/ http://up-na0.qiniu.com/ 配置文件示例： 1234567891011121314&#123; \"Name\": \"qiniu\", \"DestinationType\": \"ImageUploader, FileUploader\", \"RequestType\": \"POST\", \"RequestURL\": \"http://up-z2.qiniu.com/\", \"FileFormName\": \"file\", \"Arguments\": &#123; \"token\": \"这个填写自己的\", \"key\": \"%y%yy%d%h%mi-%ra.png\", \"file\": \"$input$\" &#125;, \"ResponseType\": \"Text\", \"URL\": \"https://dll.ystyle.top/qiniu//$json:key$\"&#125; qiniu token 获取工具本工具支持 windows, linux, osx , 使用方法如下 参数说明： ak ACCESS_KEY 在七牛个人中心密钥管理界面获取 sk SECRET_KEY 在七牛个人中心密钥管理界面获取 bk bucket name 存储空间的免名称 ex Expires time , token过期时间 默认 3600 * 24 * 180(180天) 12345678910111213$ qiniutoken -hUsage of qiniutoken: -ak string ACCESS_KEY -bk string bucket name -ex uint Expires (default 15552000) -sk string SECRET_KEY# windows使用示例: 按着shift 右键文件夹空白打开命令行，输入以下命令， 把ak sk bk换成自己的qiniutoken.exe -ak=lPNn5sBYjqUhn_DhMOkHzoznYM3KwUt2sE1W21F1 -sk=E45Ox_RlUdrz0YOtasiuerLtKZxALiX9-7NduzHT -bk=images 下载地址：链接：http://pan.baidu.com/s/1pKIo0R5 密码：wfew","categories":[{"name":"软件","slug":"软件","permalink":"http://ystyle.top/categories/软件/"}],"tags":[{"name":"ShareX","slug":"ShareX","permalink":"http://ystyle.top/tags/ShareX/"},{"name":"软件","slug":"软件","permalink":"http://ystyle.top/tags/软件/"}]},{"title":"tomcat通过ssh代理连接到内网数据库服务器","slug":"tomcat-through-ssh-proxy-connected-to-the-internal-network","date":"2017-05-26T04:58:54.000Z","updated":"2023-10-16T08:04:08.520Z","comments":true,"path":"2017/05/26/tomcat-through-ssh-proxy-connected-to-the-internal-network/","link":"","permalink":"http://ystyle.top/2017/05/26/tomcat-through-ssh-proxy-connected-to-the-internal-network/","excerpt":"","text":"项目的测试数据库服务器是在某内网的，现在要通过ssh的代理隧道，连接到内网的数据库 解决方法： 用xshell连接到ssh服务器 打开查看-隧道窗体 新建转移规则 类型： Local(Outgoing) 源主机： localhost(自己开发电脑的ip) 侦听端口： 1521 目标主机： 192.168.101.102(ssh的局域网ip都可以) 目标端口： 1521 这一步linux可以直接执行：ssh -L 1521:192.168.101.102:1521 sshserverip -L代表本地转移到远程 java的数据库连接配置改jdbc:oracle:thin:@localhost:1521:orcl 启动项目连接成功","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"http://ystyle.top/tags/ssh/"},{"name":"代理","slug":"代理","permalink":"http://ystyle.top/tags/代理/"},{"name":"tomcat","slug":"tomcat","permalink":"http://ystyle.top/tags/tomcat/"},{"name":"java","slug":"java","permalink":"http://ystyle.top/tags/java/"}]},{"title":"leanote添探索功能","slug":"leanote-Add-the-search-function","date":"2017-04-07T08:39:19.000Z","updated":"2023-10-16T08:04:08.516Z","comments":true,"path":"2017/04/07/leanote-Add-the-search-function/","link":"","permalink":"http://ystyle.top/2017/04/07/leanote-Add-the-search-function/","excerpt":"","text":"leanote 编译打包 配置本地环境 设置GOPATH环境变量为工作区目录然后执行:123go get github.com/revel/cmd/revelgo get github.com/ystyle/leanote/appmv $GOPATH/src/github.com/ystyle $GOPATH/src/github.com/leanote 注:源码在$GOPATH/src/github.com/leanote/leanote/目录 编译文件123revel run github.com/leanote/leanote dev 9000### 访问http://localhost:9000 触发buildbin/release.sh 添加功能 替换conf/routes文件 新建文件leanote/public/js/exporer.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475var totalPage, count, curPage;var initLea = function (page) &#123; $.ajax(&#123; type: \"GET\", url: \"/blog/listAllUserBlogs\", data:&#123;page:page&#125;, dataType: \"json\", success: function(res)&#123; if (res.List)&#123; var lis = res.List.map(function(article,i) &#123; article.Tags = article.Tags ? article.Tags :[]; var tags = article.Tags.map(function(tag) &#123; return '&lt;a class=\"label label-default label-post\" href=\"/blog/tag/'+article.User.Username+'/'+encodeURIComponent(tag)+'\"&gt;'+tag+'&lt;/a&gt;' &#125;).join(\" \"); return '&lt;li id=\"'+ i +\"-\" + article.UserId +'\"&gt;'+ '&lt;div class=\"article\"&gt;'+ '&lt;a class=\"title\" href=\"/blog/post/'+article.User.Username+'/'+article.UrlTitle+'\" title=\"'+article.Title+'\" target=\"_blank\"&gt;'+ article.Title + '&lt;/a&gt;'+ '&lt;div class=\"user-card\" title=\"'+article.User.Username+'\"&gt;'+ '&lt;a class=\"avatar \" href=\"/blog/'+article.User.Username+'\" target=\"_blank\" &gt;'+ '&lt;img src=\"'+article.User.Logo+'\"&gt;'+ '&lt;/a&gt;'+ '&lt;div class=\"dropdown-menu user-card-content\"&gt;'+ '&lt;/div&gt;'+ '&lt;/div&gt;'+ '&lt;div class=\"content\"&gt;'+ article.Desc + '&lt;/div&gt;'+ '&lt;div class=\"article-info\"&gt;'+ '&lt;span class=\"fa fa-bookmark-o\"&gt;&lt;/span&gt;'+ tags + '&amp;nbsp;&amp;nbsp;'+ '&lt;span class=\"fa fa-eye\"&gt;&lt;/span&gt; '+ article.ReadNum+ '&amp;nbsp;&amp;nbsp;'+ '&lt;span class=\"fa fa-thumbs-o-up\"&gt;&lt;/span&gt; '+ article.LikeNum+ '&amp;nbsp;&amp;nbsp;'+ '&lt;span class=\"fa fa-comments-o\"&gt;&lt;/span&gt; '+ article.CommentNum+ '&lt;/div&gt;'+ '&lt;/div&gt;'+ '&lt;/li&gt;'; &#125;).join(\" \"); $(\".thumbnails\").empty(); $(\".thumbnails\").append(lis); totalPage = res.Item.TotalPage ; if(totalPage &gt; 1) &#123; count = res.Item.Count ; curPage = res.Item.CurPage -1; $(\".pagination\").pagination(count, &#123; items_per_page: res.Item.PerPageSize, prev_text:\"上一页\", next_text:\"下一页\", current_page: curPage, callback: function(pageNum) &#123; pageNum++; initLea(pageNum); &#125; &#125;); &#125; &#125; &#125; &#125;);&#125;if (location.pathname == \"/blog/single/admin/lea\")&#123; $(\"#posts\") .empty() .append('&lt;ul class=\"thumbnails\"&gt;&lt;/ul&gt;') .append('&lt;div id=\"pagination\" class=\"clearfix\"&gt;&lt;ul class=\"pagination pagination-sm m-t-none m-b-none\"&gt;&lt;/ul&gt;&lt;/div&gt;'); initLea();&#125; 在主题的header.html里&lt;!-- 字体必须同一域 --&gt;下添加 1&lt;link href=\"https://dn-leanote.qbox.me/css/blog/p.css?i=2\" rel=\"stylesheet\"&gt; 在footer.html里添加 12&lt;script src=\"/js/jquery.pagination.js\"&gt;&lt;/script&gt;&lt;script src=\"/js/exporer.js\"&gt;&lt;/script&gt;","categories":[{"name":"编程","slug":"编程","permalink":"http://ystyle.top/categories/编程/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://ystyle.top/tags/golang/"},{"name":"leanote","slug":"leanote","permalink":"http://ystyle.top/tags/leanote/"},{"name":"探索","slug":"探索","permalink":"http://ystyle.top/tags/探索/"}]},{"title":"妄想症Paranoia","slug":"Paranoia","date":"2017-04-07T08:39:19.000Z","updated":"2023-10-16T08:04:08.520Z","comments":true,"path":"2017/04/07/Paranoia/","link":"","permalink":"http://ystyle.top/2017/04/07/Paranoia/","excerpt":"","text":"简介 “我所描绘的一切或许并非真实，然而我的感受绝无虚假。”当妄想变成了现实，关于记忆与执着的狂想曲就此拉开帷幕。 剧情设定及小说、游戏 妄想症Paranoia - 小说 妄想症：Deliver Me - 游戏 、 预售 专辑与PV 专辑购买 专辑PV 专辑歌单 歌曲列表 NOVA [音乐 PV] 一重加害 [音乐 PV] 二重变革 [音乐 PV] 三重爱恋 [音乐 PV] 三重恋爱 [音乐 PV] 四重罪孽 [音乐 PV] 五重空洞 [音乐 PV] 六重不忠 [音乐 PV] 七重痼病 [音乐 PV] 八重回归·伪 [音乐 PV] 自攻自受 [音乐 PV] 泠重乞愿 [音乐 PV] 零重祈愿 [音乐 PV]","categories":[{"name":"音乐","slug":"音乐","permalink":"http://ystyle.top/categories/音乐/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://ystyle.top/tags/音乐/"},{"name":"妄想症","slug":"妄想症","permalink":"http://ystyle.top/tags/妄想症/"},{"name":"洛天依","slug":"洛天依","permalink":"http://ystyle.top/tags/洛天依/"},{"name":"乐正绫","slug":"乐正绫","permalink":"http://ystyle.top/tags/乐正绫/"}]},{"title":"electron-react-boilerplate 开环境搭建","slug":"electron-react-boilerplate-kai-huan-jing-da-jian","date":"2017-02-27T07:14:13.000Z","updated":"2017-02-28T11:27:08.000Z","comments":true,"path":"2017/02/27/electron-react-boilerplate-kai-huan-jing-da-jian/","link":"","permalink":"http://ystyle.top/2017/02/27/electron-react-boilerplate-kai-huan-jing-da-jian/","excerpt":"","text":"因为electron下载被墙的原因, electorn很难下载成功, electorn的react, redux的开发插件也装不上, 本文记录了解决这些问题时的方法 安装electron 在淘宝镜像上下载package.json对应版本的electron-vx.x.xx-win32-x64.zip文件与SHASUMS256.txt文件 windows 64位一般下载electron-vx.x.xx-win32-x64.zip的包 下载的electron-vx.x.xx-win32-x64.zip包放到用户目录~/.electron下面 SHASUMS256.txt 同上, 并把文件名改为SHASUMS256.txt-x.x.xx x.x.xx为package.json里的对应版本 随便说一下: chromedriver如果npm没安装成功, 可以在淘宝镜像上下载放到用户目录~/.electron下面 安装electron的开发插件[React Developer Tools, Redux DevTools]把插件解压并复制到~/AppData/Roaming/Electron/extensions目录下 方式一 下载chrome官方插件React Developer Tools和 Redux DevTools 方式二 复制chrome安装后的插件目录, 使用全盘搜索 fmkadmapgofadopljbjfkapdkoienihi,lmhkpmbekcpmknklioeibfkpmmfibljd 然后复制到electron的插件目录 方式三 直接从githut上clone后自己构建React Developer Tools Redux DevTools ps: 如果复制的fmkadmapgofadopljbjfkapdkoienihi这种目录下有版本号, 要把版本号目录里边的东西剪切到和版本号目录同级 安装好的目录结构是这样的:12345678910111213 ~/AppData/Roaming/Electron/extensions$ tree . -L 2.|-- IDMap.json|-- fmkadmapgofadopljbjfkapdkoienihi| | ......| |-- manifest.json| `-- panel.html`-- lmhkpmbekcpmknklioeibfkpmmfibljd |-- _metadata |-- ...... |-- remote.html `-- manifest.json 安装依赖并启动 安装依赖: npm install 启动: 执行electron-react-boilerplate提供的命令npm run dev 如果再webpack打包和electron启动分开可以分别在两个终端执行npm run hot-server, npm run start-hot","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"electron","slug":"electron","permalink":"http://ystyle.top/tags/electron/"},{"name":"react","slug":"react","permalink":"http://ystyle.top/tags/react/"}]},{"title":"tensorflow 在windows 下使用gpu","slug":"tensorflow-zai-windows-xia-shi-yong-gpu","date":"2017-01-05T20:49:17.000Z","updated":"2017-09-16T02:52:26.000Z","comments":true,"path":"2017/01/05/tensorflow-zai-windows-xia-shi-yong-gpu/","link":"","permalink":"http://ystyle.top/2017/01/05/tensorflow-zai-windows-xia-shi-yong-gpu/","excerpt":"","text":"tensorflow 在windows 下怎么使用gpu需要安装的工具 python 3.5.x tensorflow-gpu (1.13.0) Cuda Toolkit 8.0 cuDNN 6.x Visual C++ 2015 64 bit 安装 Visual C++ 2015 64 bit下载地址点页面中间的下载， 然后选择64位 下载Visual C++ 2015 下载后双击安装就好了 安装tensorflow-gpu1pip install tensorflow-gpu 安装Cuda Toolkit 8.0Cuda Toolkit 8.0下载地址 Cuda Toolkit 8.0 安装前注意更新显示驱动! 下载后安装一路下一步 安装cuDNN cuDNN下载地址 点页面中间的Download按钮 然后登陆后点击I Agree To the Terms of the cuDNN Software License Agreement就能下载了 cuDNN 解压 添加bin目录到环境变量PATH 安装cuDNN 测试 测试1 测试2 测试3 注意1： 如果都安装好但tensorflow没反应的话， 先卸载tensorflow tensorflow-gpu 然后重装 注意2： 运行报错Couldn’t open CUDA library cupti64_80.dll 解决方法：${CUDA_HOME}/extras/CUPTI/lib64 添加到PATH环境变量","categories":[{"name":"编程","slug":"编程","permalink":"http://ystyle.top/categories/编程/"}],"tags":[{"name":"tensorflow","slug":"tensorflow","permalink":"http://ystyle.top/tags/tensorflow/"},{"name":"tensorflow-gpu","slug":"tensorflow-gpu","permalink":"http://ystyle.top/tags/tensorflow-gpu/"}]},{"title":"JetBrains 家全新Go IDE 代号GogLand","slug":"jetbrains-jia-quan-xin-go-ide-dai-hao-gogland","date":"2016-12-13T22:53:18.000Z","updated":"2016-12-15T22:40:18.000Z","comments":true,"path":"2016/12/13/jetbrains-jia-quan-xin-go-ide-dai-hao-gogland/","link":"","permalink":"http://ystyle.top/2016/12/13/jetbrains-jia-quan-xin-go-ide-dai-hao-gogland/","excerpt":"","text":"简介我们很高兴地告诉你，今天JetBrains宣布IntelliJ家族新添成员：Gogland，一个全新的Go IDE。 Gogland仍然在开发中，但我们正在开放其私人EAP，并邀请您加入！在这里你可以阅读Gogland背后的故事，或跳转到下载链接。 三年前，我们做出了一个战略决策，贡献go-lang-idea-plugin，这是一个旨在为Go构建IntellIJ插件的开源计划。 在这三年里，我们相信我们的努力（总共提交3,000次）已经帮助重建了插件，为用户提供了更稳定，可扩展和功能丰富的开发体验。 去年，我们开始跟踪插件的唯一用户数。这个数字在去年单月增加了一倍，达到每月活跃用户30,000。 这个事实，以及许多用户要求我们把IntelliJ类似的编码体验带到Go，说服了我们半年前去fork go-lang-idea-plugin，并生成我们自己的IDE。我们组建了一个专门的团队，致力于改进Go工具支持和总体开发体验。 试用版下载要试用新的IDE，请通过单击以下链接之一下载EAP构建： windows Mac OSX Linux 官网 要了解有关Gogland的更多信息并获取进一步的EAP构建，请访问其官方网站并注册EAP。 要快速开始使用Gogland，请参阅文档。 关注我们非常感谢您对Gogland的反馈，因为它对帮助我们使产品更好是至关重要的。 请注意，Gogland是代号，而不是最终产品名称。也给我们你对产品名字的想法和建议！ 对于你提交到go-lang-idea-plugin的每个未解决的问题，我们在新的Gogland问题跟踪器中创建了一个问题。以下是这些问题的列表： GO-1191 archlinux无法设置go sdk（＃1191） 要跟踪这些问题的进度，请使用上面的链接注册并添加自己作为观察者。 如果您有任何问题，只需给我们发电子邮件。还请考虑阅读常见问题。 感谢您成为JetBrains社区的一员，并愉快地发展！ 不用担心，你不会得到任何进一步的电子邮件关于这个问题，除非你自己选择。 Gogland IDE团队 开发的动力 https://www.jetbrains.com/go/","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"Golang","slug":"Golang","permalink":"http://ystyle.top/tags/Golang/"}]},{"title":"Power designer生成建表语句的设置","slug":"power-designersheng-cheng-jian-biao-yu-ju-de-she-zhi","date":"2016-12-12T10:46:13.000Z","updated":"2016-12-14T04:16:50.000Z","comments":true,"path":"2016/12/12/power-designersheng-cheng-jian-biao-yu-ju-de-she-zhi/","link":"","permalink":"http://ystyle.top/2016/12/12/power-designersheng-cheng-jian-biao-yu-ju-de-she-zhi/","excerpt":"","text":"oracle去年字段的引号DataBase - Edit Current DBMS 修改 ORA11GR1::Script\\Sql\\Format\\CaseSensitivityUsingQuote改为No oracle生成的字段注释不换行DataBase - Edit Current DBMS 修改ORA11GR1::Script\\Objects\\Column\\ColumnComment 的值为 comment on column [%QUALIFIER%]%TABLE%.%COLUMN% is %.q:COMMENT% oracle生成的表名注释不换行DataBase - Edit Current DBMS 修改ORA11GR1::Script\\Objects\\Table\\TableComment 的值为comment on table [%QUALIFIER%]%TABLE% is %.q:COMMENT% mysql生成的字段去掉national修改MYSQL50::Script\\Objects\\Column\\Add 去掉值里的[%National%?national ]","categories":[{"name":"编程","slug":"编程","permalink":"http://ystyle.top/categories/编程/"}],"tags":[{"name":"建模","slug":"建模","permalink":"http://ystyle.top/tags/建模/"}]},{"title":"sequelize.js 生成DDL语句预览","slug":"sequelize-js-sheng-cheng-ddlyu-ju-yu-lan","date":"2016-11-30T06:26:26.000Z","updated":"2016-11-30T09:29:45.000Z","comments":true,"path":"2016/11/30/sequelize-js-sheng-cheng-ddlyu-ju-yu-lan/","link":"","permalink":"http://ystyle.top/2016/11/30/sequelize-js-sheng-cheng-ddlyu-ju-yu-lan/","excerpt":"","text":"因为想做一个直接生成建表语句的工具。 又不想连接到数据库(懒得让数据库一直启动着)看了下sequelize.js的测试代码， 找到了以下方法可以实现 12345678910111213141516var Sequelize = require('sequelize');// 因为没有连接到数据库， 用户名什么的可以随意写var sequelize = new Sequelize('test', 'root', 'root', &#123; dialect: \"mysql\"&#125;);var User = sequelize.define('User', &#123; username: Sequelize.STRING, password: Sequelize.STRING&#125;);var sql = sequelize.dialect.QueryGenerator;var ddlsql = sql.createTableQuery(User.getTableName(), sql.attributesToSQL(User.rawAttributes), &#123; &#125;);console.log(ddlsql); 生成DDL建表语句123$ node test.jsCREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER NOT NULL auto_increment , `username` VARCHAR(255), `password` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;","categories":[],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"http://ystyle.top/tags/Nodejs/"},{"name":"sequelize","slug":"sequelize","permalink":"http://ystyle.top/tags/sequelize/"}]},{"title":"Nodejs yarn换淘宝源","slug":"nodejs-yarnhuan-tao-bao-yuan","date":"2016-10-30T10:36:19.000Z","updated":"2016-10-30T22:38:11.000Z","comments":true,"path":"2016/10/30/nodejs-yarnhuan-tao-bao-yuan/","link":"","permalink":"http://ystyle.top/2016/10/30/nodejs-yarnhuan-tao-bao-yuan/","excerpt":"","text":"Nodejs yarn换淘宝源如果觉得安装速度慢，安装源和原来 npm 是一样的，可以通用，修改方法如下：12yarn config get registry# -&gt; https://registry.yarnpkg.com 可以改成 taobao 的源：12345yarn config set registry 'https://registry.npm.taobao.org'# -&gt; yarn config v0.15.0# -&gt; success Set \"registry\" to \"https://registry.npm.taobao.org\".# -&gt; Done in 0.04s.` 然后 yarn install 的速度就快多了","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://ystyle.top/tags/nodejs/"},{"name":"yarn","slug":"yarn","permalink":"http://ystyle.top/tags/yarn/"}]},{"title":"maven deploy 部署jar到私服","slug":"maven-deploy-bu-shu-jardao-si-fu","date":"2016-10-27T09:11:51.000Z","updated":"2016-11-21T10:53:04.000Z","comments":true,"path":"2016/10/27/maven-deploy-bu-shu-jardao-si-fu/","link":"","permalink":"http://ystyle.top/2016/10/27/maven-deploy-bu-shu-jardao-si-fu/","excerpt":"","text":"修改maven settings.xml文件12345678910111213&lt;servers&gt; &lt;server&gt; &lt;id&gt;private-nexus-library-releases&lt;/id&gt; &lt;username&gt;username&lt;/username&gt; &lt;password&gt;password&lt;/password&gt; &lt;!---nexus私服的用户名和密码 ----&gt; &lt;/server&gt; &lt;server&gt; &lt;id&gt;private-nexus-library-snapshots&lt;/id&gt; &lt;username&gt;username&lt;/username&gt; &lt;password&gt;password&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt; 修改项目pom文件1234567891011121314&lt;!--发布--&gt; &lt;distributionManagement&gt; &lt;repository&gt; &lt;id&gt;private-nexus-library-releases&lt;/id&gt; &lt;name&gt;private-nexus-library-releases&lt;/name&gt; &lt;url&gt;http://host:port/maven-web/repositories/releases/&lt;/url&gt; &lt;!--- url可以在nexus私服repositories列表看到 ----&gt; &lt;/repository&gt; &lt;snapshotRepository&gt; &lt;id&gt;private-nexus-library-snapshots&lt;/id&gt; &lt;name&gt;private-nexus-library-snapshots&lt;/name&gt; &lt;url&gt;http://host:port/maven-web/repositories/snapshots/&lt;/url&gt; &lt;/snapshotRepository&gt; &lt;/distributionManagement&gt; 注意事项 server 的 id 要与 repository 的 id 保持一致。 nexus私用不能解析parent.version 中的${}表达式, 要写常量. 否则会导致deploy失败.","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"Maven","slug":"Maven","permalink":"http://ystyle.top/tags/Maven/"},{"name":"Nexus","slug":"Nexus","permalink":"http://ystyle.top/tags/Nexus/"},{"name":"Deploy","slug":"Deploy","permalink":"http://ystyle.top/tags/Deploy/"}]},{"title":"我Github的star项目列表","slug":"awesome-stars","date":"2016-09-13T22:32:49.000Z","updated":"2017-08-18T06:13:05.000Z","comments":true,"path":"2016/09/13/awesome-stars/","link":"","permalink":"http://ystyle.top/2016/09/13/awesome-stars/","excerpt":"","text":"Awesome Stars A curated list of my GitHub stars! Generated by starred Contents Batchfile C C# C++ CSS CoffeeScript Go HTML Hack Java JavaScript Jupyter Notebook Kotlin Makefile Objective-C Others PHP Perl Python Ruby Rust Scala Shell TeX TypeScript Vue Batchfile alwsl - Install archlinux as the WSL (Windows Subsystem for Linux) host. C robotgo - RobotGo, Go Native cross-platform GUI automation nuklear - This project provides Go bindings for nuklear.h — a small ANSI C GUI library. lab - A customisable 3D platform for agent-based AI research redis-migrate-tool - A convenient and useful tool for migrating data between redis group. openpilot - open source driving agent robotjs - Node.js Desktop Automation. seafile - High performance file syncing and sharing, with also Markdown WYSIWYG editing, Wiki, file label and other knowledge management features. write-a-C-interpreter - Write a simple interpreter of C. Inspired by c4 and largely based on it. flinux - Foreign LINUX - Run unmodified Linux applications inside Windows. p2pvc - A point to point color terminal video chat. duband - duband1.0 对应的公版版本为 1.0 C# IconExtractor - A nodejs package that returns base64 image data for a path’s icon. BeatSaberModInstaller - Automatically installs Beat Saber mods with a single click C++ KeyDB - A Multithreaded Fork of Redis axiom - A powerful realtime node-based audio synthesizer. calamares - Distribution-independent installer framework Ray - Computer Go Program. Download:https://github.com/zakki/Ray/releases tensorflow - An Open Source Machine Learning Framework for Everyone tfs - TFS (Taobao File System) is a distributed file system similar to GFS. electron - :electron: Build cross-platform desktop apps with JavaScript, HTML, and CSS notepad-plus-plus - Notepad++ official repository nw.js - Call all Node.js modules directly from DOM/WebWorker and enable a new way of writing applications with all Web technologies. CSS airspace-hugo - Airspace theme (Hugo version) deeplearning.ai - The notes of Adrew Ng’s coursera course: deeplearning.ai. Glad to answer any related questions, just email me. uno-zen - Minimalist and Elegant theme for Ghost. Demo @ https://kikobeats.com Practice - A clean timeline theme for the Ghost CMS gso - 使用NodeJs编写的谷歌搜索代理程序. 此代码仅供学习，已停止更新，建议使用其他科学上网方案. CoffeeScript Hubot-WeChat - This is weixin/wechat adapter for hubot. Go slf4go - Simple Logger Facade for golang vugu - Vugu: A modern UI library for Go+WebAssembly (experimental) pipeline - A K8s-native Pipeline resource. chardet - detect text encoding, like python chardet, but for go clipboard - clipboard for golang mattermost-server - Open source Slack-alternative in Golang and React - Mattermost buntdb - BuntDB is an embeddable, in-memory key/value database for Go with custom indexing and geospatial support sqlx - general purpose extensions to golang’s database/sql inlets - Expose your local endpoints to the Internet gqlgen - go generate based graphql server library jsgo - GopherJS compiler, serving framework and CDN. ebiten - A dead simple 2D game library in Go feeds - golang rss/atom generator library gomail - The best way to send emails in Go. gofeed - Parse RSS and Atom feeds in Go periodize - Go library to generate periodical .mobi files influxdb - Scalable datastore for metrics, events, and real-time analytics go-epub - Go library for creating EPUB files mobi - Golang package containing Writer/Reader for MOBI format mole - cli app to create ssh tunnels textql - Execute SQL against structured text like CSV or TSV sonar-runner-plugin - Drone sonar runner plugin ldap - Basic LDAP v3 functionality for the GO programming language. mongo-go-driver - The Go driver for MongoDB imaging - Imaging is a simple image processing package for Go echo - High performance, minimalist Go web framework gorm - The fantastic ORM library for Golang, aims to be developer friendly casbin - An authorization library that supports access control models like ACL, RBAC, ABAC in Golang govalidator - [Go] Package of validators and sanitizers for strings, numerics, slices and structs go-i18n - Translate your Go program into multiple languages. inject - Package inject provides a reflect based injector. xorm - Simple and Powerful ORM for Go, support mysql,postgres,tidb,sqlite3,mssql,oracle wechat-go - go version wechat web api and message framework for building wechat robot qqbot - smartqq write by go go-android-rpc - Native Android UI via shared Golang library jetserver - Jetbrains License Server’s algorithm implemented in Golang traefik - The Cloud Native Edge Router micro - A microservice toolkit drone - Drone is a Container-Native, Continuous Delivery Platform istio - Connect, secure, control, and observe services. dep - Go dependency management tool excelize - Golang library for reading and writing Microsoft Excel™ (XLSX) files. vice - Go channels at horizontal scale (powered by message queues) material - material design for gomobile [DISCONTINUED] ews - quick and dirty Go package to send emails via Exchange using EWS instead of SMTP viper - Go configuration with fangs awesome-go - A curated list of awesome Go frameworks, libraries and software color - Color package for Go (golang) cli - A simple, fast, and fun package for building command line apps in Go gocrawl - Polite, slim and concurrent web crawler. ngrok - Introspected tunnels to localhost rsrc - Tool for embedding .ico &amp; manifest resources in Go programs for Windows. ⛺ harbor - An open source trusted cloud native registry project that stores, signs, and scans content. crane - Yet another control plane based on docker built-in swarmkit ui - Platform-native GUI library for Go. torsniff - torsniff - a sniffer that sniffs torrents from BitTorrent network gxui - An experimental Go cross platform UI library. walk - A Windows GUI toolkit for the Go Programming Language goqt - Golang bindings to the Qt cross-platform application framework. etcd - Distributed reliable key-value store for the most critical data of a distributed system gogs - Gogs is a painless self-hosted Git service. HTML k8smeetup.github.io - kubernetes.io 中文本地化翻译文档预览站点 -https://k8smeetup.github.io dockerfiles - welog - Hands on project for Meteor 101 class Hack fbctf - Platform to host Capture the Flag competitions Java epublib - a java library for reading and writing epub files apollo - Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。 wechat-api - 🗯 wechat-api by java7. rejoiner - Generates a unified GraphQL schema from gRPC microservices and other Protobuf sources haven - Haven is for people who need a way to protect their personal spaces and possessions without compromising their own privacy, through an Android app and on-device sensors log4j-redis-appender - log4j appender writing straight to Redis tensorflow-java - Tensorflow Java examples xxl-job - A lightweight distributed task scheduling framework.（分布式任务调度平台XXL-JOB） cachecloud - 搜狐视频(sohu tv)Redis私有云平台 uap-java - Java implementation of ua-parser hackerrank - My HackerRank solutions ambrose - A platform for visualization and real-time monitoring of data workflows weixin-java-tools - 微信公众号、企业号Java SDK deeplearning4j - Deeplearning4j, ND4J, DataVec and more - deep learning &amp; linear algebra for Java/Scala with GPUs + Spark che - Eclipse Che: Next-generation Eclipse IDE. Open source workspace server and cloud IDE. remote-desktop-clients - VNC, RDP, SPICE, and oVirt/RHEV/Proxmox Clients for Android and Blackberry 10 fastjson - :bullettrain_side: A fast JSON parser/generator for Java. (Aliyun Data Lake Analytics https://www.aliyun.com/product/datalakeanalytics powered by fastjson ) JavaScript BeatDrop - The ultimate content-manager for Beat Saber. Download mods, songs, and more! send - Simple, private file sharing from the makers of Firefox x-spreadsheet - A web-based JavaScript（canvas） spreadsheet dat - :floppy_disk: Share &amp; live sync files anywhere via command line spy-debugger - 微信调试，各种WebView样式调试、手机浏览器的页面真机调试。便捷的远程调试手机页面、抓包工具，支持：HTTP/HTTPS，无需USB连接设备。 fabric.js - Javascript Canvas Library, SVG-to-Canvas (&amp; canvas-to-SVG) Parser mitt - 🥊 Tiny 200 byte functional event emitter / pubsub. AriaNg-Native - A better aria2 desktop frontend than AriaNg, containing full feature of AriaNg and also has many features that AriaNg cannot implement. Webgo - Using web browser connect leela zero to analyze game go anywhere lipstick - 口红颜色可视化 - 为什么你的女神总缺一支口红 orbit-db - Peer-to-Peer Databases for the Decentralized Web husky - 🐶 Git hooks made easy boardgame.io - Open Source Game Engine for Turn-Based Games swagger-ui - Swagger UI is a collection of HTML, Javascript, and CSS assets that dynamically generate beautiful documentation from a Swagger-compliant API. jsPDF - Client-side JavaScript PDF generation for everyone. franchise - 🍟 a notebook sql client. what you get when have a lot of sequels. makegirlsmoe_web - Create Anime Characters with MakeGirlsMoe wekan - The open-source kanban (built with Meteor) elm-react-native - A react native app simulating eleme app，run ios and android. exchange-web-service - Exchange Web Service APIs for NodeJS react-native-elements - Cross Platform React Native UI Toolkit element-react - Element UI get-pixels - Reads an image into an ndarray gitment - A comment system based on GitHub Issues. store.js - Cross-browser storage for all use cases, used across the web. electron-react-boilerplate - A Foundation for Scalable Cross-Platform Apps breakdance - HTML to markdown converter. Highly pluggable, flexible and easy to use. It’s time for your markup to get down. vuex-persistedstate - 💾 Persist and rehydrate your Vuex state between page reloads. AriaNg - AriaNg, a modern web frontend making aria2 easier to use. node-bunyan - a simple and fast JSON logging module for node.js services testcafe - A Node.js tool to automate end-to-end web testing. incubator-superset - Apache Superset (incubating) is a modern, enterprise-ready business intelligence web application tesseract.js - Pure Javascript OCR for 62 Languages 📖🎉🖥 flv.js - HTML5 FLV Player hustoj - Open Source Online Judge based on PHP/C++/MySQL/Linux for ACM/ICPC and NOIP training, with easy installation. 开源OJ系统 webpack-vue-mui - start LokiJS - javascript embeddable / in-memory database riot-web - A glossy Matrix collaboration client for the web. react-native-redux-zhihudaily - 使用react-native、redux、codepush重构的知乎日报客户端 react-boilerplate - :fire: A highly scalable, offline-first foundation with the best developer experience and a focus on performance and best practices. example-multipage - Example RequireJS-based project that has multiple pages that share a common set of modules. gifify - 😻 Convert any video file to an optimized animated GIF. cobish.github.io - cobish’s blog docker-swarm-visualizer - A visualizer for Docker Swarm Mode using the Docker Remote API, Node.JS, and D3 reactSPA - A Demo SPA developed with React, ES6, Webpack (2.x), and Antd (1.0.1) 【move to react-seed】 validator.js - String validation bpmn - BPMN 2.0 execution engine bpmn-js - A BPMN 2.0 rendering toolkit and web modeler. connect-roles - Provides dynamic roles based authorisation for node.js connect and express servers. rbac - Hierarchical Role Based Access Control for NodeJS react-redux-demo - react+redux+react-router实例 react-starter-kit - 完美使用 React, Redux, and React-Router！超好用的脚手架 redux-tutorial-cn - Redux Tutorial 中文翻译 normalizr - Normalizes nested JSON according to a schema react-redux-starter-kit - Get started with React, Redux, and React-Router. GhosToro - ibird - A lightweight and flexible web development framework.✨🚀✨ fe-interview - Retro ansi terminal for front-end interview questions json-server - Get a full fake REST API with zero coding in less than 30 seconds (seriously) react-antd-demo - 基于react及antd的demo mathjs - An extensive math library for JavaScript and Node.js bootstrap-treeview - Tree View for Twitter Bootstrap - PTHospital.chrome - :warning: :hospital: Chrome浏览器插件——打开莆田系医院网站，发出警告提醒、显示医院信息。 shipyard - Composable Docker Management meteor - Meteor, the JavaScript App Platform redux-demo - A redux demo jsoneditor - A web-based tool to view, edit, format, and validate JSON medis - 💻 Medis is a beautiful, easy-to-use Mac database management application for Redis. markdown-plus - Markdown editor with extra features. Hozz - A better way to manage your hosts. redis-sentinel-ui - 简易的Redis Sentinel集群UI request - 🏊🏾 Simplified HTTP request client. superagent - Ajax for Node.js and browsers (JS HTTP client) fetch - A window.fetch JavaScript polyfill. electron-packager - Customize and package your Electron app with OS-specific bundles (.app, .exe, etc.) via JS or CLI node-webkit-updater - node-webkit autoupdater blog - blog base on express,co,mongoose,react,redux,react-router… material-ui - React components for faster and easier web development. Build your own design system, or start with Material Design. ddx - koa+react+redux nodeclub - :baby_chick:Nodeclub 是使用 Node.js 和 MongoDB 开发的社区系统 relax - New generation CMS on top of React, Redux and GraphQL ioredis - 🚀A robust, performance-focused and full-featured Redis client for Node.js. WebFrontEndStack - web front end stack: browsers, platforms, libraries, frameworks, tools etc. avalon - an elegant efficient express mvvm framework StarCraft - HTML5 version of StarCraft game Ghost - 👻 The headless Node.js CMS for professional publishing stomp-websocket - Stomp client for Web browsers and node.js apps stackedit - In-browser Markdown editor iz - Basic validation regexs (and such) for javascript node-lessons - :closed_book:《Node.js 包教不包会》 by alsotang Microscope - The Discover Meteor book’s example app. chromeos-apk - ☢️ Run Android Apps in Chrome OS OR Chrome in OS X, Linux and Windows. incubator-echarts - A powerful, interactive charting and visualization library for browser connect - Connect is a middleware layer for Node.js weixin-robot - 微信公共帐号自动回复机器人 A Node.js robot for wechat. jsoneditor - A web-based tool to view, edit and format JSON data.js - data.js 是带有消息通知的数据中心，我称其为会说话的数据。旨在让编程变得简单，世界变得美好。 Jupyter Notebook dopamine - Dopamine is a research framework for fast prototyping of reinforcement learning algorithms. fastai - The fastai deep learning library, plus lessons and tutorials tensorflow_cookbook - Code for Tensorflow Machine Learning Cookbook Kotlin ktor - Framework for quickly creating connected applications in Kotlin with minimal effort Makefile hadoop-book - Example source code accompanying O’Reilly’s “Hadoop: The Definitive Guide” by Tom White Objective-C react-native-code-push - React Native module for CodePush Others arch-prebuilt - prebuilt pkg.tar.xz files for Arch Linux trackerslist - An updated list of public BitTorrent trackers lectures - Oxford Deep NLP 2017 course gfwlist - The one and only one gfwlist here egghead.io_redux_course_notes - Notes (and partial transcription) of Dan Abramov’s Redux course videos on http://egghead.io react-router-cn - React Router 官方文档中文翻译 Rss-IT - 这个项目记录了个人订阅的一些科技人的Blog地址,欢迎大家推荐,一起来完善! 欢迎自荐…… angular-styleguide - Angular Style Guide: A starting point for Angular development teams to provide consistency through good practices. awesome-java-cn - Java资源大全中文版，包括开发库、开发工具、网站、博客、微信、微博等，由伯乐在线持续更新。 react-native-guide - React Native指南汇集了各类react-native学习资源、开源App和组件 node-style-guide - node.js style guide for node programmers node123 - node.js中文资料导航 list_of_recommender_systems - A List of Recommender Systems and Resources my-git - Individual collecting material of learning git（有关 git 的学习资料） Tutorials-for-Web-Developers - Tutorials for web developers including bash scripting, Linux commands, MongoDB. Actively updating. PHP Tieba-Cloud-Sign - 百度贴吧云签到，在服务器上配置好就无需进行任何操作便可以实现贴吧的全自动签到。配合插件使用还可实现云灌水、点赞、封禁、删帖、审查等功能 Perl ua-parser - A multi-language port of Browserscope’s user agent parser. Python spinningup - OpenAI团队的深度强化学习教程中文版 pysc2-tutorial - Tutorials for building a PySC2 bot gnome-dash-fix - Sort GNOME apps dashboard by category. DeDRM_tools - DeDRM tools for ebooks dedrm-ebook-tools - DRM Removal Tools for eBooks fashion-mnist - A MNIST-like fashion product database. Benchmark :point_right: deep-rl-tensorflow - TensorFlow implementation of Deep Reinforcement Learning papers gym - A toolkit for developing and comparing reinforcement learning algorithms. pysc2 - StarCraft II Learning Environment s2client-proto - StarCraft II Client - protocol definitions used to communicate with StarCraft II. StarData - Starcraft AI Research Dataset universe - Universe: a software platform for measuring and training an AI’s general intelligence across the world’s supply of games, websites and other applications. My-TensorFlow-tutorials - This repo contains all of my TensorFlow tutorials bilibili_danmu - B 站直播弹幕姬 Python 版 BossSensor - Hide screen when boss is approaching. XX-Net - a web proxy tool httpie - As easy as httpie /aitch-tee-tee-pie/ 🥧 Modern command line HTTP client – user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc. https://twitter.com/clihttp OnlineJudge - open source online judge based on Vue, Django and Docker. | 青岛大学开源 Online Judge | QQ群 496710125 | admin@qduoj.com ChatBotCourse - 自己动手做聊天机器人教程 ansible-playbooks - Ansible playbook collection that have been written for Ubuntu. Some of the playbooks are Elasticsearch, Mesos, AWS, MySql, Sensu, Nginx etc.. M-LOOP - M-LOOP: Machine-learning online optimization package huatian-funny - 科学地分析自己的择偶观 RocAlphaGo - An independent, student-led replication of DeepMind’s 2016 Nature publication, “Mastering the game of Go with deep neural networks and tree search” (Nature 529, 484-489, 28 Jan 2016), details of which can be found on their website https://deepmind.com/publications.html. flocker - Container data volume manager for your Dockerized application FeelUOwn - trying to be a user-friendly and hackable music player walle-web - walle - 瓦力 Devops开源项目代码部署平台 shadowsocks - bcloud - 百度网盘的linux桌面客户端 Ruby bugspots - Implementation of simple bug prediction hotspot heuristic Portus - Authorization service and frontend for Docker registry (v2) TLCL - 《快乐的 Linux 命令行》 Rust 996.ICU - Repo for counting stars and contributing. Press F to pay respect to glorious developers. ffsend - :mailbox_with_mail: Easily and securely share files from the command line. A fully featured Firefox Send client. xray - An experimental next-generation Electron-based text editor Scala C1000K-Servers - :zap: High performance websocket servers implemented by Spray-can, Netty, undertow, jetty, Vert.x, Grizzly, node.js and Go. It supports 1,200,000 active websocket connections Shell deepin-wine-wechat-arch - Tencent WeChat (com.wechat) on Deepin Wine For Archlinux ArchWSL - ArchLinux as a WSL Instance. Supports multiple install. docker-images - Official source for Docker configurations, images, and examples of Dockerfiles for Oracle products and projects scripts - scripts for work droidReverse - reverse engineering tools for android（android 逆向工程工具集） docker-oracle-xe-11g - Dockerfile of Oracle Database Express Edition 11g Release 2 TeX deeplearningbook-chinese - Deep Learning Book Chinese Translation TypeScript majestic - ⚡ Zero config GUI for Jest wired-elements - Collection of custom elements that appear hand drawn. Great for wireframes or a fun look. rap2-delos - 阿里妈妈前端团队出品的开源接口管理工具RAP第二代 apollo-client - :rocket: A fully-featured, production ready caching GraphQL client for every UI framework and GraphQL server tfjs-core - WebGL-accelerated ML // linear algebra // automatic differentiation for JavaScript. electron-builder - A complete solution to package and build a ready for distribution Electron app with “auto update” support out of the box Vue vuedarkmode - 👩‍🎨👨‍🎨 A minimalist dark design system for Vue.js. Based components designed for the insomniacs who enjoy dark interfaces as much as we do. LicenseTo the extent possible under law, ystyle has waived all copyright and related or neighboring rights to this work.","categories":[{"name":"分享","slug":"分享","permalink":"http://ystyle.top/categories/分享/"}],"tags":[{"name":"github","slug":"github","permalink":"http://ystyle.top/tags/github/"}]},{"title":"docker 1.12 的服务自动发现","slug":"docker-1-12-de-fu-wu-zi-dong-fa-xian","date":"2016-09-02T18:26:07.000Z","updated":"2016-09-03T15:12:03.000Z","comments":true,"path":"2016/09/02/docker-1-12-de-fu-wu-zi-dong-fa-xian/","link":"","permalink":"http://ystyle.top/2016/09/02/docker-1-12-de-fu-wu-zi-dong-fa-xian/","excerpt":"","text":"介绍 docker 1.12 的swarm 集群的自动发现有两种方式, virtual IP address (VIP) 与 DNS round-robin, 本文使用的是VIP的方式 准备 安装docker 1.12 以上版本 初始化swarm集群 创建一个名为docker-net 的overlay网络 开放7946 TCP/UDP , 4789 UDP 端口 初始化swarm集群部份可看我之前的博客使用docker 1.12 搭建多主机docker swarm集群 创建overlay网络查看当前的网络12345[root@swarm-manager ~]# docker network lsNETWORK ID NAME DRIVER SCOPE376f5b337bfc bridge bridge local 166bd71f7d0e host host local 9gr6bfff1rv9 ingress overlay swarm ingress 也是一个overlay网络, 可以跨主机通信, 本教程会创建一个新的 创建网络1234docker network create \\ --driver overlay \\ --opt encrypted \\ ## 是否使用加密 my-network 查看123456[root@swarm-manager ~]# docker network lsNETWORK ID NAME DRIVER SCOPE376f5b337bfc bridge bridge local 166bd71f7d0e host host local 9gr6bfff1rv9 ingress overlay swarm aoqs3p835s5g docker-net overlay swarm 在swarm上用overlay 网络创建一个服务12345docker service create \\ --replicas 3 \\ --name my-web \\ # 服务名为my-web --network docker-net \\ daocloud.io/nginx:alpine # 使用国内的镜像, alpine版的体积很小,下载会快点 查看服务123456# 本次只起了一个manager节点, 所以容器都跑在这台机器上了[root@swarm-manager ~]# docker service ps my-webID NAME IMAGE NODE DESIRED STATE CURRENT STATE ERRORbavjn0xhxi35nx6n9kn33yfga my-web.1 daocloud.io/nginx:alpine swarm-manager Running Running 31 minutes ago cibuo8zqp78z1xb8cu3v4pkmj my-web.2 daocloud.io/nginx:alpine swarm-manager Running Running 31 minutes ago 0pkg1eoa0onku71cbp1hqtcv5 my-web.3 daocloud.io/nginx:alpine swarm-manager Running Running 31 minutes ago 在一个网络上有哪些容器可以在network inspect的Containers节点看到12345678910111213141516171819[root@swarm-manager ~]# docker network inspect docker-net[ &#123; \"Name\": \"docker-net\", \"Id\": \"aoqs3p835s5glx69hi46ou2dw\", .... \"Containers\": &#123; \"1c87aae81449b448983924017fc4037b7b1e9e1eaa03bc55745b0167ab4e495b\": &#123; \"Name\": \"my-web.1.bavjn0xhxi35nx6n9kn33yfga\", \"EndpointID\": \"2ab6c7e698ce69ec318a211dd0386533de1a0d8f2070bd4ee6cdc43cb94dcd0a\", \"MacAddress\": \"02:42:0a:00:09:03\", \"IPv4Address\": \"10.0.9.3/24\", \"IPv6Address\": \"\" &#125;, ..... &#125;, ..... &#125;] 查看服务使用的vip12[root@swarm-manager ~]# docker service inspect --format='&#123;&#123;.Endpoint.VirtualIPs&#125;&#125;' my-web[&#123;aoqs3p835s5glx69hi46ou2dw 10.0.9.2/24&#125;] 演示使用服务名访问nginx先创建一个同样使用docker-net的overlay网络 的服务 12345docker service create \\ --name my-busybox \\ --network docker-net \\ busybox \\ sleep 3000 等待服务启动后, 用docker exec 连接进busybox的容器里 1234[root@swarm-manager ~]# docker service ps my-busyboxID NAME IMAGE NODE DESIRED STATE CURRENT STATE ERROR7ftv4wj1g3vu8g7mfghx8du65 my-busybox.1 busybox swarm-manager Running Running about a minute ago [root@swarm-manager ~]# docker exec -ti my-busybox.1.7ftv4wj1g3vu8g7mfghx8du65 sh 在busybox容器. 向DNS查询nginx服务的vip1234567[root@swarm-manager ~]# docker exec -ti my-busybox.1.7ftv4wj1g3vu8g7mfghx8du65 sh/ # nslookup my-webServer: 127.0.0.11Address 1: 127.0.0.11Name: my-webAddress 1: 10.0.9.2 10.0.9.2 # 和在外面看到的一样 在busybox容器. 向DNS查询nginx服务所有容器的ip地址12345678/ # nslookup tasks.my-webServer: 127.0.0.11Address 1: 127.0.0.11Name: tasks.my-webAddress 1: 10.0.9.5 my-web.3.0pkg1eoa0onku71cbp1hqtcv5.docker-netAddress 2: 10.0.9.4 my-web.2.cibuo8zqp78z1xb8cu3v4pkmj.docker-netAddress 3: 10.0.9.3 my-web.1.bavjn0xhxi35nx6n9kn33yfga.docker-net 在busybox容器, 通过服务名访问nginx12345678910111213141516171819/ # wget -O- my-webConnecting to my-web (10.0.9.2:80)&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;/title&gt;&lt;style&gt; body &#123; width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;&lt;p&gt;If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.&lt;/p&gt;..... 结语通过实验可以看出, 在swarm集群中使用overlay网络时, 不同服务之间可以使用服务名(docker service name)互相访问","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://ystyle.top/tags/docker/"}]},{"title":"maven 项目转为gradle 项目","slug":"maven-xiang-mu-zhuan-wei-gradle-xiang-mu","date":"2016-08-18T01:16:19.000Z","updated":"2016-08-18T02:14:25.000Z","comments":true,"path":"2016/08/18/maven-xiang-mu-zhuan-wei-gradle-xiang-mu/","link":"","permalink":"http://ystyle.top/2016/08/18/maven-xiang-mu-zhuan-wei-gradle-xiang-mu/","excerpt":"","text":"maven 项目转为gradle 项目1gradle init --type pom","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"Maven","slug":"Maven","permalink":"http://ystyle.top/tags/Maven/"},{"name":"gradle","slug":"gradle","permalink":"http://ystyle.top/tags/gradle/"}]},{"title":"windows最小化搭建react-native环境","slug":"windowszui-xiao-hua-da-jian-react-nativehuan-jing","date":"2016-07-30T14:09:37.000Z","updated":"2016-08-18T02:11:50.000Z","comments":true,"path":"2016/07/30/windowszui-xiao-hua-da-jian-react-nativehuan-jing/","link":"","permalink":"http://ystyle.top/2016/07/30/windowszui-xiao-hua-da-jian-react-nativehuan-jing/","excerpt":"","text":"准备 git for windows java gradle node.js react-native-cli android-sdk 安装git下载git 安装java配置好JAVA_HOME环境变量,并把JAVA_HOME/bin添加到path里 JDK版本管理工具 安装gradle下载gradle: (若安装过idea之类的工具可以看看~/.gradle/wrapper/dists目录下有没有) 配置GRADLE_HOME环境变量, 并把GRADLE_HOME/bin添加到path里 安装node.js下载Node.js nvm node版本管理工具 安装react-native-cli12# 打开git bashnpm isntall -g react-native-cli 安装android-sdk 下载地址 配置ANDROID_HOME环境变量, 并把%ANDROID_HOME%/tools %ANDROID_HOME%/platform-tools添加到path里 打开sdk-manager下载以下组件 Tools/Android SDK toll Tools/Android SDK Platform-tools Tools/Adnroid SDK Build-tools 23.0.1 Android 6.0(API 23)/SDK Platform 23 Android 6.0(API 23)/Google APIs Extras/Android Support Repository 35 Extras/Google USB Driver 换android 的源 看最后一段 测试 用USB连接手机 打开git bash 初始化项目1234react-native init democd demoreact-native startreact-natve run-android 然后用喜欢的编辑器或IDE 打开项目开发即可 配置调试环境用chrome 浏览器打开, http://localhost:8081/debugger-ui 按F12 打开开发控制台 拿走打机摇一摇, 在弹出的开发者菜单上选择Debug JS Remotely 启用代码热更新, 如果想电脑上改js,手机限时生效可以把Enable live Reload 和 Enable Hot Reloading 打开 再次打开手机的开发者菜单, 选择reload 如果网页上最后一行显示为: Status: Debugger session #0 active. 时说明已经连接上了调试环境. 转到chrome开发者控制台Rouces页签上,在左边debuggerWorker.js 下载找到要调试的js文件,加上断点,即可调试 注意事项 若一开始就显示红屏, 不能下载js之类的, 在手机可以打开react-native应用的开发者菜单(摇一摇手机), 选择dev setting, 在最后一项设置电脑的ip与端口. 若手机是android 5.0以上红屏的话,在git bash上执行adb reverse tcp:8081 tcp:8081","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"react","slug":"react","permalink":"http://ystyle.top/tags/react/"},{"name":"react-native","slug":"react-native","permalink":"http://ystyle.top/tags/react-native/"}]},{"title":"使用docker 1.12 搭建多主机docker swarm集群","slug":"shi-yong-docker-1-12-da-jian-duo-zhu-ji-docker-swarmji-qun","date":"2016-07-01T23:03:32.000Z","updated":"2016-09-01T12:47:15.000Z","comments":true,"path":"2016/07/01/shi-yong-docker-1-12-da-jian-duo-zhu-ji-docker-swarmji-qun/","link":"","permalink":"http://ystyle.top/2016/07/01/shi-yong-docker-1-12-da-jian-duo-zhu-ji-docker-swarmji-qun/","excerpt":"","text":"使用docker 1.12 搭建多主机docker swarm集群准备 准备至少两台的centos 7 主机(全新最小安装, 可以使用虚拟机安装) 开放端口2377 tcp端口, 7946 4789 tcp udp 端口 本文使用192.168.99.101(hostname:centos-node4) 作为swarm manager 192.168.99.102(hostname:centos-node5) 作为swarm agent1 安装docker engine 1.12在每台机器上执行以下命令123456789101112# sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-'EOF'[dockerrepo]name=Docker Repositorybaseurl=https://yum.dockerproject.org/repo/main/centos/7/enabled=1gpgcheck=1gpgkey=https://yum.dockerproject.org/gpgEOF# sudo yum install docker-engine# sudo systemctl enable docker# sudo systemctl start docker 安装完后查看docker 版本12345678910111213141516[root@centos-node4 ~]# docker versionClient: Version: 1.12.0 API version: 1.24 Go version: go1.6.3 Git commit: 8eab29e Built: OS/Arch: linux/amd64Server: Version: 1.12.0 API version: 1.24 Go version: go1.6.3 Git commit: 8eab29e Built: OS/Arch: linux/amd64 开放端口相关命令123456firewall-cmd --zone=public --add-port=2377/tcp --permanentfirewall-cmd --zone=public --add-port=7946/tcp --permanentfirewall-cmd --zone=public --add-port=7946/udp --permanentfirewall-cmd --zone=public --add-port=4789/tcp --permanentfirewall-cmd --zone=public --add-port=4789/udp --permanentfirewall-cmd --reload 新版docker swarm 命令详情有关集群的docker命令如下： docker swarm：集群管理，子命令有init, join,join-token, leave, update docker node：节点管理，子命令有demote, inspect,ls, promote, rm, ps, update docker service：服务管理，子命令有create, inspect, ps, ls ,rm , scale, update docker stack/deploy：试验特性，用于多应用部署 创建swarm 集群 查看docker swarm 命令说明 123456789101112131415161718[root@centos-node4 ~]# docker swarm -hFlag shorthand -h has been deprecated, please use --helpUsage: docker swarm COMMANDManage Docker SwarmOptions: --help Print usageCommands: init Initialize a swarm join Join a swarm as a node and/or manager join-token Manage join tokens update Update the swarm leave Leave a swarmRun 'docker swarm COMMAND --help' for more information on a command. 在swarm manager(centos-node4:192.168.99.101)初始化swarm集群 用--listen-addr指定监听的ip与端口123#命令格式: docker swarm init --listen-addr &lt;MANAGER-IP&gt;:&lt;PORT&gt;[root@centos-node4 ~]# docker swarm init --listen-addr 192.168.99.101:2377Swarm initialized: current node (a60d5c3ttymvtozr46uvk17q4) is now a manager. 查看结果 123[root@centos-node4 ~]# docker node lsID HOSTNAME MEMBERSHIP STATUS AVAILABILITY MANAGER STATUSa60d5c3ttymvtozr46uvk17q4 * centos-node4 Accepted Ready Active Leader 把swarm-agent1(centos-node5: 192.168.99.102)添加到swarm集群 在swarm-agent1上执行:123#命令格式: docker swarm join &lt;MANAGER-IP&gt;:&lt;PORT&gt;[root@centos-node5 ~]# docker swarm join 192.168.99.101:2377This node joined a Swarm as a worker. 在swarm manager查看结果 1234[root@centos-node4 ~]# docker node lsID HOSTNAME MEMBERSHIP STATUS AVAILABILITY MANAGER STATUS0ypcw58hjlcvr0xqbtizmau62 centos-node5 Accepted Ready Activea60d5c3ttymvtozr46uvk17q4 * centos-node4 Accepted Ready Active Leader 创建一个overlay 跨主机网络 查看原有网络 1234567[root@centos-node4 ~]# docker network lsNETWORK ID NAME DRIVER SCOPEabec77415f48 bridge bridge locale2fff9d572a6 docker_gwbridge bridge local166bd71f7d0e host host local9gr6bfff1rv9 ingress overlay swarm1d2bfc590294 none null local 可以看到在swarm上默认已有一个名为ingress的overlay 网络,默认在swarm里使用，本文会创建一个新的 创建一个新的overlay网络 12345678910 [root@centos-node4 ~]# docker network create --driver overlay docker-netaoqs3p835s5glx69hi46ou2dw [root@centos-node4 ~]# docker network lsNETWORK ID NAME DRIVER SCOPEabec77415f48 bridge bridge localaoqs3p835s5g docker-net overlay swarme2fff9d572a6 docker_gwbridge bridge local166bd71f7d0e host host local9gr6bfff1rv9 ingress overlay swarm1d2bfc590294 none null local 新的网络(docker-net)已创建 在新的跨主机overlay 网络(docker-net)上创建应用 部署 用alpine镜像在docker-net网络上启动两个实例, 并编排为一组服务 12[root@centos-node4 ~]# docker service create --replicas 2 --name helloworld --network=docker-net alpine ping docker.com5lgdq3ihiez0o7h2uegu4fgd3 查看部署结果 1234567[root@centos-node4 ~]# docker service lsID NAME REPLICAS IMAGE COMMAND5lgdq3ihiez0 helloworld 0/2 alpine ping docker.com[root@centos-node4 ~]# docker service tasks helloworldID NAME SERVICE IMAGE LAST STATE DESIRED STATE NODEeul3bus45qz3b555wekotdmo5 helloworld.1 helloworld alpine Running 14 seconds Running centos-node555uhq6xxcv53xlkqv2f0be9b9 helloworld.2 helloworld alpine Running 14 seconds Running centos-node4 可以看到两个实例分别运行在两个节点上 测试两个主机的网络是否能互通 分别查看两个实例的名称 123456789# 在swarm-manager 上执行[root@centos-node4 ~]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESf4a197abdb0b alpine:latest \"ping docker.com\" 42 minutes ago Up 42 minutes helloworld.2.55uhq6xxcv53xlkqv2f0be9b9# 在swarm-agnet1 上执行[root@centos-node5 ~]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES39cc35cd54b5 alpine:latest \"ping docker.com\" 50 seconds ago Up 49 seconds helloworld.1.eul3bus45qz3b555wekotdmo5 在swarm-manager 上测试 1234567891011[root@centos-node4 ~]# docker exec -ti helloworld.2.55uhq6xxcv53xlkqv2f0be9b9 sh/ # ping helloworld.1.eul3bus45qz3b555wekotdmo5PING helloworld.1.eul3bus45qz3b555wekotdmo5 (10.0.9.3): 56 data bytes64 bytes from 10.0.9.3: seq=0 ttl=64 time=0.514 ms64 bytes from 10.0.9.3: seq=1 ttl=64 time=0.508 ms64 bytes from 10.0.9.3: seq=2 ttl=64 time=0.381 ms64 bytes from 10.0.9.3: seq=3 ttl=64 time=0.408 ms^C--- helloworld.1.eul3bus45qz3b555wekotdmo5 ping statistics ---4 packets transmitted, 4 packets received, 0% packet lossround-trip min/avg/max = 0.381/0.452/0.514 ms 在swarm-agent1 上测试 12345678910111213141516[root@centos-node5 ~]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES39cc35cd54b5 alpine:latest \"ping docker.com\" 50 seconds ago Up 49 seconds helloworld.1.eul3bus45qz3b555wekotdmo5[root@centos-node5 ~]# docker exec -ti helloworld.1.eul3bus45qz3b555wekotdmo5 sh/ # ping helloworld.2.55uhq6xxcv53xlkqv2f0be9b9PING helloworld.2.55uhq6xxcv53xlkqv2f0be9b9 (10.0.9.4): 56 data bytes64 bytes from 10.0.9.4: seq=0 ttl=64 time=0.892 ms64 bytes from 10.0.9.4: seq=1 ttl=64 time=0.463 ms64 bytes from 10.0.9.4: seq=2 ttl=64 time=0.462 ms64 bytes from 10.0.9.4: seq=3 ttl=64 time=0.478 ms64 bytes from 10.0.9.4: seq=4 ttl=64 time=0.468 ms64 bytes from 10.0.9.4: seq=5 ttl=64 time=0.459 ms^C--- helloworld.2.55uhq6xxcv53xlkqv2f0be9b9 ping statistics ---6 packets transmitted, 6 packets received, 0% packet lossround-trip min/avg/max = 0.459/0.537/0.892 ms 现在新版的docker swarm 管理非常简单, 可以快速的搭建起一个跨主机的集群并部署应用 dokcer swarm自带的负载均衡创建一组服务1docker service create --replicas 2 --name whoami -p 8080:80 daocloud.io/nginx:alpine 访问服务(可以多执行几次)12# 访问地址格式: swarm-manager.ip + (-p映射的端口)curl -v 192.168.99.101:8080 然后用docker logs 查看容器中nginx的访问日志, 可以现两个容器都有访问记录","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://ystyle.top/tags/docker/"}]},{"title":"docker + jenkins + git + maven自动化构建与部署","slug":"docker-jenkins-git-mavenzi-dong-hua-gou-jian-yu-bu-shu","date":"2016-04-16T10:37:15.000Z","updated":"2016-07-03T05:11:13.000Z","comments":true,"path":"2016/04/16/docker-jenkins-git-mavenzi-dong-hua-gou-jian-yu-bu-shu/","link":"","permalink":"http://ystyle.top/2016/04/16/docker-jenkins-git-mavenzi-dong-hua-gou-jian-yu-bu-shu/","excerpt":"","text":"docker + jenkins + git + maven自动化构建与部署准备工作 安装好最新docker docker 分别pull 以下镜像 jenkins:2.0-beta-1 tomcat mysql(mysql只用来做测试项目的数据库,有其它数据库服务器的可以不下载) 下载maven 解压mkdir -p /dockerworkspace/maven &amp;&amp; tar zxf apache-maven-3.3.9-bin.tar.gz -C /dockerworkspace/maven 下载jdk tar zxf jdk*.tar.gz -C /dockerworkspace/java/ &amp;&amp; mv /dockerworkspace/java/jdk* /dockerworkspace/java/jdk 本教程所有工具和数据目录存放于/dockerworkspace目录下 安装jenkins1234567docker run -d --name jenkins -p 8080:8080 -p 50000:50000 -v /dockerworkspace/jenkins:/var/jenkins_home -v /dockerworkspace/maven/apache-maven-3.3.9:/usr/local/maven -v /dockerworkspace/java/jdk:/usr/local/jdk jenkins:2.0-beta-1 访问jenkins:8080(jenkins改成服务器地址) ,然后输入以下查看到的密码Unlock Jenkins1cat /dockerworkspace/jenkins/secrets/initialAdminPassword Customize Jenkins步骤时选择左边的Install suggested plugins 等待插件安装完成, 然后填写管理员信息 配置Jenkins 登陆jenkins, 进入系统管理-插件管理-可选插件 搜索ssh plugin 然后安装, 安装界面选择安装好后重启jenkins 进入系统管理-系统管理-可选插件 - SSH remote hosts 填写部署tomcat项目的host信息 设置邮件发送服务器 进入系统管理-系统管理-Jenkins Location 中 系统管理员邮件地址 邮件通知 中QQ企业邮箱设置如下(发件人的邮箱地址要和上面系统管理员邮件地址一致不然会报错) JDK配置 进入系统管理-Global Tool Configuration - jdk 点新增JDK,别名:jdk JAVA_HOME填写/usr/local/jdk(我截图里用的是ibm家的jdk) Maven配置 进入系统管理-Global Tool Configuration - Maven 点新增Maven,别名:maven MAVEN_HOME填写/usr/local/maven 新建测试项目本教程中git管理端用的是gogs 创建jenkins中的maven 项目 在jenkins首页点击新建选择构建一个maven项目 填写项目名称test_tomcat (如果没有这项请安装插件Maven Integration plugin) 源码管理中选择git, 填写项目的git信息(Credentials点新增可以添加git的认证信息,支持帐户名密码,ssh key 等方式. 源码浏览器在构建项目时的修改记录可以直接连接到git平台) 构建触发器 身份验证令牌 可以随意填写一个任意长度的字符串, 也可以填写uuid之类的, 并记录下来, 以后会用到 Post Steps (部署部份配合主机上的一人脚本使用,脚本内容往下看) 选择Run only if build succeeds只在构建成功时运行 Add post-build step 选择Execute shell script on remote host using ssh 然后选择服务器和执行脚本信息 在gogs上创建git hook (这一步在gitlab或github应该也有相应的方法) 进入上面构建的git项目首页-仓库设置-管理git钩子-post-update 填写以下脚本 (请把环境变量改为自己相应的服务器信息)12345678910111213141516#!/bin/sh# 请修改以下环境变量SERVER=http://127.0.0.1:8080 #jenkins服务器地址TOKEN=jenkins1270018080hosttesttomcat #jenkins项目的 身份验证令牌JENKINS_USER=admin #jenkins用户JENKINS_PWD=admin # jenkins用户密码JENKINS_PROJECT=test_tomcat # jenkins项目名echo \"Startting Build War File On Jenkins's Server\"echo \"Setting Token On The Jenkins's Server......\"CRUMB=$(curl -s --user $JENKINS_USER:$JENKINS_PWD \\ $SERVER/crumbIssuer/api/xml?xpath=concat\\(//crumbRequestField,%22:%22,//crumb\\))echo \"Trigger Jenkins's Server Start Building......\"curl -s --user $JENKINS_USER:$JENKINS_PWD -H \"$CRUMB\" $SERVER/job/$JENKINS_PROJECT/build?token=$TOKENecho \"Jenkins's Server Build Success!\" tomcat 服务器配置1234567docker run -d --name test_tomcat -p 8888:8080 -v /dockerworkspace/tomcat/webapps:/usr/local/tomcat/webapps -v /dockerworkspace/java/jdk:/usr/local/jdk -e \"JAVA_HOME=/usr/local/jdk\" tomcat 测试用mysql服务器1docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql 创建一个脚本文件vim /dockerworkspace/tomcat/deploy.sh 内容如下 12345678910111213141516171819202122232425262728#!/bin/shSERVER=http://127.0.0.1:8080 #jenkins服务器地址TOKEN=jenkins1270018080hosttesttomcat #jenkins项目的 身份验证令牌JENKINS_USER=admin #jenkins用户JENKINS_PWD=admin # jenkins用户密码JENKINS_PROJECT=test_tomcat # jenkins项目名MAVEN_GROUPID=net.lxy520.test_tomcat #maven项目pom.xml的groupIdMAVEN_NAME=ROOT #maven项目pom.xml的groupIdMAVEN_VERSION=1.2.6 #maven项目pom.xml的groupIdCONTAINER=test_tomcat #tomcat docker 的容器id或名称echo \"设置Jenkins服务器为$SERVER\"echo \"向服务器请求token\"CRUMB=$(curl -s --user $JENKINS_USER:$JENKINS_PWD \\ $SERVER/crumbIssuer/api/xml?xpath=concat\\(//crumbRequestField,%22:%22,//crumb\\))echo \"下载war文件......\"curl -s --user $JENKINS_USER:$JENKINS_PWD -H \"$CRUMB\" \"$SERVER/job/$JENKINS_PROJECT/lastStableBuild/$&#123;MAVEN_GROUPID&#125;\\$$&#123;MAVEN_NAME&#125;/artifact/$MAVEN_GROUPID/$MAVEN_NAME/$MAVEN_VERSION/$&#123;MAVEN_NAME&#125;-$&#123;MAVEN_VERSION&#125;.war\" -o $&#123;MAVEN_NAME&#125;-$&#123;MAVEN_VERSION&#125;.warecho \"下载完成!\"CURRENT=`pwd`echo \"临时存放路径:$CURRENT/$&#123;MAVEN_NAME&#125;-$&#123;MAVEN_VERSION&#125;.war\"echo \"暂停Tomcat服务...\"docker stop $CONTAINERecho \"覆盖项目...\"rm -rf /dockerworkspace/tomcat/webapps/ROOT.war /dockerworkspace/tomcat/webapps/ROOTmv $&#123;MAVEN_NAME&#125;-$&#123;MAVEN_VERSION&#125;.war /dockerworkspace/tomcat/webapps/ROOT.warecho \"重启Tomcat服务...\"docker start $CONTAINERecho \"Tomcat启动成功.\" 测试在本地项目中git push, 查看jenkins会不会自动构建,然后检查docker中的容器是否正确部署","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://ystyle.top/tags/docker/"},{"name":"GIT","slug":"GIT","permalink":"http://ystyle.top/tags/GIT/"},{"name":"Jenkins","slug":"Jenkins","permalink":"http://ystyle.top/tags/Jenkins/"},{"name":"Maven","slug":"Maven","permalink":"http://ystyle.top/tags/Maven/"}]},{"title":"VBox虚拟机安装Remix OS","slug":"vboxxu-ni-ji-an-zhuang-remix-os","date":"2016-03-25T15:59:42.000Z","updated":"2016-08-26T02:14:01.000Z","comments":true,"path":"2016/03/25/vboxxu-ni-ji-an-zhuang-remix-os/","link":"","permalink":"http://ystyle.top/2016/03/25/vboxxu-ni-ji-an-zhuang-remix-os/","excerpt":"","text":"VBox虚拟机安装Remix OS下载下载Remix 创建虚拟机选择64位的 内存1G以上 一定要VHD的vdi的启动时会卡在命令行界面 硬盘看着给 创建要虚拟机里在设置里把显存调成最大,并启用3D加速 在光盘里添加linux的安装镜像 然后选中控制器IDE再新增一个光驱, 选择留空 安装RemixOS启动虚拟机 用lsblk查看添加的硬盘名称是什么, 一般是sda, 然后运行cfdisk (图片的A是截图不小心按到的) 12lsblkcfdisk 进来用左右键选择New然后回车, 再选择Write回车输入yes回车, 然后再选择Qite退出 然后格式化分区, 执行mkfs.ext4 /dev/sda1 (忘记截图了) 在虚拟机菜单分配光盘, 在没有选择iso的那个添加Remix的镜像 接下来挂载分区 1234567891011121314151617181920# 新建目录以挂载iso和虚拟硬盘mkdir /mnt/remixmkdir /mnt/cdromlsblk ## 用lsblk 可看SIZE列为2.5G的NAME字段是sr1,所以/dev/sr1就是Remix的ios镜像 (查看下图)# 挂载镜像和目录mount /dev/sda1 /mnt/remixmount /dev/sr1 /mnt/cdrom## 如果上面完成了， 接下来直接复制下面的命令执行就行了。## 目的是拷贝iso里的文件到虚拟机的硬盘里。## 拷贝这些文件到虚拟硬盘cp /mnt/cdrom/system.img /mnt/remixcp /mnt/cdrom/initrd.img /mnt/remixcp /mnt/cdrom/ramdisk.img /mnt/remixcp /mnt/cdrom/kernel /mnt/remix## 创建data分区（其实就是虚拟机硬盘的一个目录，不是分区）cd /mnt/remix/mkdir datachmod 777 -R /mnt/remix/data 安装grub引导 123grub-install --root-directory=/mnt/remix /dev/sda# 新建grub.cfg文件, 添加启动项vim /mnt/remix/boot/grub/grub.cfg 文本如下 12345678910set default=0set timeout=3set gfxmode=1024x768terminal_output gfxtermmenuentry &apos;Remix OS For PC&apos; --class android-x86 &#123; search --file --no-floppy --set=root /kernel linux /kernel root=/dev/ram0 androidboot.hardware=remix_cn_x86_64 androidboot.selinux=permissive quiet SRC=/ DATA=/data initrd /initrd.img&#125; 安装好后目录是这样的 12cd /mnt/remixls 重启进入RemixOS直接退出关闭虚拟机,然后在设置里移除两个iso镜像 启动RemixOS","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"vbox","slug":"vbox","permalink":"http://ystyle.top/tags/vbox/"},{"name":"RemixOS","slug":"RemixOS","permalink":"http://ystyle.top/tags/RemixOS/"}]},{"title":"docker + swarm 集群","slug":"docker-swarm-ji-qun","date":"2016-03-18T15:22:51.000Z","updated":"2016-03-18T16:14:10.000Z","comments":true,"path":"2016/03/18/docker-swarm-ji-qun/","link":"","permalink":"http://ystyle.top/2016/03/18/docker-swarm-ji-qun/","excerpt":"","text":"token方式 以虚拟机方式搭建集群练练手 安装swarm12docker run --rm swarm create6a2d606bb3155b4428d0dc483cff6800 创建Docker虚拟机123docker-machine.exe create -d virtualbox swarm-masterdocker-machine.exe create -d virtualbox swarm-node1docker-machine.exe create -d virtualbox swarm-node2 搭建swarm集群创建swarm-master 12345678910eval $(docker-machine.exe env swarm-master)docker run -d -p 3376:3376 -t \\-v /var/lib/boot2docker:/carts:ro swarm manage \\-H 0.0.0.0:3376 \\--tlsverify --tlscacert=/certs/ca.pem \\--tlscert=/certs/server.pem \\--tlskey=/certs/server-key.pem \\token://6a2d606bb3155b4428d0dc483cff6800docker run -d swarm join --addr=$(docker-machine.exe ip swarm-master):2376 token://6a2d606bb3155b4428d0dc483cff6800 创建swarm-node 12345eval $(docker-machine.exe env swarm-node1)docker run -d swarm join --addr=$(docker-machine.exe ip swarm-node1):2376 token://6a2d606bb3155b4428d0dc483cff6800eval $(docker-machine.exe env swarm-node2)docker run -d swarm join --addr=$(docker-machine.exe ip swarm-node2):2376 token://6a2d606bb3155b4428d0dc483cff6800 管理Swarm集群12export DOCKER_HOST=$(docker-machine ip swarm-master):3376docker info","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://ystyle.top/tags/docker/"},{"name":"swarm","slug":"swarm","permalink":"http://ystyle.top/tags/swarm/"}]},{"title":"docker + swarm + etcd 集群搭建","slug":"docker-swarm-etcd-ji-qun-da-jian","date":"2016-03-18T15:16:21.000Z","updated":"2016-03-18T16:13:36.000Z","comments":true,"path":"2016/03/18/docker-swarm-etcd-ji-qun-da-jian/","link":"","permalink":"http://ystyle.top/2016/03/18/docker-swarm-etcd-ji-qun-da-jian/","excerpt":"","text":"安装Swarm集群环境信息服务器: 192.168.99.100 centos-node1 192.168.99.101 centos-node2 192.168.99.102 centos-node3 集群信息: etc服务器: 192.168.99.100:2379 swarm manage: 192.168.99.101:3376 swarm-node1: 192.168.99.100:2375 swarm-node2: 192.168.99.101:2375 swarm-node3: 192.168.99.102:2375 准备 在所有的机器上安装dokcer 在centos-node1 上docker pull ystyle/etcd (官方的下载不了,自己做了个一样的) 在所有机器上dokcer pull swarm 以上三步可以用docker-machine完成 开放所有机器的2375端口, centos-node1的2379端口,centos-node2的3376端口 安装etcd k-v数据库在centos-node1上执行: 1234567891011121314# 设置当前host的ipexport HOSTIP=192.168.99.100# 启动etcd `k-v`服务器docker run -d -v /etc/ssl/certs:/etc/ssl/certs -p 4001:4001 -p 2380:2380 -p 2379:2379 \\ --name etcd ystyle/etcd \\ -name etcd0 \\ -advertise-client-urls http://$&#123;HOSTIP&#125;:2379,http://$&#123;HOSTIP&#125;:4001 \\ -listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \\ -initial-advertise-peer-urls http://$&#123;HOSTIP&#125;:2380 \\ -listen-peer-urls http://0.0.0.0:2380 \\ -initial-cluster-token etcd-cluster-1 \\ -initial-cluster etcd0=http://$&#123;HOSTIP&#125;:2380 \\ -initial-cluster-state new 加入集群 在centos-node1执行: 1docker run -d swarm join --addr=192.168.99.100:2375 etcd://192.168.99.100:2379/swarm 在centos-node2执行: 1docker run -d swarm join --addr=192.168.99.101:2375 etcd://192.168.99.100:2379/swarm 在centos-node3执行: 1docker run -d swarm join --addr=192.168.99.102:2375 etcd://192.168.99.100:2379/swarm 启动swarm manage在centos-node2上执行123456789101112131415161718# 启动swarm managedocker run -d -p 3376:3376 -t \\ swarm manage \\-H 0.0.0.0:3376 \\etcd://192.168.99.100:2379/swarm# 检查swarm节点列表docker run --rm swarm list etcd://192.168.99.100:2379/swarm# 查看swarm集群信息export DOCKER_HOST=192.168.99.101:3376docker info# 测试docker run --rm -p 8080:80 nginx:alpinedocker ps -a # 查看nginx安装到哪台机器上了curl -L http://nginx_host:8080 记录 如果docker info 出现Error: ID duplicated.删掉/etc/docker/key.json文件(我的虚拟机是直接复制出来的) 参考资料https://docs.docker.com/v1.5/swarm/discovery/#using-etcd https://docs.docker.com/engine/userguide/networking/get-started-overlay/ https://github.com/docker/swarm https://github.com/coreos/etcd https://docs.docker.com/engine/installation/linux/centos/","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://ystyle.top/tags/docker/"},{"name":"swarm","slug":"swarm","permalink":"http://ystyle.top/tags/swarm/"},{"name":"etcd","slug":"etcd","permalink":"http://ystyle.top/tags/etcd/"}]},{"title":"使用hadoop+中文分词统计小说里的用词频率","slug":"shi-yong-hadoop-zhong-wen-fen-ci-tong-ji-xiao-shuo-li-de-yong-ci-pin-lu","date":"2016-02-22T06:24:16.000Z","updated":"2016-04-24T04:04:32.000Z","comments":true,"path":"2016/02/22/shi-yong-hadoop-zhong-wen-fen-ci-tong-ji-xiao-shuo-li-de-yong-ci-pin-lu/","link":"","permalink":"http://ystyle.top/2016/02/22/shi-yong-hadoop-zhong-wen-fen-ci-tong-ji-xiao-shuo-li-de-yong-ci-pin-lu/","excerpt":"","text":"使用hadoop+中文分词统计小说里的用词频率 事情是这样的, 某小说贴吧吧友开玩笑说 某作者最常使用的词语是xxxx , 然后就突发奇想地想用工具分析一下 环境系统: ArchLinux 软件: hadoop 2.7 准备下载hadoop: 下载地址 下载分词插件: 下载地址 1.解压hadoop-2.7.0.tar.gz: tar cxf hadoop-2.7.0.tar.gz 我的解压到/home/ystyle/Applications/hadoop-2.7.0下面了(我下载时是hadoop-2.7.0.tar.gz) 2.设置环境变量vim ~/.bashrc12export HADOOP_INSTALL=/home/ystyle/Applications/hadoop-2.7.0export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin 然后再执行 source ~/.bashrc PS: 这里使用hadoop的单机模式 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475package net.ystyle.hadoop;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.Path;import org.apache.hadoop.io.IntWritable;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.Job;import org.apache.hadoop.mapreduce.Mapper;import org.apache.hadoop.mapreduce.Reducer;import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;import org.apache.hadoop.util.GenericOptionsParser;import org.wltea.analyzer.core.IKSegmenter;import org.wltea.analyzer.core.Lexeme;import java.io.IOException;import java.io.StringReader;public class WordCount &#123; public static class TokenizerMapper extends Mapper&lt;Object, Text, Text, IntWritable&gt;&#123; private final static IntWritable one = new IntWritable(1); private Text word = new Text(); public void map(Object key, Text value, Context context ) throws IOException, InterruptedException &#123; IKSegmenter iks = new IKSegmenter(new StringReader(value.toString()), true); Lexeme t; while ((t = iks.next()) != null) &#123; word.set(t.getLexemeText()); context.write(word, one); &#125; &#125; &#125; public static class IntSumReducer extends Reducer&lt;Text,IntWritable,Text,IntWritable&gt; &#123; private IntWritable result = new IntWritable(); public void reduce(Text key, Iterable&lt;IntWritable&gt; values, Context context ) throws IOException, InterruptedException &#123; int sum = 0; for (IntWritable val : values) &#123; sum += val.get(); &#125; result.set(sum); context.write(key, result); &#125; &#125; public static void main(String[] args) throws Exception &#123; Configuration conf = new Configuration(); String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs(); if (otherArgs.length &lt; 2) &#123; System.err.println(\"Usage: wordcount &lt;in&gt; [&lt;in&gt;...] &lt;out&gt;\"); System.exit(2); &#125; Job job = Job.getInstance(conf, \"word count\"); job.setJarByClass(WordCount.class); job.setMapperClass(TokenizerMapper.class); job.setCombinerClass(IntSumReducer.class); job.setReducerClass(IntSumReducer.class); job.setOutputKeyClass(Text.class); job.setOutputValueClass(IntWritable.class); for (int i = 0; i &lt; otherArgs.length - 1; ++i) &#123; FileInputFormat.addInputPath(job, new Path(otherArgs[i])); &#125; FileOutputFormat.setOutputPath(job, new Path(otherArgs[otherArgs.length - 1])); System.exit(job.waitForCompletion(true) ? 0 : 1); &#125;&#125; 本代码改自hadoop自带的wordcount: 源码在hadoop/share/hadoop/mapreduce/sources/hadoop-mapreduce-examples-2.7.2-sources.jar 类名为org.apache.hadoop.examples.WordCount 这里只改了map方法添加了IK分词 在IDEA里创建项目 创建普通项目 按 shift + alt + ctrl + s 进入项目设置, 选择Modules-Dependencies添加hadoop/share/hadoop/目录下的common hdfs mapreduce yarn common/lib 到Dependencies下 把下载的ik分词jar放hadoop/share/hadoop/mapreduce目录下 如图: 运行 把下载的小说放 /home/ystyle/hadoop/input 下面 在IDEA的Run/Debug Configurations里的Program arguments 里填上/home/ystyle/hadoop/input /home/ystyle/hadoop/output 近按Shift + F10 运行, 等待结果 结果分析我分析的小说为&lt;&lt;我欲封天&gt;&gt; cd /home/ystyle/hadoop/output 结果在文件part-r-00000里 先把结果按使用次数排序并存在0.txt里: sort -k2rn part-r-00000&gt; 0.txt 分析两字词语的使用次数: awk &#39;{if(length($1)==2) print $0}&#39; 0.txt &gt; 2.txt 分析四字词语的使用次数: awk &#39;{if(length($1)==4) print $0}&#39; 0.txt &gt; 4.txt 部分结果如下两字词语12345678910在这 9889此刻 9000一个 8819立刻 8676身体 8338到了 7906出现 7504他们 7382修士 7350四周 7104 四字词语12345678910与此同时 1443中年男子 1089轰的一声 1048未完待续 893惊天动地 853面色苍白 752前所未有 481兄弟姐妹 421无法形容 408毫不迟疑 390","categories":[{"name":"编程","slug":"编程","permalink":"http://ystyle.top/categories/编程/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://ystyle.top/tags/JAVA/"},{"name":"hadoop","slug":"hadoop","permalink":"http://ystyle.top/tags/hadoop/"}]},{"title":"Webpack 项目中使用fetch.js","slug":"webpack-xiang-mu-zhong-shi-yong-fetch-js","date":"2016-02-01T03:36:09.000Z","updated":"2016-02-22T09:58:49.000Z","comments":true,"path":"2016/02/01/webpack-xiang-mu-zhong-shi-yong-fetch-js/","link":"","permalink":"http://ystyle.top/2016/02/01/webpack-xiang-mu-zhong-shi-yong-fetch-js/","excerpt":"","text":"安装依赖12npm i imports-loader exports-loader --save-devnpm i whatwg-fetch --save 方法一: webpack配置修改webpack.config.js 文件12345plugins: [ new webpack.ProvidePlugin(&#123; 'fetch': 'imports?this=&gt;global!exports?global.fetch!whatwg-fetch' &#125;), ], 方法二: import在需要使用的文件中import1import 'imports?this=&gt;global!exports?global.fetch!whatwg-fetch';","categories":[{"name":"编程","slug":"编程","permalink":"http://ystyle.top/categories/编程/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://ystyle.top/tags/nodejs/"},{"name":"webpack","slug":"webpack","permalink":"http://ystyle.top/tags/webpack/"},{"name":"fetch","slug":"fetch","permalink":"http://ystyle.top/tags/fetch/"}]},{"title":"Windows JDK 版本管理器 jvms 0.0.2 发布","slug":"windows-jdk-ban-ben-guan-li-qi-jvms-fa-bu","date":"2015-12-03T03:57:21.000Z","updated":"2016-02-22T10:01:35.000Z","comments":true,"path":"2015/12/03/windows-jdk-ban-ben-guan-li-qi-jvms-fa-bu/","link":"","permalink":"http://ystyle.top/2015/12/03/windows-jdk-ban-ben-guan-li-qi-jvms-fa-bu/","excerpt":"","text":"JDK Version Manager (JVMS) for Windows Windows下JDK多版本管理器，类似 nvm, nvmw, rvm jvms下载地址 本软件源于 nvm-windows 这对JDK不同版本之间切换是非常有用的。例如，如果你想测试一个项目你想使用最新最前沿的版本,却不想卸载JDK的稳定版，这个工具可以很好的解决。 本软件配备了一个安装程序（和卸载），因此安装是很容易的。请注意，您需要删掉以前的JAVA_HOME环境变量再安装JVMS。 欢迎提交其它版本的下载地址: 提交jdk版本下载链接 软件介绍: jvms ls 查看受jvms管理的jdk jvms ls-remote 查看jvms源里提供下载的jdk版本 jvms install &lt;version&gt; 从jvms源里安装jdk jvms uninstall &lt;version&gt; 删除受jvms管理的jdk jvms use &lt;version&gt; 使用指定版本的jdk jvms version 可看jvms的版本 安装jdk1.6示例123jvms install 1.6.0_43 ## 安装jdk1.6jvms use 1.6.0_43 ## 启用jdk1.6jvm list ## 查看当前使用的版本 0.0.2更新: path放到环境变量最前面 源里添加了1.6 jdk64位","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://ystyle.top/tags/JAVA/"},{"name":"jvms","slug":"jvms","permalink":"http://ystyle.top/tags/jvms/"}]},{"title":"spring使用Redis存储Session","slug":"springshi-yong-rediscun-chu-session","date":"2015-10-29T14:46:05.000Z","updated":"2015-10-29T15:49:37.000Z","comments":true,"path":"2015/10/29/springshi-yong-rediscun-chu-session/","link":"","permalink":"http://ystyle.top/2015/10/29/springshi-yong-rediscun-chu-session/","excerpt":"","text":"spring使用Redis存储Session准备spring web的maven项目 配置pom.xml添加依赖 12345678910111213141516&lt;!-- pom.xml --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.session&lt;/groupId&gt; &lt;artifactId&gt;spring-session&lt;/artifactId&gt; &lt;version&gt;1.0.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.data&lt;/groupId&gt; &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt; &lt;version&gt;1.4.1.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;2.5.2&lt;/version&gt;&lt;/dependency&gt; web.xml 添加过滤器 123456789&lt;!-- web.xml --&gt;&lt;filter&gt; &lt;filter-name&gt;springSessionRepositoryFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;springSessionRepositoryFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt; spring 配置文件添加redis配置 12345678&lt;context:annotation-config/&gt;&lt;!-- 自动扫描必需 --&gt;&lt;bean class=\"org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration\"/&gt;&lt;bean class=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\"&gt; &lt;!-- redis 配置 --&gt; &lt;property name=\"hostName\" value=\"localhost\"/&gt; &lt;property name=\"port\" value=\"6379\"/&gt;&lt;/bean&gt; 使用123456789101112@ResponseBody@RequestMapping(\"/get\")public String index(Model model,HttpServletRequest request,String action,String msg,String key)&#123; HttpSession session=request.getSession(); String message = \"ok\"; if (\"set\".equals(action))&#123; session.setAttribute(key, msg); &#125;else if (\"get\".equals(action))&#123; message=(String)session.getAttribute(key); &#125; return message;&#125;","categories":[{"name":"编程","slug":"编程","permalink":"http://ystyle.top/categories/编程/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://ystyle.top/tags/redis/"},{"name":"JAVA","slug":"JAVA","permalink":"http://ystyle.top/tags/JAVA/"}]},{"title":"Docker 搭建redis 集群","slug":"Docker-搭建redis-集群","date":"2015-10-20T07:47:13.000Z","updated":"2015-11-09T12:48:43.000Z","comments":true,"path":"2015/10/20/Docker-搭建redis-集群/","link":"","permalink":"http://ystyle.top/2015/10/20/Docker-搭建redis-集群/","excerpt":"","text":"Docker 搭建redis 集群准备工作创建一个目录用保存redis-slave的配置文件123mkdir/data/docker/redis/wget https://raw.githubusercontent.com/antirez/redis/3.0/redis.conf \\-O /data/docker/redis/redis.conf 安装redis1docker pull redis 修改redis-slave配置文件123# 修改 /data/docker/redis/redis.conf 的slaveof属性为redis-master 6379cd /data/docker/redis/sed -i 's/# slaveof &lt;masterip&gt; &lt;masterport&gt;/slaveof redis-master 6379/g' redis.conf 启动服务启动redis-master、 redis-slave1、 redis-slave2、 redis-slave31234567docker run --name redis-master -p 6379:6379 -d redisdocker run --link redis-master:redis-master -v /data/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf --name redis-slave1 -d redis redis-server /usr/local/etc/redis/redis.confdocker run --link redis-master:redis-master -v /data/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf --name redis-slave2 -d redis redis-server /usr/local/etc/redis/redis.confdocker run --link redis-master:redis-master -v /data/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf --name redis-slave3 -d redis redis-server /usr/local/etc/redis/redis.conf 测试用本地的redis-cli 连接到 master12redis-cli127.0.0.1:6379&gt; info # 查看详细信息","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://ystyle.top/tags/docker/"},{"name":"redis","slug":"redis","permalink":"http://ystyle.top/tags/redis/"}]},{"title":"送给程序员：关于性格内向者的10个误解","slug":"song-gei-cheng-xu-yuan-guan-yu-xing-ge-nei-xiang-zhe-de-10ge-wu-jie","date":"2015-10-02T00:15:24.000Z","updated":"2015-10-02T03:38:15.000Z","comments":true,"path":"2015/10/02/song-gei-cheng-xu-yuan-guan-yu-xing-ge-nei-xiang-zhe-de-10ge-wu-jie/","link":"","permalink":"http://ystyle.top/2015/10/02/song-gei-cheng-xu-yuan-guan-yu-xing-ge-nei-xiang-zhe-de-10ge-wu-jie/","excerpt":"","text":"我非常幸运的发现了这本《内向者优势——如何在外向的世界中获得成功》（英文名：The Introvert Advantage (How To Thrive in an Extrovert World)）的好书，我感觉就好像是有人专门为我们这个罕见的小群体写了一部百科全书一样，它不仅对我的很多怪癖做了解释，还帮助我从一个崭新且积极的角度重新定义了我的整个人生。 毫无疑问，几乎所有认识我的人都会说，“啊哈，你不会到现在才发现你是个性格内向者吧？”，其实这并不是那么简单，问题在于将一些人贴上内向者的标签是一种非常浅显且充满各种常见误解的行为，事实要比这复杂的多（在Carl King讲过之后，就更是如此了） Laney的书中有个章节对人的大脑进行了分析，并解释了神经元是如何在内向者和外向者的神经系统中跟随不同的控制通路进行传递。如果这本书基于的科学理论是正确的，那就证明了内向者是一群对多巴胺过度敏感的群体，太多的外部刺激过量的消耗了它们。相反的，外向者没有足够的多巴胺，他们需要依靠大脑的肾上腺去创造它们，外向者通常有更短的神经通路，他们的大脑血流量也相对更少，外向者神经系统中的信息大部分都是通过位于前额叶的布罗卡氏区（Broca’s area）传递的，而这里正是我们的大部分思考发生的地方。 内向者优势——如何在外向的世界中获得成功 不幸的是，根据这本书，只有大约25%的人是内向的，而像我这样极端的就更是少上加少了，这导致了许多的误解，因为社会对我们这类人缺乏足够的了解（我很高兴我能够这样说） 所以下面我列出了一些对内向者的常见的误解（这是我自己的清单，我对其中一些深信不疑）： 误解1： 内向者不喜欢说话 并不是这样，内向者不说话只是因为他们觉得没什么好说，他们讨厌闲谈扯淡，如果你让一个内向者讲他感兴趣的事情，他可能连着3天3夜都讲不完。 误解2： 内向者都很害羞 内向者没什么好害羞的，他们也不是害怕陌生人，他们只是需要一个理由去交际，他们不会为了交际而交际，如果你想和一个内向者交流，那就直接聊吧，不用担心礼貌问题。 误解3：内向者都很无礼 内向者通常觉得遵从社交礼仪，拐弯抹角的说话没有一点必要，他们希望每个人都是真实且真诚的，但不幸的是，大多数情况下事情并不是这样，这让内向者感到很大的压力，他们很难融入其中，并为此感到沮丧。 误解4： 内向者不合群 恰好相反，内向者会非常认真的对待他们为数不多的朋友，他们最亲密的朋友或许用一只手就可以统计过来，但如果你有幸被一个性格内向者当做朋友，那你就有了一个终生的盟友，一旦你作为一个人类存在赢得了他们的尊敬，你就入选了。 误解5：内向者不喜欢去公共场合 胡扯，内向者只是尽可能的避免去公共场所，他们同样也会尽量避免卷入复杂的公共活动，因为他们可以在极短的时间内获取需要的数据和经验，所以，他们喜欢在一个地方待很久去“得到某样东西”，他们总是准备着回家，调整（Recharging），然后处理一切，实际上，调整绝对是内向者的关键所在。 误解6：内向者总是想要独处 内向者只是喜欢自我思考，他们会想很多，他们会白日做梦，他们喜欢解决问题，攻克难题，但是如果他们找不到什么人来分享他们的发现，他们也能忍受难以想象的孤独。他们希望在同一时间只和一个人保持亲密的感情关系。 误解7：内向者都很古怪 内向者通常都是个人主义者，他们不喜欢随大流，他们喜欢通过特立独行的生活方式来体现自己的价值，他们总是从自我出发，正因如此，他们也常常挑战常规，他们的大部分决定都不会以当前的流行趋势做为参考。 误解8：内向者都是冷漠的书呆子 内向者通常更关注内心世界，他们将更多的精力放到自身的想法和感情上，但这并不代表他们对他们身边的事情漠不关心，只是他们更喜欢通过内心世界来达成自我满足。 误解9：内向者不知道如何放松和享乐 内向者通常喜欢在家或自然中放松自己，他们不会去那些嘈杂的公共场所，内向者也不会寻求肾上腺素的刺激，如果有太多的空谈和噪音，他们会敬而远之。他们的大脑对于一种叫做多巴胺的神经递质太过敏感，内向者和外向者拥有完全不同的神经控制通路，关于这一点，你可以深入了解下。 误解10：内向者可以通过“自我修复”变得外向 想象一个没有内向者的世界，那个世界也就没有什么科学家、音乐家、艺术家、诗人、制片人、医生、数学家、作家和哲学家了，之所以这么说，是因为外向者还是可以通过学习掌握很多种和内向者进行交流的方式（没错，我故意颠倒了这两个词，读着很别扭？我只是为了让你们看看我们这个社会有多变态），内向者压根不需要“自我修复”，他们应该因为他们这种天生的性格和为人类做出的贡献而得到应有的尊敬，并且事实上，一项调查（Silverman，1986）显示内向的程度和IQ成正比。 “你没法避开我们，尝试改变我们只会让你感到失败”，这是我编的，我是一名剧作家。 内向者如果为了去适应外向者支配的世界而对自己进行否定，结果将会是灾难性的，内向者终将会仇恨自己以及其他所有人。如果你认为你是个内向者，我推荐你研究下这个题目并试着找其他的性格内向者交换下意见，问题并不完全是内向者应该尝试并“变得正常”，外向者也需要认识和尊敬我们，并且我们也需要学会尊敬我们自己。","categories":[{"name":"魔盒","slug":"魔盒","permalink":"http://ystyle.top/categories/魔盒/"}],"tags":[{"name":"内向","slug":"内向","permalink":"http://ystyle.top/tags/内向/"},{"name":"性格","slug":"性格","permalink":"http://ystyle.top/tags/性格/"}]},{"title":"Centos 7 docker 启动容器iptables报No chain/target/match by that name","slug":"centos-7-docker-qi-dong-bao","date":"2015-09-23T19:53:48.000Z","updated":"2016-04-16T17:02:47.000Z","comments":true,"path":"2015/09/23/centos-7-docker-qi-dong-bao/","link":"","permalink":"http://ystyle.top/2015/09/23/centos-7-docker-qi-dong-bao/","excerpt":"","text":"启动一个有nat映射端口的容器时iptables 报No chain/target/match by that name 12docker run -d -p 2181:2181 -p 2888:2888 -p 3888:3888 garland/zookeeper Error response from daemon: Cannot start container 565c06efde6cd4411e2596ef3d726817c58dd777bc5fd13762e0c34d86076b9e: iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 3888 -j DNAT --to-destination 192.168.42.11:3888 ! -i docker0: iptables: No chain/target/match by that name 找了N多网站和官方issue后，还是没找到真正的解决方法，网上到处转载的只是分析了原因， 并没有明确的解决方案，为此与同事通宵加班终于解决了这个问题 找到系统的/etc/sysconfig/iptables ，如果没有用以下命令保存一下,然后查看里边的内容12iptables-save &gt; /etc/sysconfig/iptablescat /etc/sysconfig/iptables 发现内容如下12345678910111213141516*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]-N whitelist-A whitelist -s 192.168.42.0/24 -j ACCEPT#syn-N syn-flood-A INPUT -p tcp --syn -j syn-flood-I syn-flood -p tcp -m limit --limit 3/s --limit-burst 6 -j RETURN-A syn-flood -j REJECT#DOS-A INPUT -i eth0 -p tcp --syn -m connlimit --connlimit-above 15 -j DROP-A INPUT -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT## 省略一些简单的防火墙规则 查看启动容器的报错信息发现-A DOCKER DOCKER链，但在iptables文件里并没有找到， 由于之前在自己的系统(archlinux)学习使用docker时并没遇到这问题， 所以马上去看了下自己系统里的iptables的文件， 内容如下1234567891011121314151617181920212223242526272829*nat:PREROUTING ACCEPT [27:11935]:INPUT ACCEPT [0:0]:OUTPUT ACCEPT [598:57368]:POSTROUTING ACCEPT [591:57092]:DOCKER - [0:0]-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE-A POSTROUTING -s 172.17.0.3/32 -d 172.17.0.3/32 -p tcp -m tcp --dport 1521 -j MASQUERADE-A POSTROUTING -s 172.17.0.3/32 -d 172.17.0.3/32 -p tcp -m tcp --dport 22 -j MASQUERADE-A DOCKER ! -i docker0 -p tcp -m tcp --dport 49161 -j DNAT --to-destination 172.17.0.3:1521-A DOCKER ! -i docker0 -p tcp -m tcp --dport 49160 -j DNAT --to-destination 172.17.0.3:22COMMIT# Completed on Sun Sep 20 17:35:31 2015# Generated by iptables-save v1.4.21 on Sun Sep 20 17:35:31 2015*filter:INPUT ACCEPT [139291:461018923]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [127386:5251162]:DOCKER - [0:0]-A FORWARD -o docker0 -j DOCKER-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT-A FORWARD -i docker0 ! -o docker0 -j ACCEPT-A FORWARD -i docker0 -o docker0 -j ACCEPT-A DOCKER -d 172.17.0.3/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 1521 -j ACCEPT-A DOCKER -d 172.17.0.3/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 22 -j ACCEPTCOMMIT# Completed on Sun Sep 20 17:35:31 2015 对比后以去掉不相关的规则，以现*nat规则里有以下的对于docker的配置123456789*nat:PREROUTING ACCEPT [27:11935]:INPUT ACCEPT [0:0]:OUTPUT ACCEPT [598:57368]:POSTROUTING ACCEPT [591:57092]:DOCKER - [0:0]-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADECOMMIT *filter 规则里对docker的配置如下12345678910*filter:INPUT ACCEPT [139291:461018923]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [127386:5251162]:DOCKER - [0:0]-A FORWARD -o docker0 -j DOCKER-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT-A FORWARD -i docker0 ! -o docker0 -j ACCEPT-A FORWARD -i docker0 -o docker0 -j ACCEPTCOMMIT 去掉不相关规则后的配置文件如下(可以直接用)：1234567891011121314151617181920212223*nat:PREROUTING ACCEPT [27:11935]:INPUT ACCEPT [0:0]:OUTPUT ACCEPT [598:57368]:POSTROUTING ACCEPT [591:57092]:DOCKER - [0:0]-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADECOMMIT# Completed on Sun Sep 20 17:35:31 2015# Generated by iptables-save v1.4.21 on Sun Sep 20 17:35:31 2015*filter:INPUT ACCEPT [139291:461018923]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [127386:5251162]:DOCKER - [0:0]-A FORWARD -o docker0 -j DOCKER-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT-A FORWARD -i docker0 ! -o docker0 -j ACCEPT-A FORWARD -i docker0 -o docker0 -j ACCEPTCOMMIT# Completed on Sun Sep 20 17:35:31 2015 然后再加上自己服务器的过滤规则，合并后覆盖到Centos 7的 /etc/sysconfig/iptables 文件 重启iptables 服务1systemctl restart iptables.service 两次启动对应docker容器，1docker run -d -p 2181:2181 -p 2888:2888 -p 3888:3888 garland/zookeeper 发现容器启动成功，虽然有警告，但并不影响容器的使用 PS: @孙振树 提供的解决办法: 如果iptables是在docker后安装的，把docker重新安装下就可以了","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://ystyle.top/tags/docker/"}]},{"title":"eclipse 和 IDEA 多JDK设置方法","slug":"eclipse-he-idea-duo-jdkshe-zhi-fang-fa","date":"2015-09-19T11:48:45.000Z","updated":"2015-09-24T10:10:02.000Z","comments":true,"path":"2015/09/19/eclipse-he-idea-duo-jdkshe-zhi-fang-fa/","link":"","permalink":"http://ystyle.top/2015/09/19/eclipse-he-idea-duo-jdkshe-zhi-fang-fa/","excerpt":"","text":"eclipse 和 IDEA 多JDK设置方法 eclipse 已有项目切换JDK Intellij IDEA 已有项目切换JDK eclipse&gt;打开设置 window - preferences - java - installed jres - add 把需要的JDK全放里边 &gt;新建项目时用 Use a preject specific JRE 随便选择就行了 eclipse已有项目切换JDK右键项目properties - java build path - libraries选中JDK然后edit 切换JDK finish就行了 Intellij IDEA新建项目时直接new一个新的JDK 选择JDK目录 要什么版本的自己选择 Intellij IDEA已有项目切换JDK 右边或ctrl + shift + alt + s 直接切","categories":[{"name":"编程","slug":"编程","permalink":"http://ystyle.top/categories/编程/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://ystyle.top/tags/JAVA/"}]},{"title":"Intellij IDEA部署Tomcat[Maven版]","slug":"intellij-ideabu-shu-tomcat","date":"2015-09-19T04:42:24.000Z","updated":"2015-09-24T10:09:11.000Z","comments":true,"path":"2015/09/19/intellij-ideabu-shu-tomcat/","link":"","permalink":"http://ystyle.top/2015/09/19/intellij-ideabu-shu-tomcat/","excerpt":"","text":"Intellij IDEA部署Tomcat[Maven版]准备 IDEA的Maven项目 Tomcat 部署点运行旁边的下拉框，选择Edit Configurations... 在窗体左边点+加号 选择Tomcat Server - Local 如果还没有配置好Tomcat,点Configure...按钮 ，点 左边的+加号添加Tomcat，在Tomcat Home选择Tomcat的安装位置，然后OK完成配置 ，不需要填其它的了 然后选择Deployment页签，点+加号选择Artifact...添加项目 选择第二个带exploded的War包 如果没看到war包请看 如图两个下拉都选择Update class and resources 然后运行项目启动完成是这样的 打包设置 Maven项目这个一般默认就有了的不需要设置 点右上或shift + ctrl + alt + S进入项目设置 选择Artifacts 选择+加号添加一个web项目的war包 一般默认就设置好了 如果中间没有war expploded 包的话，在右边Artifacts里选择项目的war右键put into output root","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://ystyle.top/tags/JAVA/"},{"name":"IDEA","slug":"IDEA","permalink":"http://ystyle.top/tags/IDEA/"}]},{"title":"JPA  Hibernate 注解","slug":"jpa-hibernate-zhu-jie","date":"2015-09-10T22:30:27.000Z","updated":"2015-09-24T10:10:40.000Z","comments":true,"path":"2015/09/10/jpa-hibernate-zhu-jie/","link":"","permalink":"http://ystyle.top/2015/09/10/jpa-hibernate-zhu-jie/","excerpt":"","text":"@Entity(name=”EntityName”)必须,name为可选,对应数据库中一的个表 @Table(name=””,catalog=””,schema=””)可选,通常和@Entity配合使用,只能标注在实体的class定义处,表示实体对应的数据库表的信息name:可选,表示表的名称.默认地,表名和实体名称一致,只有在不一致的情况下才需要指定表名catalog:可选,表示Catalog名称,默认为Catalog(“”).schema:可选,表示Schema名称,默认为Schema(“”). @id必须@id定义了映射到数据库表的主键的属性,一个实体只能有一个属性被映射为主键.置于getXxxx()前. @GeneratedValue(strategy=GenerationType,generator=””)可选strategy:表示主键生成策略,有AUTO,INDENTITY,SEQUENCE 和 TABLE 4种,分别表示让ORM框架自动选择,根据数据库的Identity字段生成,根据数据库表的Sequence字段生成,以有根据一个额外的表生成主键,默认为AUTOgenerator:表示主键生成器的名称,这个属性通常和ORM框架相关,例如,Hibernate可以指定uuid等主键生成方式.示例: 12345@Id@GeneratedValues(strategy=StrategyType.SEQUENCE)public int getPk() &#123; return pk;&#125; @Basic(fetch=FetchType,optional=true)可选@Basic表示一个简单的属性到数据库表的字段的映射,对于没有任何标注的getXxxx()方法,默认即为@Basicfetch: 表示该属性的读取策略,有EAGER和LAZY两种,分别表示主支抓取和延迟加载,默认为EAGER.optional:表示该属性是否允许为null,默认为true示例: 1234@Basic(optional=false)public String getAddress() &#123; return address;&#125; @Column可选@Column描述了数据库表中该字段的详细定义,这对于根据JPA注解生成数据库表结构的工具非常有作用.name:表示数据库表中该字段的名称,默认情形属性名称一致nullable:表示该字段是否允许为null,默认为trueunique:表示该字段是否是唯一标识,默认为falselength:表示该字段的大小,仅对String类型的字段有效insertable:表示在ORM框架执行插入操作时,该字段是否应出现INSETRT语句中,默认为trueupdateable:表示在ORM框架执行更新操作时,该字段是否应该出现在UPDATE语句中,默认为true.对于一经创建就不可以更改的字段,该属性非常有用,如对于birthday字段.columnDefinition:表示该字段在数据库中的实际类型.通常ORM框架可以根据属性类型自动判断数据库中字段的类型,但是对于Date类型仍无法确定数据库中字段类型究竟是DATE,TIME还是TIMESTAMP.此外,String的默认映射类型为VARCHAR,如果要将String类型映射到特定数据库的BLOB或TEXT字段类型,该属性非常有用.示例: 1234@Column(name=\"BIRTH\",nullable=\"false\",columnDefinition=\"DATE\")public String getBithday() &#123; return birthday;&#125; @Transient可选@Transient表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性.如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic示例: 12345//根据birth计算出age属性@Transientpublic int getAge() &#123; return getYear(new Date()) - getYear(birth);&#125; @ManyToOne(fetch=FetchType,cascade=CascadeType)可选@ManyToOne表示一个多对一的映射,该注解标注的属性通常是数据库表的外键optional:是否允许该字段为null,该属性应该根据数据库表的外键约束来确定,默认为truefetch:表示抓取策略,默认为FetchType.EAGERcascade:表示默认的级联操作策略,可以指定为ALL,PERSIST,MERGE,REFRESH和REMOVE中的若干组合,默认为无级联操作targetEntity:表示该属性关联的实体类型.该属性通常不必指定,ORM框架根据属性类型自动判断targetEntity.示例: 1234567//订单Order和用户User是一个ManyToOne的关系//在Order类中定义@ManyToOne()@JoinColumn(name=\"USER\")public User getUser() &#123; return user;&#125; @JoinColumn可选@JoinColumn和@Column类似,介量描述的不是一个简单字段,而一一个关联字段,例如.描述一个@ManyToOne的字段.name:该字段的名称.由于@JoinColumn描述的是一个关联字段,如ManyToOne,则默认的名称由其关联的实体决定.例如,实体Order有一个user属性来关联实体User,则Order的user属性为一个外键,其默认的名称为实体User的名称+下划线+实体User的主键名称示例: 见@ManyToOne @OneToMany(fetch=FetchType,cascade=CascadeType)可选@OneToMany描述一个一对多的关联,该属性应该为集体类型,在数据库中并没有实际字段.fetch:表示抓取策略,默认为FetchType.LAZY,因为关联的多个对象通常不必从数据库预先读取到内存cascade:表示级联操作策略,对于OneToMany类型的关联非常重要,通常该实体更新或删除时,其关联的实体也应当被更新或删除例如:实体User和Order是OneToMany的关系,则实体User被删除时,其关联的实体Order也应该被全部删除示例: 1234@OneTyMany(cascade=ALL)public List getOrders() &#123; return orders;&#125; @OneToOne(fetch=FetchType,cascade=CascadeType)可选@OneToOne描述一个一对一的关联fetch:表示抓取策略,默认为FetchType.LAZYcascade:表示级联操作策略示例: 1234@OneToOne(fetch=FetchType.LAZY)public Blog getBlog() &#123; return blog;&#125; @ManyToMany可选@ManyToMany 描述一个多对多的关联.多对多关联上是两个一对多关联,但是在ManyToMany描述中,中间表是由ORM框架自动处理targetEntity:表示多对多关联的另一个实体类的全名,例如:package.Book.classmappedBy:表示多对多关联的另一个实体类的对应集合属性名称示例:User实体表示用户,Book实体表示书籍,为了描述用户收藏的书籍,可以在User和Book之间建立ManyToMany关联 1234567891011121314151617181920212223@Entitypublic class User &#123; private List books; @ManyToMany(targetEntity=package.Book.class) public List getBooks() &#123; return books; &#125; public void setBooks(List books) &#123; this.books=books; &#125;&#125;@Entitypublic class Book &#123; private List users; @ManyToMany(targetEntity=package.Users.class, mappedBy=\"books\") public List getUsers() &#123; return users; &#125; public void setUsers(List users) &#123; this.users=users; &#125;&#125; 两个实体间相互关联的属性必须标记为@ManyToMany,并相互指定targetEntity属性,需要注意的是,有且只有一个实体的@ManyToMany注解需要指定mappedBy属性,指向targetEntity的集合属性名称利用ORM工具自动生成的表除了User和Book表外,还自动生成了一个User_Book表,用于实现多对多关联 @MappedSuperclass可选@MappedSuperclass可以将超类的JPA注解传递给子类,使子类能够继承超类的JPA注解示例: 12345678910111213@MappedSuperclasspublic class Employee() &#123; //....&#125;@Entitypublic class Engineer extends Employee &#123; //.....&#125;@Entitypublic class Manager extends Employee &#123; //.....&#125; @Embedded可选@Embedded将几个字段组合成一个类,并作为整个Entity的一个属性.例如User包括id,name,city,street,zip属性.我们希望city,street,zip属性映射为Address对象.这样,User对象将具有id,name和address这三个属性.Address对象必须定义为@Embededable示例:123456789@Embeddablepublic class Address &#123;city,street,zip&#125;@Entitypublic class User &#123; @Embedded public Address getAddress() &#123; //.......... &#125;&#125; Hibernate验证注解 注解 适用类型 说明 示例 @Pattern String 通过正则表达式来验证字符串 @attern(regex=”[a-z]{6}”) @Length String 验证字符串的长度 @length(min=3,max=20) @Email String 验证一个Email地址是否有效 @email @Range Long 验证一个整型是否在有效的范围内 @Range(min=0,max=100) @Max Long 验证一个整型必须不大于指定值 @Max(value=20) @Min Long 验证一个整型必须不小于指定值 @Min(value=10) @Size 集合或数组 集合或数组的大小是否在指定范围内 @Size(min=1,max=255) 以上每个注解都可能性有一个message属性，用于在验证失败后向用户返回的消息，还可以三个属性上使用多个注解","categories":[{"name":"编程","slug":"编程","permalink":"http://ystyle.top/categories/编程/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://ystyle.top/tags/JAVA/"}]},{"title":"Github协助工作流","slug":"githubxie-zhu-gong-zuo-liu","date":"2015-08-05T22:45:27.000Z","updated":"2015-09-24T10:11:13.000Z","comments":true,"path":"2015/08/05/githubxie-zhu-gong-zuo-liu/","link":"","permalink":"http://ystyle.top/2015/08/05/githubxie-zhu-gong-zuo-liu/","excerpt":"","text":"Github协助工作流描述给Github新手的一个简单的参与开源项目的方法 准备工作Git客户端: git-scm [常称git或 git bash]、github for windows Fork 项目 首先进入你要参与项目的首页, 网址类似这样的 https://github.com/${username}/${projectname}点击右上角的按钮 Fork现在你自己的仓库里就clone了一个和主项目一样的仓库 clone项目到本地git bash 在工作空间右键git bash 打开终端项目右边有输入框:HTTPS clone URL点击输入框旁边的按钮copy to clipboard把地址复制到 git bash 里回车下载到本地 github[可以在右上的齿轮里登陆帐号] 打开github for windows左上的+号点 clone 会刷新自己的项目，选择就下载到本地了 修改文件或代码 已经把代码/文件下载到本地了，随意debug, 新增功能什么的 上传文件 修改新增文件后要用git add .标记文件, (初始化项目是：git init)用git commit -m &quot;message for update&quot;提交文件(本地缓存),用git push上传文件 用git bash的username是github的用户名/密码 注: (密钥方式自己看其它教程配置) 请求合并代码进入自己的首页，进入自己clone的项目在分支与代码目录之间有一个连接Pull request 如下图： 点击这连接向主仓库发起一个Pull request 请求 填写你的说明：如修改了什么代码或新增了什么功能什么的 成功的截图 成功发起了一个Pull request 请求 对方接收到Pull request 请求，如果主仓库接受你的代码的话，主仓库会合并这些代码","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"GIT","slug":"GIT","permalink":"http://ystyle.top/tags/GIT/"}]},{"title":"ActiveMQ 入门","slug":"activemq-ru-men","date":"2015-07-30T15:34:38.000Z","updated":"2015-09-24T10:11:51.000Z","comments":true,"path":"2015/07/30/activemq-ru-men/","link":"","permalink":"http://ystyle.top/2015/07/30/activemq-ru-men/","excerpt":"","text":"ActiveMQ 入门下载与安装官方下载地址 解压，运行bin/win[32|64]/activemq[.bat] 启动服务 环境信息控制台: http://localhost:8161 默认端口:8161服务地址: host: localhostport: 61613 代码例子基本信息： 语言：Node.js客户端：stompjs 消息发布者: 123456789101112131415161718192021222324// Publisher.jsvar Stomp = require('stompjs');// Use raw TCP socketsvar client = Stomp.overTCP('localhost', 61613);// uncomment to print out the STOMP frames//client.debug = console.log;var connectCallback = function(frame) &#123; console.log ('Connected! sending some message'); setInterval(function()&#123; var date = new Date().toLocaleString(); console.log(\"sending:\"+date); client.send('/queue/FirstQueue', &#123;&#125;, \"queue:\" + date); client.send('/topic/FirstQueue', &#123;&#125;, \"topic:\" + date); &#125;,10000)&#125;;var errorCallback = function(error)&#123; console.log(error.headers.message);&#125;;client.connect('admin', 'admin', connectCallback,connectCallback); Queue消息消费者 1234567891011121314151617181920212223242526// Consumer_queue.jsvar Stomp = require('stompjs');// Use raw TCP socketsvar client = Stomp.overTCP('localhost', 61613);// uncomment to print out the STOMP frames// client.debug = console.log;var connectCallback = function(frame) &#123; var subscription = client.subscribe('/queue/FirstQueue', onMessage); //subscription.unsubscribe();&#125;;var onMessage = function(message)&#123; if (message.body) &#123; console.log(\"got message with body \" + message.body) &#125; else &#123; console.log(\"got empty message\"); &#125;&#125;;var errorCallback = function(error)&#123; console.log(error.headers.message);&#125;;client.connect('admin', 'admin', connectCallback,connectCallback); Topic消息消费者 1234567891011121314151617181920212223242526// Consumer_topics.jsvar Stomp = require('stompjs');// Use raw TCP socketsvar client = Stomp.overTCP('localhost', 61613);// uncomment to print out the STOMP frames// client.debug = console.log;var connectCallback = function(frame) &#123; var subscription = client.subscribe('/topic/FirstQueue', onMessage); //subscription.unsubscribe();&#125;;var onMessage = function(message)&#123; if (message.body) &#123; console.log(\"got message with body \" + message.body) &#125; else &#123; console.log(\"got empty message\"); &#125;&#125;;var errorCallback = function(error)&#123; console.log(error.headers.message);&#125;;client.connect('admin', 'admin', connectCallback,connectCallback); 注： Queue、Topic消息消费者分别启动两个，再启动消息发布者，观察Queue、Topic消息消费者接收到的消息有什么区别 Queue与Topic的比较1、JMS Queue执行load balancer语义：一条消息仅能被一个consumer收到。如果在message发送的时候没有可用的consumer，那么它将被保存一直到能处理该message的consumer可用。如果一个consumer收到一条message后却不响应它，那么这条消息将被转到另一个consumer那儿。一个Queue可以有很多consumer，并且在多个可用的consumer中负载均衡。 2、Topic实现publish和subscribe语义：一条消息被publish时，它将发到所有感兴趣的订阅者，所以零到多个subscriber将接收到消息的一个拷贝。但是在消息代理接收到消息时，只有激活订阅的subscriber能够获得消息的一个拷贝。 3、分别对应两种消息模式：Point-to-Point (点对点),Publisher/Subscriber Model (发布/订阅者)其中在Publicher/Subscriber 模式下又有Nondurable subscription（非持久订阅）和durable subscription (持久化订阅)2种消息处理方式。 总结：Topic就是游戏里的日常任务，只要在线都能接。Queue是小说里的神位传承，只有通过了测试的唯一一个 人才能得到","categories":[{"name":"编程","slug":"编程","permalink":"http://ystyle.top/categories/编程/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://ystyle.top/tags/nodejs/"}]},{"title":"docker 安装oracle 数据库","slug":"docker-install-oracle","date":"2015-07-16T12:16:58.000Z","updated":"2015-09-24T10:12:12.000Z","comments":true,"path":"2015/07/16/docker-install-oracle/","link":"","permalink":"http://ystyle.top/2015/07/16/docker-install-oracle/","excerpt":"","text":"docker安装oracle 11G 数据库： docker-oracle-xe-11g环境： Oracle Express Edition 11g Release 2 与 Ubuntu 14.04.1 LTS Dockerfile 地址 在 Docker中央库. 安装1docker pull wnameless/oracle-xe-11g 以22(sshd), 1521(oracle)号端口启动容器:1docker run -d -p 49160:22 -p 49161:1521 wnameless/oracle-xe-11g 数据库连接信息:12345hostname: localhostport: 49161sid: xeusername: systempassword: oracle oracle的SYS 和 SYSTEM用户密码:1oracle 用ssh连接docker容器12ssh root@localhost -p 49160password: admin","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://ystyle.top/tags/docker/"}]},{"title":"Git单文件恢复到历史版本","slug":"gitdan-wen-jian-hui-fu-dao-li-shi-ban-ben","date":"2015-06-28T23:02:49.000Z","updated":"2015-06-29T01:14:00.000Z","comments":true,"path":"2015/06/28/gitdan-wen-jian-hui-fu-dao-li-shi-ban-ben/","link":"","permalink":"http://ystyle.top/2015/06/28/gitdan-wen-jian-hui-fu-dao-li-shi-ban-ben/","excerpt":"","text":"查看commit_id1git log $filename 重置文件1git reset $commit_id 恢复文件1git checkout $filename","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"GIT","slug":"GIT","permalink":"http://ystyle.top/tags/GIT/"}]},{"title":"缘尽世间","slug":"yuan-jin-shi-jian","date":"2015-06-26T08:43:22.000Z","updated":"2016-08-16T12:26:18.000Z","comments":true,"path":"2015/06/26/yuan-jin-shi-jian/","link":"","permalink":"http://ystyle.top/2015/06/26/yuan-jin-shi-jian/","excerpt":"","text":"天地间 有你我的缘 交汇在前世和今生之间 忘不了你一身的绒血 回响在轮回的夜 回忆的瞬间 看见你的眼 停留在最初和你遇见 放不下今生的一段缘 消失在山的另一面 问苍天 悲欢离合谁是谁非 不如今夜与你举杯忘了醉 让曾经在梦醒之前连成线 消失在今生的最后一眼 回忆的瞬间 看见你的眼 停留在最初和你遇见 放不下今生的一段缘 消失在山的另一面 问苍天 悲欢离合谁是谁非 不如今夜与你举杯忘了醉 让曾经在梦醒之前连成线 消失在今生的最后一眼 问苍天 悲欢离合谁是谁非 不如今夜与你举杯忘了醉 让曾经在梦醒之前连成线 消失在今生的最后一眼 问苍天 悲欢离合谁是谁非 不如今夜与你举杯忘了醉 让曾经在梦醒之前连成线 消失在今生的最后一眼","categories":[{"name":"魔盒","slug":"魔盒","permalink":"http://ystyle.top/categories/魔盒/"}],"tags":[{"name":"音乐","slug":"音乐","permalink":"http://ystyle.top/tags/音乐/"}]},{"title":"每日一笑","slug":"mei-ri-xiao-2","date":"2015-06-23T00:32:17.000Z","updated":"2015-06-23T00:56:42.000Z","comments":true,"path":"2015/06/23/mei-ri-xiao-2/","link":"","permalink":"http://ystyle.top/2015/06/23/mei-ri-xiao-2/","excerpt":"","text":"晚上十二点后睡觉等于慢性自杀，不吃早餐等于慢性自杀，经常烧烤等于慢性自杀，手机24小时开机等于慢性自杀，长期呆室内等于慢性自杀，缺乏锻炼等于慢性自杀。 我突然发现，我一天啥都没干，光TM自杀了！","categories":[{"name":"魔盒","slug":"魔盒","permalink":"http://ystyle.top/categories/魔盒/"}],"tags":[{"name":"笑话","slug":"笑话","permalink":"http://ystyle.top/tags/笑话/"}]},{"title":"JDK环境变量配置脚本","slug":"jdkhuan-jing-bian-liang-pei-zhi-jiao-ben","date":"2015-06-21T13:16:17.000Z","updated":"2015-11-02T08:40:22.000Z","comments":true,"path":"2015/06/21/jdkhuan-jing-bian-liang-pei-zhi-jiao-ben/","link":"","permalink":"http://ystyle.top/2015/06/21/jdkhuan-jing-bian-liang-pei-zhi-jiao-ben/","excerpt":"","text":"复制到jdk安装目录,右键以powershell运行 123456789101112131415161718192021222324252627282930313233343536373839404142#region 强制以管理员权限运行$currentWi = [Security.Principal.WindowsIdentity]::GetCurrent()$currentWp = [Security.Principal.WindowsPrincipal]$currentWiif( -not $currentWp.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))&#123; $boundPara = ($MyInvocation.BoundParameters.Keys | foreach&#123;'-&#123;0&#125; &#123;1&#125;' -f $_ ,$MyInvocation.BoundParameters[$_]&#125; ) -join ' ' $currentFile = $MyInvocation.MyCommand.Definition $fullPara = $boundPara + ' ' + $args -join ' ' Start-Process \"$psHome\\powershell.exe\" -ArgumentList \"$currentFile $fullPara\" -verb runas return&#125;#endregion#region 初始化应用$currPath = Split-Path -Parent $MyInvocation.MyCommand.Definitioncd $currPath$isJDKJavac = Test-Path \"./bin/javac.exe\"$isJREJava = Test-Path \"./bin/java.exe\"$path = [environment]::GetEnvironmentvariable(\"path\", \"Machine\")if($path.Length&gt;0)&#123; $temp = \";\"&#125;else&#123; $temp = \"\"&#125;#endregion#region 配置环境变量if($isJDKJavac)&#123; echo \"检测到./bin/javac编译器...\" echo \"设置环境变量：JAVA_HOME = $currPath\" [environment]::SetEnvironmentvariable(\"JAVA_HOME\", $currPath, \"Machine\") echo \"设置环境变量：PATH = %JAVA_HOME%\\bin;\" [environment]::SetEnvironmentvariable(\"path\", $path + $temp + \"%JAVA_HOME%\\bin;\", \"Machine\")&#125;elseif($isJREJava)&#123; echo \"检测到./jre/java运行环境...\" echo \"设置环境变量：PATH = $currPath\\bin\" [environment]::SetEnvironmentvariable(\"path\", $path + $temp + $currPath+\"\\bin;\", \"Machine\")&#125;else&#123; echo \"没有检测到JAVA环境\"&#125;#endregionpause 复制到文件另存为run.sp1 网盘下载：链接 密码：27uj","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://ystyle.top/tags/JAVA/"}]},{"title":"Ghost-flat主题优化","slug":"ghost-flatzhu-ti-you-hua","date":"2015-06-21T02:51:05.000Z","updated":"2015-06-21T15:11:15.000Z","comments":true,"path":"2015/06/21/ghost-flatzhu-ti-you-hua/","link":"","permalink":"http://ystyle.top/2015/06/21/ghost-flatzhu-ti-you-hua/","excerpt":"","text":"###图片自适应(包括手机上)文件名assets/css/app.css12345section.posts img &#123; max-width: 100%; height: auto; width: auto\\9;&#125; ###文章里的链接新页面打开文件名`assets/js/ghost-blog.js1234// 放19行后面$('section.posts a[href^=\"http\"]').each(function()&#123; $(this).attr('target', '_blank');&#125;); ###多说评论","categories":[{"name":"编程","slug":"编程","permalink":"http://ystyle.top/categories/编程/"}],"tags":[{"name":"Ghost","slug":"Ghost","permalink":"http://ystyle.top/tags/Ghost/"}]},{"title":"Ghost博客优化","slug":"ghostbo-ke-you-hua","date":"2015-06-21T02:00:45.000Z","updated":"2015-06-24T06:52:35.000Z","comments":true,"path":"2015/06/21/ghostbo-ke-you-hua/","link":"","permalink":"http://ystyle.top/2015/06/21/ghostbo-ke-you-hua/","excerpt":"","text":"###修改标题不显示页数 文件名:node_modules/ghost/core/server/helpers/meta_title.js 123// if (pagination &amp;&amp; pagination.total &gt; 1) &#123;// pageString = ' - Page ' + pagination.page;// &#125; ###修改时区与汉化时间显示到openshift的源码目录，安装moment-timezone模块： 12cd $&#123;OPENSHIFT_REPO_DIR&#125;/npm install moment-timezone --save 文件名node_modules/ghost/core/server/helpers/date.js1234var moment = require('moment-timezone'), date;moment.locale('zh-cn');moment.tz.setDefault(\"Asia/Shanghai\");","categories":[{"name":"编程","slug":"编程","permalink":"http://ystyle.top/categories/编程/"}],"tags":[{"name":"Ghost","slug":"Ghost","permalink":"http://ystyle.top/tags/Ghost/"}]},{"title":"端午节快乐","slug":"duan-wu-jie-kuai-le","date":"2015-06-20T04:44:39.000Z","updated":"2015-06-20T18:57:46.000Z","comments":true,"path":"2015/06/20/duan-wu-jie-kuai-le/","link":"","permalink":"http://ystyle.top/2015/06/20/duan-wu-jie-kuai-le/","excerpt":"","text":"公司发的粽子到了 打开看看 蒸两个尝尝 最后，大家粽子节快乐","categories":[{"name":"魔盒","slug":"魔盒","permalink":"http://ystyle.top/categories/魔盒/"}],"tags":[{"name":"端午节","slug":"端午节","permalink":"http://ystyle.top/tags/端午节/"}]},{"title":"Bug 千百个，注释无一行","slug":"bug-qian-bai-ge-zhu-shi-wu-xing","date":"2015-06-18T20:45:21.000Z","updated":"2015-06-18T22:10:48.000Z","comments":true,"path":"2015/06/18/bug-qian-bai-ge-zhu-shi-wu-xing/","link":"","permalink":"http://ystyle.top/2015/06/18/bug-qian-bai-ge-zhu-shi-wu-xing/","excerpt":"","text":"十年生死两茫茫，编代码，到天亮。Bug千百个，注释无一行。纵使相逢仍不识，黑眼圈，鬓如霜。垂死病中惊坐起，修Bug，加班狂。纵使上线又怎样？朝令改，夕断肠。领导每天新想法，天天改，日日忙。相顾无言，惟有泪千行。每晚灯火阑珊处，需求改，Coding忙。","categories":[{"name":"魔盒","slug":"魔盒","permalink":"http://ystyle.top/categories/魔盒/"}],"tags":[{"name":"笑话","slug":"笑话","permalink":"http://ystyle.top/tags/笑话/"}]},{"title":"我的第一篇博客","slug":"welcome-to-ghost","date":"2015-06-17T04:50:12.000Z","updated":"2015-06-17T21:46:30.000Z","comments":true,"path":"2015/06/17/welcome-to-ghost/","link":"","permalink":"http://ystyle.top/2015/06/17/welcome-to-ghost/","excerpt":"","text":"我也不知道要发些什么","categories":[{"name":"魔盒","slug":"魔盒","permalink":"http://ystyle.top/categories/魔盒/"}],"tags":[{"name":"心情","slug":"心情","permalink":"http://ystyle.top/tags/心情/"}]},{"title":"OpenShift部署Ghost","slug":"openshiftbu-shu-ghost","date":"2015-06-16T23:45:20.000Z","updated":"2016-09-09T02:41:04.000Z","comments":true,"path":"2015/06/16/openshiftbu-shu-ghost/","link":"","permalink":"http://ystyle.top/2015/06/16/openshiftbu-shu-ghost/","excerpt":"","text":"简介：利用免费云服务部署个人博客 ###一、注册openshift 点击注册 ###二、安装Ghost 点 Applications - Add Applications 找到 Ghost x.x.x 点进去Public URL 随便写如：ghost 拉到下面点 Create Application ###三、配置域名 点 Applications - 进入自己的应用 点Change添加个人域名，Add alia进入新页面填入自己的域名就行了如：www.lxy520.net 进入域名解析如：万网 添加CNAME 指向 应用地址类似： xxx-xxxx.rhcloud.com 打开Git bash 执行12cd ~/.sshcat id_rsa.pub # 没有的话选运行 ssh-keygen -t rsa -C “您的邮箱地址” 到 Settings - Add a new key... 复制id_rsa.pub里的内容到大的编辑框，第一行名称可以随便写，然后保存 然后复制应用页面的 Source Code 类似： `xxxx@xxx-xxxx.rhcloud.com` 的地址 在Git bash 执行: 1ssh xxxx@xxx-xxxx.rhcloud.com #如： ssh 5581340d50044601a3000167@ghost-ystyle.rhcloud.com 远程到openshift后(可以用其它工具连接如xshell) 123#安装主题 其它主题下载：http://marketplace.ghost.org/cd $&#123;OPENSHIFT_REPO_DIR&#125;/themes/git clone https://github.com/fabienwang/Ghost-Flat.git 123#配置Ghost博客cd $&#123;OPENSHIFT_REPO_DIR&#125;vim config.js #按i进入编辑模式，修改第一页和下几页的production下的url为自己的域名 如：http://www.lxy520.net 然后按Esc输入:wq 按回车退出 1234#实现openshift自动重启cd $&#123;OPENSHIFT_REPO_DIR&#125;.openshift/cron/hourlywget http://dl-cystc.qiniudn.com/openshift/restart.shchmod 711 restart.sh 12#重启应用, 安装主题与修改config.js 时需要重启应用ctl_all restart ###四、初始化博客 用自己的域名进入博客，在地址栏加上/ghost 输入用户名，邮箱，密码初始化博客 完成之后, 后台页面 content 管理文章，New post发布博客， Setting设置博客基本信息","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"Ghost","slug":"Ghost","permalink":"http://ystyle.top/tags/Ghost/"}]},{"title":"SpagoBI 5.2 中文汉化补丁包","slug":"spagobi-5-2-zhong-wen-yi-hua-bu-ding-bao","date":"2015-01-04T21:26:07.000Z","updated":"2017-01-06T11:36:34.000Z","comments":true,"path":"2015/01/04/spagobi-5-2-zhong-wen-yi-hua-bu-ding-bao/","link":"","permalink":"http://ystyle.top/2015/01/04/spagobi-5-2-zhong-wen-yi-hua-bu-ding-bao/","excerpt":"","text":"[SpagoBI 5.2 汉化补丁说明] 本补丁[SpagoBI 5.2]对谨针对[webapp/SpagoBI]项目的汉化. 并在几个常用表单上支持了中文的输入[名称, 描述]。(实现该功能的java文件在对应的class目录下)。 本补丁的perproties文件基于SpagoBI 5.2最新的文件翻译。 补丁由多人翻译, 可能对个别名词翻译不到位或翻译成不同中文词组。个别语句由谷歌翻译完成。 项目地址 [产品功能] 汉化支持 部分中文输入支持 [运行环境] jdk1.7 All-In-One-SpagoBI-5.2.0 windows/linux/other [免责声明]本补丁针对汉化文件, 使用本补丁后出现的任何问题本人一概不负责。本补丁不包含后续任何服务。购买或使用本补丁视为同意该声明。 [效果预览] 菜单1](https://static.oschina.net/uploads/img/201611/25152007_34ql.png)![菜单2 数据源 数据集 数据库-预览 值的预定义列表 预定义列表中值的详细信息 分析驱动细节 报表列表 报表设置 超简单的报表","categories":[{"name":"系统","slug":"系统","permalink":"http://ystyle.top/categories/系统/"}],"tags":[{"name":"SpagoBI","slug":"SpagoBI","permalink":"http://ystyle.top/tags/SpagoBI/"},{"name":"汉化","slug":"汉化","permalink":"http://ystyle.top/tags/汉化/"}]}]}